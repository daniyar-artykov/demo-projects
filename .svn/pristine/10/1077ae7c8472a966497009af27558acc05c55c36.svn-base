package sleekbill.swingutils.datepicker.calendar;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyVetoException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.TimeZone;

import javax.swing.AbstractAction;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.InputMap;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JFormattedTextField;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.KeyStroke;
import javax.swing.SwingUtilities;
import javax.swing.plaf.ComponentUI;
import javax.swing.text.DateFormatter;
import javax.swing.text.DefaultFormatterFactory;
import sleekbill.Common;
import sleekbill.Config;

import sleekbill.SBConstants;
import sleekbill.swingutils.datepicker.common.CommitEvent;
import sleekbill.swingutils.datepicker.common.CommitListener;
import sleekbill.util.SBSwingUtils;

public class SBSimpleDatePickerUI extends DatePickerUI implements
        PropertyChangeListener {

    protected static final String POPUP_KEY = "##BasicVetoDatePickerUI.popup##";
    protected DatePicker peer;
    protected CalendarPane calendarPane;
    protected JButton button;
    protected JPopupMenu popup;
    protected JMaskedDateField fieldDate;
    protected JPanel tfPanel;
    protected ComponentListener componentListener;

    public static ComponentUI createUI(JComponent c) {
        return new SBSimpleDatePickerUI();
    }

    public void installUI(JComponent c) {
        peer = (DatePicker) c;
        installComponents();
        istallListeners();
        installKeyboardActions();
    }

    public void uninstallUI(JComponent c) {
        uninstallKeyboardActions();
        uninstallListeners();
        uninstallComponents();
        peer = null;
    }

    protected void installKeyboardActions() {
        InputMap input = peer.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
        input.put(KeyStroke.getKeyStroke(KeyEvent.VK_C, InputEvent.ALT_MASK),
                POPUP_KEY);
        input.put(KeyStroke.getKeyStroke(KeyEvent.VK_PAGE_DOWN, 0), POPUP_KEY);

        peer.getActionMap().put(POPUP_KEY, new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                showPopup(true);
            }
        });

    }

    protected void uninstallKeyboardActions() {
        InputMap input = peer.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
        input.remove(KeyStroke.getKeyStroke(KeyEvent.VK_C,
                InputEvent.ALT_MASK));
        input.remove(KeyStroke.getKeyStroke(KeyEvent.VK_PAGE_DOWN, 0));

        peer.getActionMap().remove(POPUP_KEY);
    }

    protected void istallListeners() {
        peer.addPropertyChangeListener(this);
    }

    protected void uninstallListeners() {
        peer.removePropertyChangeListener(this);
    }

    protected void uninstallComponents() {
        button.removeActionListener(componentListener);
        fieldDate.removePropertyChangeListener(componentListener);


        calendarPane.removePropertyChangeListener(componentListener);
        calendarPane.removeCommitListener(componentListener);
        calendarPane.removeActionListener(componentListener);

        peer.remove(tfPanel);
        peer.remove(button);
        popup = null;
        calendarPane = null;
        button = null;

        tfPanel = null;
        fieldDate = null;


    }

    protected void installComponents() {
        tfPanel = new JPanel();
        tfPanel.setLayout(new GridBagLayout());

        class IntDateFormatter extends DateFormatter {

            public IntDateFormatter(DateFormat df) {
                super(df);
            }

            @Override
            public Object stringToValue(String text) throws ParseException {
                Date d = Common.US_DATE_FORMAT.parse(fieldDate.getText().replace(" ", ""));

                return d;
            }
        }
        class IntSimpleDateFormat extends SimpleDateFormat {

            public IntSimpleDateFormat(String pattern) {
                super(pattern);
                setLenient(false);
            }
        }

        fieldDate = new JMaskedDateField(Common.selectedCompanyDateFormat, null, '_', peer);
        fieldDate.setDate(peer.getDate());
        fieldDate.setFocusLostBehavior(peer.getFocusLostBehavior());
        fieldDate.setEditable(peer.isFieldEditable());
        fieldDate.setToolTipText(peer.getToolTipText());
        fieldDate.setMaximumSize(new Dimension(80, 20));
        fieldDate.setPreferredSize(new Dimension(80, 20));
        fieldDate.addFocusListener(new FocusAdapter() {
            @Override
            public void focusGained(FocusEvent e) {
                SwingUtilities.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        fieldDate.selectAll();
                    }
                });
            }
        });


        GridBagConstraints gbc = new GridBagConstraints();
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.weightx = 0.1;
         gbc.weighty = 0.1;
        gbc.insets = new Insets(0, 0, 0, 10);

        tfPanel.add(fieldDate, gbc);



        tfPanel.setFocusTraversalPolicyProvider(true);

        // button
        button = new JButton();
        button.setFocusable(false);
        button.setMargin(new Insets(0, 0, 0, 0));
        button.setToolTipText(peer.getToolTipText());
        button.setOpaque(false);
        button.setBorder(null);
        button.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        button.setContentAreaFilled(false);

        setSimpeLook(false);
        // calendar
        calendarPane = new CalendarPane(peer.getStyle());
        calendarPane.setShowTodayButton(peer.isShowTodayButton());
        calendarPane.setFocusLostBehavior(JFormattedTextField.REVERT);
        //calendarPane.setFocusCycleRoot(true);
        calendarPane.setBorder(BorderFactory.createEmptyBorder(1, 3, 0, 3));
        calendarPane.setStripTime(false);
        calendarPane.setLocale(peer.getLocale());
        calendarPane.setZone(peer.getZone());
        calendarPane.setFocusable(peer.isDropdownFocusable());
        calendarPane.setColorOverrideMap(peer.getColorOverrideMap());
        calendarPane.setHolidayPolicy(peer.getHolidayPolicy());

        // popup
        popup = new JPopupMenu();
        popup.setLayout(new BorderLayout());
        popup.add(calendarPane, BorderLayout.CENTER);
        popup.setLightWeightPopupEnabled(true);
        // add
        peer.setLayout(new BorderLayout());

        switch (peer.getPickerStyle()) {
            case DatePicker.PICKER_STYLE_FIELD_AND_BUTTON:
                peer.add(tfPanel, BorderLayout.CENTER);
                peer.add(button, BorderLayout.EAST);
                break;
            case DatePicker.PICKER_STYLE_BUTTON:
                peer.add(button, BorderLayout.EAST);
                break;
        }

        peer.revalidate();
        peer.repaint();

        componentListener = new ComponentListener();

        button.addActionListener(componentListener);
        fieldDate.addPropertyChangeListener(componentListener);

        calendarPane.addPropertyChangeListener(componentListener);
        calendarPane.addCommitListener(componentListener);
        calendarPane.addActionListener(componentListener);

        peerDateChanged(peer.getDate());
        
        SBSwingUtils.applyCalendarFocusBorder(fieldDate);
    }

    public void setSimpeLook(boolean b) {
        if (b) {
            //tfPanel.setBorder(BorderFactory.createEmptyBorder());
            button.setText("...");
            button.setIcon(null);
        } else {
            //tfPanel.setBorder(new JTextField().getBorder());
            button.setText("");
            button.setIcon(new ImageIcon("./images/buttons/ico_calendar.png"));             //new ImageIcon(Resource.class.getResource("picker-16.png")));
        }

    }

    public void showPopup(boolean visible) {
        if (visible) {

            // try to apply date to calendar pane popup, but not cause commit
            if (peer.isKeepTime()) {
                try {
                    Date value = getDateFromFields();
                    calendarPane.removePropertyChangeListener(componentListener);
                    calendarPane.setDate(value);
                    calendarPane.addPropertyChangeListener(componentListener);

                } catch (ParseException e) {
                    // ignore
                } catch (PropertyVetoException e) {
                    // can not happen
                }
            }
            popup.show(peer, 0, peer.getHeight());
            calendarPane.requestFocus(false);
        } else {
            popup.setVisible(false);
        }
    }

    public void propertyChange(PropertyChangeEvent evt) {
        if (JComponent.TOOL_TIP_TEXT_KEY.equals(evt.getPropertyName())) {

            fieldDate.setToolTipText((String) evt.getNewValue());
            button.setToolTipText((String) evt.getNewValue());
        } else if (evt.getPropertyName().equals(DatePicker.PROPERTY_NAME_DATE)) {
            Date newValue = (Date) evt.getNewValue();
            peerDateChanged(newValue);
        } else if (evt.getPropertyName().equals(
                DatePicker.PROPERTY_NAME_FIELD_EDITABLE)) {

            fieldDate.setEditable(peer.isFieldEditable());
        } else if (evt.getPropertyName().equals(
                DatePicker.PROPERTY_NAME_FOCUS_LOST_BEHAVIOR)) {

            fieldDate.setFocusLostBehavior(peer.getFocusLostBehavior());
        } else if (evt.getPropertyName().equals(DatePicker.PROPERTY_NAME_LOCALE)) {
            //fieldDay.setFormatterFactory(createFormatterFactory());
            //fieldMonth.setFormatterFactory(createFormatterFactory());
            //fieldYear.setFormatterFactory(createFormatterFactory());
            calendarPane.setLocale(peer.getLocale());
        } else if (evt.getPropertyName().equals(
                DatePicker.PROPERTY_NAME_DATE_FORMAT)) {
            //fieldDay.setFormatterFactory(createFormatterFactory());
            //fieldMonth.setFormatterFactory(createFormatterFactory());
            //fieldYear.setFormatterFactory(createFormatterFactory());
        } else if (evt.getPropertyName().equals(DatePicker.PROPERTY_NAME_ZONE)) {
            //field.setFormatterFactory(createFormatterFactory());
            calendarPane.setZone((TimeZone) evt.getNewValue());
        } else if (evt.getPropertyName().equals(
                DatePicker.PROPERTY_NAME_SHOW_TODAY_BTN)) {
            boolean value = ((Boolean) evt.getNewValue()).booleanValue();
            calendarPane.setShowTodayButton(value);
        } else if (evt.getPropertyName().equals(
                DatePicker.PROPERTY_NAME_SHOW_NONE_BTN)) {
            boolean value = ((Boolean) evt.getNewValue()).booleanValue();
            calendarPane.setShowNoneButton(value);
        } else if (evt.getPropertyName().equals(
                DatePicker.PROPERTY_NAME_SHOW_NUMBER_WEEK)) {
            boolean value = ((Boolean) evt.getNewValue()).booleanValue();
            calendarPane.setShowNumberOfWeek(value);
        } else if (evt.getPropertyName().equals(DatePicker.PROPERTY_NAME_STYLE)) {
            int value = ((Integer) evt.getNewValue()).intValue();
            calendarPane.setStyle(value);
        } else if (evt.getPropertyName().equals(
                DatePicker.PROPERTY_NAME_VETO_POLICY)) {
            calendarPane.setVetoPolicy((VetoPolicy) evt.getNewValue());
        } else if (evt.getPropertyName().equals(
                DatePicker.PROPERTY_NAME_HOLIDAY_POLICY)) {
            calendarPane.setHolidayPolicy((HolidayPolicy) evt.getNewValue());
        } else if (evt.getPropertyName().equals("focusable")) {
            boolean value = ((Boolean) evt.getNewValue()).booleanValue();

            fieldDate.setFocusable(value);
        } else if (evt.getPropertyName().equals(
                DatePicker.PROPERTY_NAME_RESOURCES)) {
            CalendarResources resources = (CalendarResources) evt.getNewValue();
            calendarPane.setResources(resources);
        } else if (evt.getPropertyName().equals("enabled"/*
                 * DatePicker.PROPERTY_NAME_ENABLED
                 */)) {
            boolean value = ((Boolean) evt.getNewValue()).booleanValue();

            fieldDate.setEnabled(value);
            button.setEnabled(value);
        } else if (evt.getPropertyName().equals(
                DatePicker.PROPERTY_NAME_PICKER_STYLE)) {
            peer.updateUI();
        } else if (evt.getPropertyName().equals(
                DatePicker.PROPERTY_NAME_DROPDOWN_FOCUSABLE)) {
            calendarPane.setFocusable(peer.isDropdownFocusable());
        } else if(evt.getPropertyName().equals(
                DatePicker.CHANGE_ALIGNMENT)){
            fieldDate.setHorizontalAlignment(Integer.parseInt(evt.getNewValue().toString()));
        }
    }

    private void peerDateChanged(Date newValue) {
        try {
            calendarPane.removePropertyChangeListener(componentListener);
            calendarPane.setDate(newValue);
            calendarPane.addPropertyChangeListener(componentListener);
        } catch (PropertyVetoException e) {
            // Ignore. CalendarPane has no VetoModel here.
        }

        fieldDate.removePropertyChangeListener(componentListener);


        fieldDate.setDate(newValue);


        fieldDate.addPropertyChangeListener(componentListener);
    }

    private DefaultFormatterFactory createFormatterFactory() {
        return new DefaultFormatterFactory(new DateFormatter(peer.getDateFormat()));
    }

    protected class ComponentListener implements ActionListener,
            PropertyChangeListener, CommitListener {

        public void actionPerformed(ActionEvent e) {

            if (e.getSource() != calendarPane) {
                showPopup(true);
            } else {
                showPopup(false);
            }
        }

        public void propertyChange(PropertyChangeEvent evt) {
            if (evt.getSource() == calendarPane) {
                if (CalendarPane.PROPERTY_NAME_DATE.equals(evt.getPropertyName())) {
                    showPopup(false);

                    Date fieldValue = null;
                    try {
                        fieldValue = getDateFromFields();
                    } catch (ParseException e) {
                        //fieldValue = (Date) field.getValue();
                        //e.printStackTrace();
                        System.out.println("what now?");
                    }

                    if (fieldValue != null || evt.getNewValue() != null) {

                        if (peer.isKeepTime() && fieldValue != null && evt.getNewValue() != null) {

                            Calendar fieldCal = Calendar.getInstance(peer.getZone(), peer.getLocale());
                            fieldCal.setTime(fieldValue);

                            Calendar valueCal = Calendar.getInstance(peer.getZone(), peer.getLocale());
                            valueCal.setTime((Date) evt.getNewValue());

                            // era
                            fieldCal.set(Calendar.ERA, valueCal.get(Calendar.ERA));
                            // year
                            fieldCal.set(Calendar.YEAR, valueCal.get(Calendar.YEAR));
                            // month
                            fieldCal.set(Calendar.MONTH, valueCal.get(Calendar.MONTH));
                            // date
                            fieldCal.set(Calendar.DAY_OF_MONTH, valueCal.get(Calendar.DAY_OF_MONTH));

                            fieldDate.setDate(fieldCal.getTime());
                        } else {
                            fieldDate.setDate((Date) evt.getNewValue());
                        }
                    }
                }
            }

            if (evt.getSource() == fieldDate) {
                if ("value".equals(evt.getPropertyName())) {

                    try {
                        peer.setDate(fieldDate.getDate());
                    } catch (PropertyVetoException e) {
                        fieldDate.setDate(peer.getDate());
                    }
                }
            }
        }

        public void commit(CommitEvent action) {
            showPopup(false);

            if (fieldDate.getDate() != null || calendarPane.getDate() != null) {
                fieldDate.setDate(calendarPane.getDate());
            }
        }

        public void revert(CommitEvent action) {
            showPopup(false);

        }
    }

    public void commit() throws PropertyVetoException, ParseException {
        fieldDate.commitEdit();
    }

    public void revert() {
        peerDateChanged(peer.getDate());
    }

    public void observeMonth(int year, int month) {
        CalendarPaneUI ui = (CalendarPaneUI) calendarPane.getUI();
        ui.observeMonth(year, month);
    }

    protected Date getDateFromFields() throws ParseException {
        try {
            peer.commitEdit();
        } catch (Exception ex) {
            //...
        }

        if (fieldDate.isEditValid()) {
            return Common.US_DATE_FORMAT.parse(fieldDate.getText().replace(" ", ""));
        } else {
            return null;
        }
    }

    public void setInvalid(boolean bInvalid) {

        Color innerColor = new Color(251, 242, 243);
        Color outerColor = new Color(162, 103, 117);
        Color outerDefaultColor = new Color(171, 173, 179);

        if (bInvalid) {

            fieldDate.setBackground(innerColor);
            fieldDate.setBorder(BorderFactory.createLineBorder(outerColor));
        } else {

            fieldDate.setBackground(Color.white);
            fieldDate.setBorder(BorderFactory.createLineBorder(outerDefaultColor));
        }
    }
}
