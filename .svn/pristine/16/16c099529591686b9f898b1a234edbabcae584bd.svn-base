/*
 * Ziper.java
 *
 * Created on November 27, 2007, 12:00 PM
 */

package sleekbill;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Enumeration;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;
import java.util.zip.ZipOutputStream;

/**
 *
 * @author flaviu marcu
 */

public class Ziper {
    
  
  static public void zipFolder(String srcFolder,File destZipFile) throws Exception {
    ZipOutputStream zip = null;
    FileOutputStream fileWriter = null;

    fileWriter = new FileOutputStream(destZipFile);
    zip = new ZipOutputStream(fileWriter);

    addFolderToZip("", srcFolder, zip);
    zip.flush();
    zip.close();
  }

  static protected void addFileToZip(String path, String srcFile, ZipOutputStream zip) throws Exception {

    File folder = new File(srcFile);
    if (folder.isDirectory()) {
      addFolderToZip(path, srcFile, zip);
    } else {
      byte[] buf = new byte[1024];
      int len;
      FileInputStream in = new FileInputStream(srcFile);
      zip.putNextEntry(new ZipEntry(path + "/" + folder.getName()));
      while ((len = in.read(buf)) > 0) {
        zip.write(buf, 0, len);
      }
    }
  }

  static protected void addFolderToZip(String path, String srcFolder, ZipOutputStream zip) throws Exception {
    File folder = new File(srcFolder);

    if(folder.list()!=null)
        for (String fileName : folder.list()) {
            if (path.equals("")) {
                addFileToZip(folder.getName(), srcFolder + "/" + fileName, zip);
            } else {
                addFileToZip(path + "/" + folder.getName(), srcFolder + "/" + fileName, zip);
            }
        }
  }
  
  static public void unZip(ZipFile zip) throws IOException{
      Enumeration all = zip.entries();
      while (all.hasMoreElements()) {
        ZipEntry ze =  (ZipEntry) all.nextElement();
        unZipFile(ze,zip,"./");
      }
      zip.close();
  }
  
  static public void unZip(ZipFile zip,String toDir) throws IOException{
      Enumeration all = zip.entries();
      while (all.hasMoreElements()) {
        unZipFile((ZipEntry) all.nextElement(),zip,toDir);
      }
      zip.close();
  }
  
  static protected void unZipFile(ZipEntry e,ZipFile f,String toDirectory) throws IOException {
    String zipName = e.getName();
      if (zipName.startsWith("/")) {
        zipName = zipName.substring(1);
      }
      // if a directory, just return. We mkdir for every file,
      // since some widely-used Zip creators don't put out
      // any directory entries, or put them in the wrong place.
      if (zipName.endsWith("/")) {
        return;
      }
      // Else must be a file; open the file for output
      // Get the directory part.
      int ix = zipName.lastIndexOf('/');
      if(!toDirectory.endsWith("/")) toDirectory = toDirectory+"/";
      if (ix > 0) {
        String dirName = toDirectory+zipName.substring(0, ix);
        File d = new File(dirName);
        if (!(d.exists() && d.isDirectory())) {              
              if (!d.mkdirs()) {
                  System.err.println("Warning: unable to mkdir " + dirName);
            }
          }
        }
      FileOutputStream os = new FileOutputStream(toDirectory+zipName);
      InputStream is =  f.getInputStream(e);
      int n = 0;
      byte [] b=  new byte[8092];
      while((n = is.read(b)) > 0)
        os.write(b, 0, n);
      is.close();
      os.close();
    }
  
  public static String getParentDir(ZipFile zip) throws IOException{
      Enumeration all = zip.entries();
      if(all.hasMoreElements()) {
        String name = ((ZipEntry) all.nextElement()).getName();
        if(name.indexOf("userdata")==0)  return "userdata";
      }
      return null;
  }
  
  public static String getFirmaName(ZipFile zip) throws IOException {
      Enumeration all = zip.entries();
      if(all.hasMoreElements()) {
        String name = ((ZipEntry) all.nextElement()).getName();
        int ix=-1;
        if((ix=name.indexOf("/"))<0) return null;
        String firma = name.substring(0,ix);
        return firma;
      }
      return null;  
  }
  
  static public void specialUnZip(ZipFile zip,String toDir) throws IOException{
      Enumeration all = zip.entries();
      while (all.hasMoreElements()) {
        specialUnZipFile((ZipEntry) all.nextElement(),zip,toDir);
      }
      zip.close();
  }
  
  static protected void specialUnZipFile(ZipEntry e,ZipFile f,String toDirectory) throws IOException {
    String zipName = e.getName();
    zipName = zipName.substring(zipName.indexOf("/"));

      // if a directory, just return. We mkdir for every file,
      // since some widely-used Zip creators don't put out
      // any directory entries, or put them in the wrong place.
      if (zipName.endsWith("/")) {
        return;
      }
      zipName = zipName.replace("userdata/", "");
      // Else must be a file; open the file for output
      // Get the directory part.
      int ix = zipName.lastIndexOf('/');
      if (ix > 0) {
        String dirName = toDirectory+zipName.substring(0, ix);
        File d = new File(dirName);
        if (!(d.exists() && d.isDirectory())) {              
              if (!d.mkdirs()) {
                  System.err.println("Warning: unable to mkdir " + dirName);
            }
          }
        }
      FileOutputStream os = null;
      try {// pt Mac uneori apare fisier ".DS_Store" cu acest try merge mai departe //;)Esteban
          os = new FileOutputStream(toDirectory + zipName);
          InputStream is =  f.getInputStream(e);
          int n = 0;
          byte [] b=  new byte[8092];
          while((n = is.read(b)) > 0)
            os.write(b, 0, n);
          is.close();
          os.close();
      } catch (Exception excep) {
          excep.printStackTrace();
      }
    }  

}