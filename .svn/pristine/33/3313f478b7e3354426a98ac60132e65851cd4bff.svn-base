/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package sleekbill.frames;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Frame;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.TreeSet;

import javax.swing.JDialog;
import javax.swing.JPanel;
import javax.swing.JRootPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.event.TableModelEvent;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;

import sleekbill.frames.records.Record;
import sleekbill.swingutils.CellLabel;
import sleekbill.swingutils.DoubleClickActionListener;
import sleekbill.swingutils.JPanelBusyTable;
import sleekbill.swingutils.JPanelNoResults;
import sleekbill.swingutils.LabelGlassPane;
import sleekbill.swingutils.MultiLineCellRenderer;
import sleekbill.swingutils.PMJPanel;
import sleekbill.swingutils.SBAbstractTableModel;
import sleekbill.swingutils.SBDate;
import sleekbill.swingutils.SBJTable;
import sleekbill.swingutils.SortButtonRenderer;
import sleekbill.util.AlphanumCompare;

/**
 *
 * @author Andrei
 */
public abstract class JDialogBaseReport extends JDialog implements
        PropertyChangeListener {

    protected PMJPanel pmPanel;
    protected ReportTable reportTable;
    protected ReportTableModel reportTableModel;
    protected SortButtonRenderer sortButtonRenderer;
    protected JPanel jPTable;
    protected JPanelBusyTable busyPanel = new JPanelBusyTable();
    protected JPanel jPanelResults;
    protected JPanelNoResults jPanelNoResults;
    TreeSet<Integer> alwaysHideColumns = new TreeSet<Integer>();
    protected HeaderListener headerListener;
    LabelGlassPane glassPane = new LabelGlassPane();
    boolean bExtra = false;
    String DOCUMENT_TYPE = "";

    public JDialogBaseReport(Frame owner, boolean modal) {
        super(owner, modal);
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        if (dim.width == 1024) {
            setPreferredSize(new Dimension(1000, dim.height * 95 / 100));
        } else if (dim.width > 1280) {
            //setPreferredSize(new Dimension(1088, dim.height * 90 / 100));
            setPreferredSize(new Dimension(dim.width * 99 / 100, dim.height * 99 / 100));
        } else {
            setPreferredSize(new Dimension(dim.width * 99 / 100, dim.height * 99 / 100));
        }

        JRootPane pane = SwingUtilities.getRootPane(this);
        pane.setGlassPane(glassPane);
    }

    public void init(JPanel jpresults, JPanelNoResults jpnoresults, boolean bExtra) {

        this.bExtra = bExtra;
        //reportTableModel = 
        //reportTable = new ReportTable(jPTable);
        pmPanel = new PMJPanel(reportTableModel, reportTable, jpnoresults, bExtra, DOCUMENT_TYPE);
        reportTableModel.refreshData();

        reportTable.addDoubleClickActionListener(new DoubleClickActionListener(-1) {
            @Override
            public void actionPerformed(ActionEvent e) {
                reportTable.actionEdit();
            }
        });

        jPTable.add(pmPanel);
        jPTable.add(busyPanel);

        ((JTable) reportTable).addPropertyChangeListener((PropertyChangeListener) this);
        reportTable.setPreferredColumnWidths();

        sortButtonRenderer = new SortButtonRenderer();
        for (int i = 0; i < reportTable.getColumnCount() - 1; i++) {
            reportTable.getColumnModel().getColumn(i).setHeaderRenderer(sortButtonRenderer);
        }

        headerListener = new JDialogBaseReport.HeaderListener(reportTable.getTableHeader(), sortButtonRenderer);
        reportTable.getTableHeader().addMouseListener(headerListener);

        jPanelResults = jpresults;
        jPanelNoResults = jpnoresults;

        busyPanel.setVisible(true);
        pmPanel.revalidate();
        pmPanel.setVisible(false);
        reportTable.getTableHeader().setVisible(false);
        //showHide(reportTable.getRowCount() > 0);
        JPanel main = (JPanel) getContentPane();
        JScrollPane mainJsp = new JScrollPane(main);
        mainJsp.getVerticalScrollBar().setUnitIncrement(30);
        mainJsp.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        setContentPane(mainJsp);
    }

    public void showHide(boolean areResults) {
        if (jPanelResults == null || jPanelNoResults == null) {
            return;
        }
        if (areResults) {
            //jPanelResults.setVisible(true);
            jPanelNoResults.setVisible(false);
        } else {
            //jPanelResults.setVisible(false);
            jPanelNoResults.setVisible(true);
            //reportTable.getTableHeader().setVisible(false);
        }

        pmPanel.hideFields();
    }

    protected class ReportTable extends SBJTable {

        public ReportTable(JPanel p) {
            super(p);
        }

        @Override
        public TableCellRenderer getCellRenderer(int row, int column) {

            if (column != getModel().getColumnCount() - 1) {
                return new CellLabel();
            }

            return super.getCellRenderer(row, column);
        }

        @Override
        public TableCellEditor getCellEditor(int row, int column) {

            return super.getCellEditor(row, column);
        }

        @Override
        public void actionDelete() {
            JDialogBaseReport.this.actionDelete(getSelectedRow());
        }

        @Override
        public void actionEdit() {
            JDialogBaseReport.this.actionEdit(getSelectedRow());
        }

        @Override
        public void actionPreview() {
            JDialogBaseReport.this.actionPreview(getSelectedRow());
        }

        @Override
        public void actionExtra() {
            JDialogBaseReport.this.actionExtra(getSelectedRow());
        }

        @Override
        public void actionExtra2() {
            JDialogBaseReport.this.actionExtra2(getSelectedRow());
        }

        @Override
        public void tableChanged(TableModelEvent e) {
            super.tableChanged(e);
            SBAbstractTableModel tableModel = reportTableModel;
            if (reportTableModel == null) {
                return;
            }
            if (tableModel.isBusyLoading()) {
                firePropertyChange("tableBusyLoading", false, true);
            } else {
                firePropertyChange("tableBusyLoading", true, false);
            }
        }

        @Override
        public void setPreferredColumnWidths() {
            SBAbstractTableModel tableModel = reportTableModel;
            if (tableModel == null) {
                return;
            }
            if (tableModel.getPreferredColumnWidths() == null) {
                return;
            }
            for (int i = 0; i < getColumnCount(); i++) {
                int j = reportTableModel.getRealCol(i);
                getColumnModel().getColumn(i).setPreferredWidth(tableModel.getPreferredColumnWidths()[j]);
            }
        }
    }

    public abstract class ReportTableModel extends SBAbstractTableModel {

        private String table;
        private String id;
        private String[] columns;
        public String searchWhereClause = "";
        TreeSet<Integer> hiddenColumns = new TreeSet<Integer>();
        private String query;
        boolean sortPushed = false;
        boolean exporting = false;

        public ReportTableModel(String[] columnNames, String[] columns, 
                int[] preferredColumnWidths, String table, String id) {
            this.query = null;
            this.columnNames = columnNames;
            this.columns = columns;
            this.table = table;
            this.id = id;
            this.preferredColumnWidths = preferredColumnWidths;
        }

        public ReportTableModel(String[] columnNames, String[] columns, 
                int[] preferredColumnWidths, String table, String id, String query) {
            this(columnNames, columns, preferredColumnWidths, table, id);
            this.query = null;
            this.query = query;
        }

        public int getRealCol(int col) {
            int n = col;    // right number to return
            int i = 0;
            do {
                if ((hiddenColumns.contains(i))) {
                    n++;
                }
                i++;
            } while (i < n);
            // If we are on an invisible column,
            // we have to go one step further
            while ((hiddenColumns.contains(n))) {
                n++;
            }
            return n;
        }

        public int getRealSize() {
            return data.size();
        }

        @Override
        public boolean isCellEditable(int row, int col) {
            return (col == getColumnCount() - 1);
        }

        @Override
        public Object getValueAt(int row, int col) {

            if (bExtra && row > data.size() - 1) {
                return "";
            }
            if (col == getColumnCount() - 1) {
                return ""; //button column
            }

            col = getRealCol(col);
            if (col == 0) {
                return row + 1;
            }
            return data.get(row).getValueAt(col - 1);
        }

        @Override
        public abstract ArrayList<Record> getData();

        @Override
        public int getColumnCount() {
            return super.getColumnCount() - hiddenColumns.size();
        }

        @Override
        public String getColumnName(int col) {
            col = getRealCol(col);
            return super.getColumnName(col);
        }

        public int getId(Object[] row) {
            return ((Integer) row[getDBColumnCount()]);
        }

        public String getTableName() {
            return table;
        }

        public String getIdName() {
            return id;
        }

        /* not the header titles*/
        public String[] getDBColumnNames() {
            return columns;
        }

        public void deleteRow(int row) {
            data.remove(row);
            reportTableModel.refreshDataFire();
        }

        public void addRow(Record row) {
            data.add(row);
            reportTableModel.refreshDataFire();
            pmPanel.reset();
        }

        public void setSearchWhereClause(String wc) {
            searchWhereClause = wc;
        }

        public String getWhereClause() {
            return searchWhereClause;
        }

        public int getDBColumnCount() {
            return columns.length;
        }

        public Record getRow(int index) {
            return data.get(index);
        }

        @Override
        public void updateRow(Record record, int index) {
            if (index == -1) {
                return;
            }
            data.remove(index);
            data.add(index, record);
            fireTableRowsUpdated(index, index);
            //nt.getSelectionModel().setSelectionInterval(index,index);
        }

        public void sortByColumn(final int column, final boolean isAscent) {
            sortPushed = true;
            final int col = column > 0 ? getRealCol(column) : 0;
            if (col == 0) {
                return;
            }
            Collections.sort(data, new Comparator<Record>() {
                @Override
                public int compare(Record row1, Record row2) {
                    if (row1 instanceof Record && row2 instanceof Record) {
                        int newCol = col - 1;
                        if (newCol < 0) {
                            return 0;
                        }
                        Record row11 = (Record) row1;
                        Record row22 = (Record) row2;
                        Object val1 = row11.data[newCol];
                        Object val2 = row22.data[newCol];

                        int compareValue = 0;
                        if (val1 instanceof BigDecimal && val2 instanceof BigDecimal) {
                            BigDecimal bdVal1 = (BigDecimal) val1;
                            BigDecimal bdVal2 = (BigDecimal) val2;
                            compareValue = bdVal1.compareTo(bdVal2);
                        } else if (val1 instanceof Integer && val2 instanceof Integer) {
                            compareValue = ((Integer) val1).compareTo((Integer) val2);
                        } else if (val1 instanceof String && val2 instanceof String
                                && ((String) val1).contains("%") && ((String) val2).contains("%")) {
                            try {
                                String sVal1 = ((String) val1).replace("%", "");
                                sVal1 = sVal1.replace(":", "");
                                sVal1 = sVal1.replace(" ", "");
                                String sVal2 = ((String) val2).replace("%", "");
                                sVal2 = sVal2.replace(":", "");
                                sVal2 = sVal2.replace(" ", "");
                                BigInteger redoS1 = new BigInteger(sVal1);
                                BigInteger redoS2 = new BigInteger(sVal2);
                                compareValue = redoS1.compareTo(redoS2);
                            } catch (Exception ex) {
//                                String sVal1 = val1 == null ? "" : val1.toString();
//                                String sVal2 = val2 == null ? "" : val2.toString();;
                                compareValue = AlphanumCompare.compare(val1, val2);
                            }
                        } else if (val1 instanceof SBDate && val2 instanceof SBDate) {       //pt data scadentei care are '-'
                            if (((SBDate) val1).isLinie() && ((SBDate) val2).isLinie()) {
                                compareValue = 0;
                            } else if (((SBDate) val1).isLinie() && !((SBDate) val2).isLinie()) {
                                compareValue = -1;
                            } else if (!((SBDate) val1).isLinie() && ((SBDate) val2).isLinie()) {
                                compareValue = 1;
                            } else if (!((SBDate) val1).isLinie() && !((SBDate) val2).isLinie()) {
                                compareValue = ((Date) val1).compareTo((Date) val2);
                            }
                        } else if (val1 instanceof Date && val2 instanceof Date 
                                && !(val1 instanceof SBDate) && !(val2 instanceof SBDate)) {
                            compareValue = ((Date) val1).compareTo((Date) val2);
                        } else {
//                            String sVal1 = val1 == null ? "" : val1.toString();
//                            String sVal2 = val2 == null ? "" : val2.toString();;
                            compareValue = AlphanumCompare.compare(val1, val2);
                        }

                        if (compareValue != 0) {
                            return isAscent ? compareValue : -compareValue;
                        }

                        //extra sort asc
                        Integer id1 = row11.getExtraSortAsc();
                        Integer id2 = row22.getExtraSortAsc();
                        return id1.compareTo(id2) * -1;

                    }
                    return 0;
                }
            });
        }

        public int getIndex(int id) {
            for (int i = 0; i < data.size(); i++) {
                Object[] row = data.get(i).data;
                if (((Integer) row[getDBColumnCount()]) == id) {
                    return i;
                }
            }
            return -1;
        }

        @Override
        public void reSortTable() {
            if (sortButtonRenderer == null) {
                return; //not needed yet
            }
            for (int i = 0; i < getColumnCount(); i++) {
                if (sortButtonRenderer.getState(i) != SortButtonRenderer.NONE) {
                    boolean isAscent = sortButtonRenderer.getState(i) == SortButtonRenderer.DOWN;
                    sortByColumn(i, isAscent);
                    break;
                }
            }
        }

        @Override
        public void fireTableChanged(TableModelEvent e) {
            if (pmPanel != null) {
                pmPanel.fireTableChanged(e);
            }
            super.fireTableChanged(e);
        }

        public boolean isSortPushed() {
            return sortPushed;
        }

        public void setSortPushed(boolean b) {
            sortPushed = b;
        }

        public void setExporting(boolean e) {
            exporting = e;
        }
    }

    /*to overwrite*/
    public void actionEdit(int row) {
    }

    /*to overwrite*/

    public void actionDelete(int row) {
    }

    /*to overwrite*/

    public void actionPreview(int row) {
    }

    public void actionExtra(int row) {
    }

    public void actionExtra2(int row) {
    }

    public Record getRow(int row) {
        return reportTableModel.getRow(row);
    }

    public int getId(Object[] row) {
        return reportTableModel.getId(row);
    }

    public class BasicMultiLineCellRenderer extends MultiLineCellRenderer {

        public BasicMultiLineCellRenderer(SBJTable t) {
            super(t);
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            String text = (value == null) ? "" : value.toString();

            textPane.setText(text);
            textPane.setFont(UIManager.getFont("Table.font"));
            textPane.setToolTipText(text);
            cr = row;
            cc = column;

            if (isSelected) {
                //textPane.setForeground(table.getSelectionForeground());

                textPane.getStyledDocument().setParagraphAttributes(0, 0, textPane.getStyle("selected"), true);
                textPane.setBackground(table.getSelectionBackground());

            } else if (UIManager.get("Table.evenRowColor") instanceof Color && UIManager.get("Table.evenRowColor") instanceof Color) {
                Color rc = row % 2 == 0 ? (Color) UIManager.get("Table.evenRowColor") : (Color) UIManager.get("Table.oddRowColor");
                textPane.getStyledDocument().setParagraphAttributes(0, 0, textPane.getStyle("notselected"), true);
                textPane.setBackground(rc);
            } else {
                textPane.getStyledDocument().setParagraphAttributes(0, 0, textPane.getStyle("notselected"), true);
                textPane.setBackground(table.getBackground());
            }
            return textPane;
        }
    }

    public class HeaderListener extends MouseAdapter {

        JTableHeader header;
        SortButtonRenderer renderer;

        HeaderListener(JTableHeader header, SortButtonRenderer renderer) {
            this.header = header;
            this.renderer = renderer;
        }

        @Override
        public void mouseClicked(MouseEvent e) {
            int col = header.columnAtPoint(e.getPoint());
            sortByColumn(col);
        }

        public void sortByColumn(int col) {
            int sortCol = header.getTable().convertColumnIndexToModel(col);
            if (col == 0 || col == reportTableModel.getColumnCount() - 1) {
                return; //buttons column, no need to sort
            }
            renderer.setPressedColumn(col);
            renderer.setSelectedColumn(col);
            header.repaint();

            if (header.getTable().isEditing()) {
                header.getTable().getCellEditor().stopCellEditing();
            }

            boolean isAscent;
            isAscent = SortButtonRenderer.DOWN == renderer.getState(col);
            reportTableModel.sortByColumn(sortCol, isAscent);
            reportTableModel.fireTableDataChanged();
            renderer.setPressedColumn(-1); // clear
            header.repaint();
        }

        public void reset() {
            renderer.setPressedColumn(-1); // clear
            renderer.setSelectedColumn(-1); // clear
            header.revalidate();
            header.repaint();
        }
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if (jPTable == null) {
            return;
        }
        if ("tableBusyLoading".equals(evt.getPropertyName())) {
            if (evt.getOldValue() == Boolean.FALSE && evt.getNewValue() == Boolean.TRUE) {
                busyPanel.setVisible(true);
                pmPanel.setVisible(false);
                reportTable.getTableHeader().setVisible(false);
            } else if (evt.getOldValue() == Boolean.TRUE && evt.getNewValue() == Boolean.FALSE) {
                busyPanel.setVisible(false);
                pmPanel.setVisible(true);
                reportTable.getTableHeader().setVisible(true);
                showHide(reportTableModel.getRowCount() > 0);
            }

        }
    }
}
