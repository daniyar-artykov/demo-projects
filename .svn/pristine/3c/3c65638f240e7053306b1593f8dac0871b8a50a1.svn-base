/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package sleekbill.entities;

import java.math.BigDecimal;

import com.j256.ormlite.dao.ForeignCollection;
import com.j256.ormlite.field.DataType;
import com.j256.ormlite.field.DatabaseField;
import com.j256.ormlite.field.ForeignCollectionField;
import com.j256.ormlite.table.DatabaseTable;

/**
 *
 * @author Andrei
 */
@DatabaseTable(tableName = "products")
public class ProductEntity {
    
	public static final String ID = "id";
    public static final String NAME = "name";
    public static final String DESCRIPTION = "description";
    public static final String MEASURING_UNIT = "measuring_unit";
    public static final String PRICE = "price";
    public static final String HAS_TAX_INCLUDED = "has_tax_included";
    public static final String TAX_ID = "tax_id";
    public static final String DELETED = "deleted";
    
    @DatabaseField(generatedId = true, columnDefinition = "INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL UNIQUE")
    protected int id;
    @DatabaseField(columnName = NAME, canBeNull = false)
    protected String name;
    @DatabaseField(columnName = DESCRIPTION, canBeNull = true)
    protected String description;
    @DatabaseField(columnName = MEASURING_UNIT, canBeNull = true)
    protected String measuringUnit;
    @DatabaseField(columnName = PRICE, canBeNull = false, dataType = DataType.BIG_DECIMAL)
    protected BigDecimal price;
    @DatabaseField(columnName = HAS_TAX_INCLUDED, canBeNull = false, dataType = DataType.BOOLEAN)
    protected boolean hasTaxIncluded;
    @DatabaseField(foreign = true, columnName = TAX_ID, foreignAutoRefresh = true, foreignAutoCreate = true, columnDefinition = "INTEGER REFERENCES taxes (id)")
    protected TaxEntity tax;
    @DatabaseField(columnName = DELETED, canBeNull = false, defaultValue = "n")
    protected String deleted;
    
    @ForeignCollectionField(foreignFieldName="product")
    protected ForeignCollection<InvoiceProductEntity> invoiceProducts;

    public ProductEntity(ProductEntity productsEntity) {
        this.id = productsEntity.id;
        this.name = productsEntity.name;
        this.description = productsEntity.description;
        this.measuringUnit = productsEntity.measuringUnit;
        this.price = productsEntity.price;
        this.hasTaxIncluded = productsEntity.hasTaxIncluded;
        this.tax = productsEntity.tax;
        this.deleted = productsEntity.deleted;
        this.invoiceProducts = productsEntity.invoiceProducts;
    }

    public ProductEntity() {
    }

    public ProductEntity(String name, BigDecimal price, boolean hasTaxIncluded) {
        this.name = name;
        this.price = price;
        this.hasTaxIncluded = hasTaxIncluded;
    }

    public ProductEntity(String name, String description, String measuringUnit, BigDecimal price, boolean hasTaxIncluded, TaxEntity tax) {
        this.name = name;
        this.description = description;
        this.measuringUnit = measuringUnit;
        this.price = price;
        this.hasTaxIncluded = hasTaxIncluded;
        this.tax = tax;
    }

	public ProductEntity(int id, String name, String description, String measuringUnit, BigDecimal price,
			boolean hasTaxIncluded, TaxEntity tax) {
		super();
		this.id = id;
		this.name = name;
		this.description = description;
		this.measuringUnit = measuringUnit;
		this.price = price;
		this.hasTaxIncluded = hasTaxIncluded;
		this.tax = tax;
	}

	public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public String getMeasuringUnit() {
        return measuringUnit;
    }

    public void setMeasuringUnit(String measuringUnit) {
        this.measuringUnit = measuringUnit;
    }

    public BigDecimal getPrice() {
        return price;
    }

    public void setPrice(BigDecimal price) {
        this.price = price;
    }

    public boolean isHasTaxIncluded() {
        return hasTaxIncluded;
    }

    public void setHasTaxIncluded(boolean hasTaxIncluded) {
        this.hasTaxIncluded = hasTaxIncluded;
    }

    public TaxEntity getTax() {
        return tax;
    }

    public void setTax(TaxEntity tax) {
        this.tax = tax;
    }

    public String getDeleted() {
        return deleted;
    }

    public void setDeleted(String deleted) {
        this.deleted = deleted;
    }

    public ForeignCollection<InvoiceProductEntity> getInvoiceProducts() {
        return invoiceProducts;
    }

    public void setInvoiceProducts(ForeignCollection<InvoiceProductEntity> invoiceProducts) {
        this.invoiceProducts = invoiceProducts;
    }

    @Override
    public int hashCode() {
        int hash = 7;
        hash = 37 * hash + this.id;
        hash = 37 * hash + (this.name != null ? this.name.hashCode() : 0);
        hash = 37 * hash + (this.description != null ? this.description.hashCode() : 0);
        hash = 37 * hash + (this.measuringUnit != null ? this.measuringUnit.hashCode() : 0);
        hash = 37 * hash + (this.price != null ? this.price.hashCode() : 0);
        hash = 37 * hash + (this.tax != null ? this.tax.hashCode() : 0);
        hash = 37 * hash + (this.deleted != null ? this.deleted.hashCode() : 0);
        return hash;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final ProductEntity other = (ProductEntity) obj;
        if (this.id != other.id) {
            return false;
        }
        if ((this.name == null) ? (other.name != null) : !this.name.equals(other.name)) {
            return false;
        }
        if ((this.description == null) ? (other.description != null) : !this.description.equals(other.description)) {
            return false;
        }
        if ((this.measuringUnit == null) ? (other.measuringUnit != null) : !this.measuringUnit.equals(other.measuringUnit)) {
            return false;
        }
        if (this.price != other.price && (this.price == null || !this.price.equals(other.price))) {
            return false;
        }
        if (this.hasTaxIncluded != other.hasTaxIncluded) {
            return false;
        }
        if (this.tax != other.tax && (this.tax == null || !this.tax.equals(other.tax))) {
            return false;
        }
        if ((this.deleted == null) ? (other.deleted != null) : !this.deleted.equals(other.deleted)) {
            return false;
        }
        return true;
    }
}
