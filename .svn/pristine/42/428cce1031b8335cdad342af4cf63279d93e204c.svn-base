/*
 * Common.java
 *
 * Created on November 5, 2007, 12:12 PM
 */
package sleekbill;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLEncoder;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Enumeration;
import java.util.Locale;
import java.util.Properties;
import java.util.Vector;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;

import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.w3c.dom.Document;
import org.xml.sax.SAXException;

import sleekbill.beans.CompanyDetails;
import sleekbill.beans.Invoice;
import sleekbill.beans.SBDaoException;
import sleekbill.beans.Version;
import sleekbill.db.DBConnection;
import sleekbill.db.SBConnection;
import sleekbill.entities.FacturiStornateEntity;
import sleekbill.frames.MainFrame;
import sleekbill.systray.SysTray;
import sleekbill.util.LastVersion;
import sleekbill.util.Modules;
import sleekbill.utils.SBDesktop;

import com.j256.ormlite.dao.Dao;
import com.j256.ormlite.dao.DaoManager;
import com.j256.ormlite.dao.GenericRawResults;
import com.j256.ormlite.jdbc.JdbcConnectionSource;
import java.io.BufferedInputStream;
import static java.lang.Math.abs;
import java.net.URLConnection;
import java.util.Calendar;
import java.util.List;
import java.util.TimeZone;
import javax.swing.ImageIcon;
import org.w3c.dom.NodeList;
import sleekbill.Company.OnlineStatus;
import static sleekbill.SBConstants.URLCONNECTION_TIMEOUT_EX;
import static sleekbill.SBConstants.URL_CHECK_FOR_UPDATES_SCRIPT;
import sleekbill.beans.Flag;
import sleekbill.beans.Tax;
import sleekbill.entities.CompanyDetailsEntity;
import sleekbill.frames.JDialogLogin;
import sleekbill.utils.NumberToWords;

/**
 *
 * @author flaviu marcu
 */
public class Common implements SBConstants {

    public static boolean IS_INDIA = true;
    public static boolean IS_PARTNER = false;
    public static String LIFETIME_URL = "https://secure.avangate.com/order/checkout.php?PRODS=4634544&QTY=1&CART=1&CARD=2&ORDERSTYLE=nLWo45WpqnY=";
    public static String LIFETIME_PRICE = "2499";
    public static String YEARLY_PRICE = "1249";
    public static String YEARLY_URL = "https://secure.avangate.com/order/checkout.php?PRODS=4634561&QTY=1&CART=1&CARD=2&LANG=en&ORDERSTYLE=nLWo45WpqnY=";
    public static boolean alreadyEncoded = false;
    public static int DOCUMENTS_COUNT = 9; //10?
    public static boolean NOTIFIED = false;

    public static Properties sbProperties = loadProperties();
    public static Config selectedCompanyConfig = new Config();
    public final static int NR_VERSION = 2;//Integer.parseInt(selectedCompanyConfig.get(Config.VERSION));
    public final static String VERSION = NR_VERSION + ".2.1.1";
    public final static String INSTALLATION_SOURCE = sbProperties.getProperty("rf");
    public static String REGISTRY_KEY;
    public static String AUTO_RUN_REGISTRY_KEY = null;
    public static final int PATCH = 1;
    public static final int INSTALLER = 2;
    public static final String COMPANY_EXSTS = "Company %1s already exists!";
    public static final String ERROR_CREATING_COMPANY = "Error! (check the company name)";
    public final static int EXPIRED_RESPONSE = 23833;
    public final static int HIGHER_YEAR_RESPONSE = 56842;
    public final static int LOWER_YEAR_RESPONSE = 66842;
    public static String DB_TEST_FILE_PATH = "./test/test.db";
    // pentru a putea schimba calea la import firme
    public static String COMPANIES_PATH = System.getProperty("os.name").toLowerCase().indexOf("mac") >= 0 ? System.getProperty("user.home") + "/Library/" + "SleekBill/companies/" : "./companies/";
    public static String USERDATA_FOLDER_PATH = "./userdata/";
    public static String DB_FILE_PATH = USERDATA_FOLDER_PATH + "dbfile/sleekbill.db";
    public static String SAVED_LOGOS_PATH = USERDATA_FOLDER_PATH + "logos/";
    public static String SAVED_BACKGROUNDS_PATH = USERDATA_FOLDER_PATH + "backgrounds/";
    public static String SAVED_STAMPS_PATH = USERDATA_FOLDER_PATH + "stamps/";
    public static String INVOICES_PATH = USERDATA_FOLDER_PATH + "invoices/";
    public static String PROFORME_PATH = USERDATA_FOLDER_PATH + "proforme/";
    public static String DB_FIRMA_TEMP_FILE_PATH = "";
    public static DateFormat jasperDateFormatter = new SimpleDateFormat("MMMMMMMMMM dd, yyyy", Locale.US);
    public static Vector<Company> companies = new Vector<Company>();
    public static MainFrame mainFrame = new MainFrame();
    public static Company selectedCompany = new Company("", "", /* cif, */ "", false, 0, new Modules(0), 0, "");
    public static SBConnection connection = new SBConnection();
    public static Version version = new Version(1);
    public static String user = "server";
    private static boolean connectedOnline = false;
    public static boolean IS_SERVER = true;
    public static SysTray systray;
    public static int updateType = INSTALLER;
    public static String updateCheckResponse = "";    //if updates available updateCheckResponse = new version
    public static String patchCheckResponse = "";
    public static Date serverDate = new Date();
    private static DesEncrypter enc = null;
    private static DesEncrypter encrypter = null;
    public static LastVersion lastVersion = new LastVersion();
    public final static String STYLE_MESSAGE_PANEL = "<html><div style=\"font-family:Verdana;font-size:13;\">";
    public final static String STYLE_MESSAGE_PANEL_1 = "</div></htmessagePanelml>";
    public final static String SPAN_STYLE_MSG_PAGE_OVERFLOW = "<span style=\"color:#FF7F2A; font-weight:bold;\">";
    public final static String SPAN_STYLE_MSG_PAGE_OVERFLOW_1 = "</span>";
    public final static String DIV_STYLE_MSG_PAGE_OVERFLOW = "<div style=\"font-size:11px;\">";
    public final static String DIV_STYLE_MSG_PAGE_OVERFLOW_1 = "</div>";
    public static CompanyDetails companyDetails = null;
    private static boolean testCompany = false;
    public static Tax noTax;
    public static Tax educationCess;
    public static Tax sbCess;
    public static Tax sheCess;
    public static String selectedCompanyDateFormat = " MM - dd - yyyy ";
    public static NumberToWords.DefaultProcessor numberToWords = new NumberToWords.DefaultProcessor();
    private static long dataPrimaCfg;//data din configurare initiala
    public static String notification1 = "./images/downloaded/BG1.png";
    public static String notification2 = "./images/downloaded/BG2.png";
    public static String notification3 = "./images/downloaded/BG3.png";
    public static String country = "";

    public static String freeCustomImage = "";
    public static String premiumCustomImage = "";

    public static String freeCustomImageLink = "https://www.billingsoftware.in/";
    public static String premiumCustomImageLink = "https://www.billingsoftware.in/";

    public static SimpleDateFormat US_DATE_FORMAT = new SimpleDateFormat("MM-dd-yyyy");
    public static SimpleDateFormat US_DATE_HOUR_FORMAT = new SimpleDateFormat("MM-dd-yyyy HH:mm:ss");
    public static SimpleDateFormat DOCUMENT_NUMBER_PREFIX_DATE_FORMAT = new SimpleDateFormat("dd-MM-yy");

    public static Flag lastFlag;

    public static MainFrame getMainFrame() {
        if (mainFrame == null) {
            mainFrame = new MainFrame();
        }
        return mainFrame;
    }

    public static long getInstallationTime() {
        if (Common.IS_WINDOWS) {
            try {
                //check install time int
                Process process = Runtime.getRuntime().exec("reg query " + Common.REGISTRY_KEY + " /v int");
                BufferedReader br = new BufferedReader(new InputStreamReader(process.getInputStream()));
                String line = "";
                while ((line = br.readLine()) != null) {
                    if (line.indexOf("int") < 0) {
                        continue;
                    }
                    Pattern p = Pattern.compile("\\d{1,}");
                    Matcher m = p.matcher(line);
                    if (m.find()) {
                        line = m.group();
                    }
                    try {
                        br.close();
                    } catch (IOException ex) {
                        ex.printStackTrace();
                    }
                    return Long.parseLong(line);
                }
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
        return System.currentTimeMillis();
    }

    public static Company getSelectedCompany() {
        return Common.selectedCompany;
    }

    public static void setSelectedCompany(Company company) {
        Common.selectedCompany = company;
    }

    public static boolean isTestCompany() {
        return testCompany;
    }

    public static void setTestCompany(boolean testCompany) {
        Common.testCompany = testCompany;
    }

    public static String getDBPath(String firma) {
        File dir = new File(COMPANIES_PATH + firma);
        if (!dir.exists()) {
//            throw new RuntimeException("Firma nu exista!");// F&*K VISTA
        }
        String dbPath = COMPANIES_PATH + firma + "/" + "dbfile/" + DB_FILE;
        return dbPath;
    }

    public static String getTestDBPath(String firma) {
        File dir = new File(TESTDB_PATH + firma);
        if (!dir.exists()) {
//            throw new RuntimeException("Firma nu exista!");// F&*K VISTA
        }
        String dbPath = TESTDB_PATH + firma + "/" + "dbfile/" + DB_FILE;
        return dbPath;
    }

    public static String getYearDB() {
        return "version.getYear()";
    }

    public static void goToLink(String link) {
        try {
            SBDesktop.browse(new java.net.URI(link + "&ref=" + Common.sbProperties.getProperty("rf") + "&ci" + "=" + nrZilePrimaCfg() + "&pi" + "=" + nrZilePrimaInstalare()));
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    /*userdata/dbfile/sleekbill.db is empty and remains empty*/
    //denumire must be sanitized
    /**
     * @param name
     * @return company
     */
    public static Company createCompany(String name) throws Exception {
        String dbName = new String(name);
        name = sanitizePath(name);
        File dir = new File(COMPANIES_PATH + name);
        if (new File(COMPANIES_PATH + name + "/dbfile/" + DB_FILE).exists()) {
            throw new Exception(String.format(COMPANY_EXSTS, name));
        }
        dir.mkdir();
        String firmaPath = COMPANIES_PATH + name + "/";
        String logos = firmaPath + "logos";
        String bgs = firmaPath + "backgrounds";
        String stamps = firmaPath + "stamps";
        String db = firmaPath + "dbfile";
        new File(logos).mkdir();
        new File(bgs).mkdir();
        new File(stamps).mkdir();
        if (isServer()) {
            new File(db).mkdir();
        }
        try {
            if (isServer()) {
                copy(new File("./userdata/dbfile/" + DB_FILE), new File(db + "/" + DB_FILE));
            }
        } catch (IOException ex) {
            ex.printStackTrace();
//			throw new RuntimeException(ex);
            throw new Exception(ERROR_CREATING_COMPANY);
        }
        return new Company(name, dir.getPath(), /*cif, */ logos, false, 0, new Modules(0), 0, dbName);
    }

    public static Properties loadProperties() {
        java.io.FileInputStream fis = null;
        try {
            java.util.Properties props = new java.util.Properties();
            fis = new java.io.FileInputStream(new java.io.File(PROPERTIES_FILE));
            props.load(fis);
            if (!props.containsKey("rf")) {
                props.setProperty("rf", "generic");
            } else {
                String rf = props.getProperty("rf");
                if (rf.equals("india-windex") || rf.equals("india-fusion") || rf.equals("india-vkcontrol")) {
                    IS_PARTNER = true;
                }
            }
            if (!props.containsKey("estimate_title")) {
                props.setProperty("estimate_title", "Quotation");
            }

            return props;
        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
            try {
                if (fis != null) {
                    fis.close();
                }
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
        return new Properties();
    }

    public static void saveProperties() {
        FileOutputStream fos = null;
        try {
            fos = new FileOutputStream(new File(PROPERTIES_FILE));
            sbProperties.store(fos, "");
        } catch (IOException ex) {
            ex.printStackTrace();
        } finally {
            try {
                fos.close();
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
    }

    public static boolean isServer() {
        return SERVER_MODE && IS_SERVER;
    }

    public static boolean isClient() {
        return SERVER_MODE && !IS_SERVER;
    }

    public static void switchToCompany(Company company) throws SQLException {
        switchToCompany(company, false, true);
    }

    public static void switchToCompany(Company company, boolean test, boolean init) throws SQLException {

        String name = company.getName();

        if (name.equals("Sleek Bill Test Database")) {
            testCompany = true;
        } else {
            testCompany = false;
        }

        for (Company c : companies) {
            if (c.getName().equals(name) && c.getOnlineStatus() != null) {
                String path = c.getPath() + "dbfile/" + Common.DB_FILE;
                if (c.getOnlineStatus().getRespId().equals("66842")) {
                    alterDatabase(c.getPath() + "/dbfile/" + Common.DB_FILE, c.getPath() + "/dbfile/" + Common.DB_FILE + "x", true);
                    Messages.showErrorMessageWithLink(mainFrame, c.getOnlineStatus().getMessage(), "Error");
                    System.exit(0);
                } else if (isBlacklisted(c.getPath() + "/dbfile/" + Common.DB_FILE)) {
                    alterDatabase(c.getPath() + "/dbfile/" + Common.DB_FILE, c.getPath() + "/dbfile/" + Common.DB_FILE + "x", false);
                }
            }
        }

        Common.setSelectedCompany(company);
        if (Common.connection.getConnection() != null) {
            Common.connection.getConnection().close();
        }
        Common.connection.setConnection(DBConnection.getConnection(test ? "" : Common.user, name));

        if (name == null || "".equals(name) || DBConnection.DEFAULT_DBKEY.equals(name)) {
            Common.USERDATA_FOLDER_PATH = "./userdata/";
            Common.SAVED_LOGOS_PATH = Common.USERDATA_FOLDER_PATH + "logos/";
            Common.SAVED_BACKGROUNDS_PATH = Common.USERDATA_FOLDER_PATH + "backgrounds/";
            Common.SAVED_STAMPS_PATH = Common.USERDATA_FOLDER_PATH + "stamps/";
            Common.DB_FILE_PATH = Common.USERDATA_FOLDER_PATH + "dbfile/" + Common.DB_FILE;

            Common.INVOICES_PATH = Common.USERDATA_FOLDER_PATH + "invoices/";
            Common.PROFORME_PATH = Common.USERDATA_FOLDER_PATH + "quotes/";

            if (Common.isServer()) {
                Updates.updateDB(Common.connection, company);
            }
            return;
        }

        File dir = new File((test ? Common.TESTDB_PATH : Common.COMPANIES_PATH) + name);
        if (!dir.exists()) {
            if (Common.isServer()) {
                return;
            } else {
//				try {
//					createCompany(denumire);
//				} catch (Exception ex) {
//					Logger.getLogger(Common.class.getName()).log(Level.SEVERE, null, ex);
//				}
            }
        }

        Common.USERDATA_FOLDER_PATH = (test ? Common.TESTDB_PATH : Common.COMPANIES_PATH) + name + "/";
        Common.SAVED_LOGOS_PATH = Common.USERDATA_FOLDER_PATH + "logos/";
        Common.SAVED_BACKGROUNDS_PATH = Common.USERDATA_FOLDER_PATH + "backgrounds/";
        Common.SAVED_STAMPS_PATH = Common.USERDATA_FOLDER_PATH + "stamps/";
        Common.DB_FILE_PATH = Common.USERDATA_FOLDER_PATH + "dbfile/" + Common.DB_FILE;

        Common.INVOICES_PATH = Common.REPORTS_FOLDER_PATH + name + "/invoices/";
        Common.PROFORME_PATH = Common.REPORTS_FOLDER_PATH + name + "/quotes/";

        //make dirs
        if (!new File(Common.SAVED_LOGOS_PATH).isDirectory()) {
            new File(Common.SAVED_LOGOS_PATH).mkdirs();
        }
        if (!new File(Common.SAVED_BACKGROUNDS_PATH).isDirectory()) {
            new File(Common.SAVED_BACKGROUNDS_PATH).mkdirs();
        }
        if (!new File(Common.SAVED_STAMPS_PATH).isDirectory()) {
            new File(Common.SAVED_STAMPS_PATH).mkdirs();
        }
        if (!new File(Common.INVOICES_PATH).isDirectory()) {
            new File(Common.INVOICES_PATH).mkdirs();
        }
        if (!new File(Common.PROFORME_PATH).isDirectory()) {
            new File(Common.PROFORME_PATH).mkdirs();
        }

        Common.sbProperties.setProperty("company", name);

        if (Common.isServer()) {
            Updates.updateDB(Common.connection, company);

//            new Thread(new Runnable() {
//
//                    @Override
//                    public void run() {
//                        try {
//                            Updates.updateDB(new SBConnection(new JdbcConnectionSource("jdbc:sqlite:./userdata/dbfile/sleekbill.db")), null);
//                        } catch (SQLException ex) {
//                            ex.printStackTrace();
//                        }
//                    }
//                }).start();
        } else if (Common.isClient()) {
//			ClientFactory factory = sleekbill.xmlrpc.Client.getFactory();
//			Handlers hs = (Handlers) factory.newInstance(Handlers.class);
//			hs.updateDB(DBAccess.getFirmakey());
        }

        try {
            noTax = new Tax(Tax.getNone(Common.connection.getConnection()));
            educationCess = new Tax(Tax.getEducationCess(Common.connection.getConnection()));
            sbCess = new Tax(Tax.getSBCess(Common.connection.getConnection()));
            sheCess = new Tax(Tax.getSheCess(Common.connection.getConnection()));
            lastFlag = Flag.getLast(Common.connection.getConnection());
        } catch (Exception ex) {
            ex.printStackTrace();
        }

        //check client version
        if (Common.isClient()) {
//			checkClientConnection();
//			if (!VERSIUNE.equals(getServerVersion()[0])) {
//				Messages.showErrorMessage(null, "Pe server ruleaza alta versiune Sleek Bill.\nVersiunile pe server si pe client retea trebuie sa coincida.", "Eroare");
//				System.exit(1);
//			}
        }

        Common.saveProperties();

        //TODO de incarcat configurarile.
        // O sa se incarce pentru fiecare firma
        selectedCompanyConfig = new Config();
        selectedCompanyDateFormat = selectedCompanyConfig.get(Config.DATE_MASK);
        US_DATE_FORMAT = new SimpleDateFormat(selectedCompanyDateFormat.replace(" ", ""));
//		selectedCompanyConfig.loadAll();

        //activare automata
        for (Company c : companies) {
            if (c.getName().equals(name)) {
//				String cif = name;
                String cif = c.getDbName();
                String cod = c.getOnlineStatus() != null ? c.getOnlineStatus().getCode() : "";

                if (cod.isEmpty() && c.getOnlineStatus() != null) {
                    break;
                }

                if (Common.IS_INDIA) {

                    if (vKCheckAllStandardKey(connection) == -1) { // india vechi si activat
                        Dao<FacturiStornateEntity, Integer> facDao = DaoManager.createDao(Common.connection.getConnection(), FacturiStornateEntity.class);
                        facDao.executeRawNoArgs("delete from facturi_stornate");

                        Calendar calendar = Calendar.getInstance();
                        calendar.setTimeInMillis(System.currentTimeMillis());
                        calendar.add(Calendar.DAY_OF_YEAR, 100);
                        Common.vKInsert(connection, null, Common.getVersion(),
                                String.valueOf(Common.getYear()), Common.getOsType(), new Date(calendar.getTimeInMillis()),
                                Integer.toString(new Modules().getModules()), "0", "3");
                        Common.selectedCompanyConfig.set(Config.INDIA, "");
                        //System.out.println(vKCheckAllNonStandardKey(connection));
                        break;
                    }
                }

                String suffix = "";
                if (Common.IS_INDIA) {
                    suffix = (c.getOnlineStatus() != null ? (c.getOnlineStatus().getFree().compareToIgnoreCase("true") == 0 ? "free" : "paid") : "");
                }
                String cf = Common.getC(cif + suffix);
                boolean isEqual = cf.equals(cod);
                if (isEqual) {
                    if (!Common.selectedCompanyConfig.get(Config.INDIA).equals(suffix)) {
                        Calendar cal = Calendar.getInstance();
                        cal.set(9999, 11, 31);
                        Date data = new Date(cal.getTimeInMillis());
                        Common.vKInsert(connection, cf, Common.getVersion(), String.valueOf(Common.getYear()), Common.getOsType(), data, Integer.toString(new Modules().getModules()), "0", "3");
                        Common.selectedCompanyConfig.set(Config.ACTIVATED, "true");
                        Common.selectedCompanyConfig.set(Config.INDIA, suffix);
                        Messages.showOkMessage(mainFrame, "You have successfully activated your copy of Sleek Bill" + (Common.IS_INDIA ? " for India" : "") + "!", "Confirmation!");
                    }
                } else {
                    //Messages.showErrorMessage(mainFrame, "You have successfully not activated your copy of Sleek Bill!", "Error");
                }
            }
        }

        String orderLicenseText = Common.IS_INDIA ? "Get Premium Features" : "Order License";
        if (Common.IS_INDIA && Common.selectedCompanyConfig.get(Config.INDIA).equals("free")) {
            orderLicenseText = "Upgrade License";
        }
        mainFrame.setOrderText(orderLicenseText);

        if (testCompany && Common.IS_INDIA && !Common.selectedCompanyConfig.get(Config.INDIA).equals("paid")) {
            String cf = Common.getC("Sleek Bill Test Databasepaid");
            Calendar cal = Calendar.getInstance();
            cal.set(9999, 11, 31);
            Date data = new Date(cal.getTimeInMillis());
            Common.vKInsert(connection, cf, Common.getVersion(), String.valueOf(Common.getYear()), Common.getOsType(), data, Integer.toString(new Modules().getModules()), "0", "3");
            Common.selectedCompanyConfig.set(Config.ACTIVATED, "true");
            Common.selectedCompanyConfig.set(Config.INDIA, "paid");
        }

        if (!Common.selectedCompanyConfig.get(Config.INDIA).equals("free") && selectedCompanyConfig.get(Config.USE_PASSWORD).equals("true")) {
            JDialogLogin login = new JDialogLogin(mainFrame, true);
            login.setCompanyName(name);
            login.setVisible(true);

            if (!login.isOK()) {
                System.exit(0);
            }
        }

        mainFrame.setTitle("Sleek Bill" + (IS_INDIA ? " for India" : "") + " 2016 " + VERSION.substring(VERSION.indexOf(".") + 1) + " - " + company.getName());
        country = "";
        try {
            companyDetails = CompanyDetails.getLast(connection.getConnection());
            country = companyDetails.getState().getCountry();
            mainFrame.setTitle("Sleek Bill" + (IS_INDIA ? " for India" : "") + " 2016 " + VERSION.substring(VERSION.indexOf(".") + 1) + " - " + companyDetails.getName());
        } catch (SBDaoException ex) {
            ex.printStackTrace();
        }
        if (init) {
            mainFrame.init();
        }

    }

    public static String sanitizePath(String string) {
        return string.replace("\\.", "-").replace("/", "-").replace("\\", "-").replace("<", "-").replace(">", "-").replace("*", "-").replace("|", "-").replace("?", "-").replace(":", "-").replace("\"", "-");
    }

    public static String fixPath(String string) {
        return string.replace("/", "\\");
    }

    public static void setRezPePagina(int value) {
        selectedCompanyConfig.set(Config.PAGE_RESULTS, value + "");
    }

    public static int getRezPerPagina() {
        return Integer.parseInt(selectedCompanyConfig.get(Config.PAGE_RESULTS));
    }

    //1 2 3
    public static String getVersion() {
        return VERSION.substring(0, VERSION.indexOf("."));
    }

//    public static String getVersionDb() {
//    	return version.getVersion();
//    }
    public static String getVersionNr() {
        String vs = VERSION;
        return vs != null ? vs.substring(vs.indexOf(".") + 1, vs.lastIndexOf(".")) : "";
    }

//	public static String getAllVersionDb(SBConnection connection) throws SBDaoException, SQLException {
//		
//		Version version = Version.get(connection);
//        if(version != null){
//        	String v = version.getVersion();
//       		return v;
//        }
//        return "";
//        
////		String vs = VERSION;
////		return vs != null ? vs.substring(vs.indexOf(".") + 1, vs.lastIndexOf(".")) : "";
//	}
    public static String getVersionMinor() {
        try {
            String vs = VERSION;
            if (VERSION.length() <= 5) {
                return null;
            }
            return vs != null ? vs.substring(vs.lastIndexOf(".") + 1, vs.lastIndexOf(".") + 2) : "";
        } catch (Exception e) {
            return null;
        }
    }

    public static String getVersionName(int v) {
        switch (v) {
            case 1:
            case 2:
            case 3:
//			if (Common.isClient())
//				return "Client Retea";
//			return "Profesional Plus";
            default:
                return "";
        }
    }

    public static String getExtension(File f) {
        String ext = "";
        String s = f.getName();
        int i = s.lastIndexOf('.');

        if (i > 0 && i < s.length() - 1) {
            ext = s.substring(i + 1).toLowerCase();
        }
        return ext;
    }

    public static String format(double number, int precision) {
        BigDecimal bd = BigDecimal.valueOf(number);
        precision = precision < 2 ? 2 : precision;
        bd = bd.setScale(precision, RoundingMode.HALF_UP);
        return bd.toString();
    }

    public static boolean existsOfflineHelp() {
        if (new File("./help").exists() && !connectedOnline) {
            return true;
        } else {
            return false;
        }
    }

    public static boolean deleteDir(File dir) {
        if (dir.isDirectory()) {
            String[] children = dir.list();
            for (int i = 0; i < children.length; i++) {
                boolean success = deleteDir(new File(dir, children[i]));
                if (!success) {
                    return false;
                }
            }
        }
        // The directory is now empty so delete it
        return dir.delete();
    }

    public static void copy(File src, File dst) throws IOException {
        InputStream in = new FileInputStream(src);
        OutputStream out = new FileOutputStream(dst);

        // Transfer bytes from in to out
        byte[] buf = new byte[1024];
        int len;
        while ((len = in.read(buf)) > 0) {
            out.write(buf, 0, len);
        }
        in.close();
        out.close();
    }

    public static String getInstallPath() {
        try {
            // check install time int
            Process process = Runtime.getRuntime().exec("reg query " + Common.REGISTRY_KEY + " /v InstallPath");
            BufferedReader br = new BufferedReader(new InputStreamReader(process.getInputStream()));
            String line = "";
            while ((line = br.readLine()) != null) {
                if (line.indexOf("InstallPath") < 0) {
                    continue;
                }
                line = line.replace("InstallPath", "").replace("REG_SZ", "");
                line = line.trim();
                try {
                    br.close();
                } catch (IOException ex) {
                    ex.printStackTrace();
                }
                return line;
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return null;
    }

    public static String getInstallVersion() {
        try {
            // check install time int
            Process process = Runtime.getRuntime().exec("reg query " + Common.REGISTRY_KEY + " /v Version");
            BufferedReader br = new BufferedReader(new InputStreamReader(process.getInputStream()));
            String line = "";
            while ((line = br.readLine()) != null) {
                if (line.indexOf("Version") < 0) {
                    continue;
                }
                line = line.replace("Version", "").replace("REG_SZ", "");
                line = line.trim();
                try {
                    br.close();
                } catch (IOException ex) {
                    ex.printStackTrace();
                }
                return line;
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return null;
    }

    public static boolean wasVersionInstalled(String version) {

        try {
            StringBuilder sb = new StringBuilder(Common.REGISTRY_KEY);
            sb.setLength(sb.length() - 6);
            sb.append(" ");
            sb.append(version);
            sb.append("\"");

            Process process = Runtime.getRuntime().exec("reg query " + sb.toString());
            BufferedReader br = new BufferedReader(new InputStreamReader(process.getInputStream()));
            String line = "";
            while ((line = br.readLine()) != null) {
                if (line.indexOf(version) < 0) {
                    continue;
                }
                return true;
            }

        } catch (IOException ex) {
            ex.printStackTrace();
        }

        return false;
    }

    public static boolean hasLettersOrNonNumbers(String s) {
        if (s == null) {
            return false;
        }
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (Character.isLetter(c)) {
                return true;
            }
            if (!Character.isDigit(c)) {
                return true;
            }
        }
        return false;
    }

    public static int getDaysBetween(Date d1, Date d2) {

        Calendar c = Calendar.getInstance();
        c.setTime(d2);

        Calendar c1 = Calendar.getInstance();
        c1.setTimeZone(TimeZone.getTimeZone("UTC"));
        c1.set(Calendar.YEAR, c.get(Calendar.YEAR));
        c1.set(Calendar.MONTH, c.get(Calendar.MONTH));
        c1.set(Calendar.DAY_OF_MONTH, c.get(Calendar.DAY_OF_MONTH));
        c1.set(Calendar.HOUR_OF_DAY, c.get(Calendar.HOUR_OF_DAY));
        c1.set(Calendar.MINUTE, c.get(Calendar.MINUTE));
        c1.set(Calendar.SECOND, c.get(Calendar.SECOND));
        c1.set(Calendar.MILLISECOND, c.get(Calendar.MILLISECOND));
        long t2 = c1.getTimeInMillis();

        c.setTime(d1);

        c1.set(Calendar.YEAR, c.get(Calendar.YEAR));
        c1.set(Calendar.MONTH, c.get(Calendar.MONTH));
        c1.set(Calendar.DAY_OF_MONTH, c.get(Calendar.DAY_OF_MONTH));
        c1.set(Calendar.HOUR_OF_DAY, c.get(Calendar.HOUR_OF_DAY));
        c1.set(Calendar.MINUTE, c.get(Calendar.MINUTE));
        c1.set(Calendar.SECOND, c.get(Calendar.SECOND));
        c1.set(Calendar.MILLISECOND, c.get(Calendar.MILLISECOND));
        long t1 = c1.getTimeInMillis();

        int days = abs((int) ((t2 - t1) / (1000 * 60 * 60 * 24)));
        return days;
    }

    public static int nrZilePrimaInstalare() {
        try {
            int nr_zile = getDaysBetween(new Date(), new Date(getInstallationTime()));
            return nr_zile;
        } catch (Exception e) {
            //e.printStackTrace();
            System.err.println("err___PI_______");

            return -1;
        }
    }

    public static int nrZilePrimaCfg() {
        try {
            int nr_zile = getDaysBetween(new Date(), new Date(getPrimaCfg()));
            return nr_zile;
        } catch (Exception e) {
            //e.printStackTrace();
            System.err.println("err___CI________");
            return -2;
        }
    }

    public static void postSilentData(CompanyDetails cd) {

        if (cd != null) {
            final String name = cd.getName() == null ? "" : cd.getName();
            final String phone = cd.getTelephone() == null ? "" : cd.getTelephone();
            final String email = cd.getEmail() == null ? "" : cd.getEmail();
            final String city = cd.getCity() == null ? "" : cd.getCity();
            new Thread(new Runnable() {

                @Override
                public void run() {
                    try {
                        URL url = new URL(URL_SAVE_SILENT);
                        URLConnection conn = (URLConnection) url.openConnection();
                        conn.setReadTimeout(URLCONNECTION_TIMEOUT_EX);

                        String data = "name=" + URLEncoder.encode(name, "UTF-8")
                                + "&phone=" + URLEncoder.encode(phone, "UTF-8")
                                + "&email=" + URLEncoder.encode(email, "UTF-8")
                                + "&city=" + URLEncoder.encode(city, "UTF-8");

                        conn.setDoOutput(true);
                        OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
                        wr.write(data);
                        wr.flush();
                        wr.close();
                        System.out.println(getStringFromInputStream(conn.getInputStream()));
                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }
                }
            }).start();

        }

    }

    public static void checkOnlineXML(Vector<Company> firme) throws Exception {

        try {

            URL url = new URL(URL_CHECK_FOR_UPDATES_SCRIPT);
            URLConnection conn = (URLConnection) url.openConnection();
            conn.setReadTimeout(URLCONNECTION_TIMEOUT_EX);

            String data = URLEncoder.encode("version", "UTF-8") + "=" + URLEncoder.encode(Common.getVersion(), "UTF-8")
                    + "&" + URLEncoder.encode("nr_version", "UTF-8") + "=" + URLEncoder.encode(Common.getVersionNr(), "UTF-8")
                    + (Common.getVersionMinor() != null ? "." + URLEncoder.encode(Common.getVersionMinor(), "UTF-8") : "")
                    + "&" + URLEncoder.encode("client", "UTF-8") + "=" + URLEncoder.encode(Common.isClient() ? "true" : "false", "UTF-8")
                    + "&" + URLEncoder.encode("ref", "UTF-8") + "=" + URLEncoder.encode(INSTALLATION_SOURCE, "UTF-8")
                    + "&" + URLEncoder.encode("ic", "UTF-8") + "=" + URLEncoder.encode(Common.selectedCompanyConfig.get(Config.INSTALL_CODE), "UTF-8");

            data += "&osType=" + URLEncoder.encode(Common.getOsType(), "UTF-8");

            if ("true".equals(sbProperties.get(Config.TEST_UPDATE))) {
                data = data + "&test=true";
            }

            String data1 = "";
            for (Company company : companies) {
                String name = company.getName();
                String dbName = company.getDbName();
                data1 += "&name=" + URLEncoder.encode(dbName, "UTF-8");
                SBConnection newConn = new SBConnection(DBConnection.getConnection(Common.user, name));
                int nrZile = vKCheckAll(newConn);
                String[] cd = CompanyDetails.getLastDetails(newConn.getConnection());
                if (cd != null) {
                    data1 += "&addr=" + cd[0];
                    data1 += "&web=" + cd[1];
                    data1 += "&cu=" + cd[2];
                } else {
                    data1 += "&addr=&web=&cu=";
                }
                newConn.getConnection().close();

                data1 += "&days=" + nrZile;
                data1 += "&lic=" + new Config().get(Config.INDIA, newConn.getConnection());
            }
            data += data1;

            conn.setDoOutput(true);
            OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
            wr.write(data);
            wr.flush();
            wr.close();

//			System.out.println(getStringFromInputStream(conn.getInputStream()));
            Document dom = parseXmlFile(conn.getInputStream(), false);

            if (dom == null) {
                return;
            }

            NodeList companiesList = dom.getElementsByTagName("COMPANY");
            for (int i = 0; i < companiesList.getLength(); i++) {
                NodeList childNodes = companiesList.item(i).getChildNodes();
                String name = "";
                String msg = "";
                String code = "";
                String free = "";
                String key = "";
                for (int j = 0; j < childNodes.getLength(); j++) {
                    if (childNodes.item(j).getNodeName().equals("MSG")) {
                        msg = childNodes.item(j).getTextContent();
                    }

                    if (childNodes.item(j).getNodeName().equals("CODE")) {
                        code = childNodes.item(j).getTextContent();
                    }

                    if (childNodes.item(j).getNodeName().equals("NAME")) {
                        name = childNodes.item(j).getTextContent();
                    }
                    if (childNodes.item(j).getNodeName().equals("FREE")) {
                        free = childNodes.item(j).getTextContent();
                    }
                    if (childNodes.item(j).getNodeName().equals("KEY")) {
                        key = childNodes.item(j).getTextContent();
                    }
                    if (childNodes.item(j).getNodeName().equals("HAS_LICENCE")) {
                        //System.out.println(childNodes.item(j).getTextContent());
                    }
                }
                for (Company company : companies) {
                    if (company.getDbName().equals(name)) {
                        OnlineStatus os = new OnlineStatus(code, msg, free, key);
                        company.setOnlineStatus(os);
                    }
                }
            }

            try {
                String link = dom.getElementsByTagName("IMG1").item(0).getTextContent();
                URL imgUrl = new URL(link);
                String imgPath = imgUrl.getPath();
                String imgName = imgPath.substring(imgPath.lastIndexOf("/") + 1);
                ImageIcon imgIcon = new ImageIcon(DOWNLOADED_IMAGES_FOLDER_PATH + imgName);
                if (imgIcon.getIconHeight() < 1) {
                    Common.saveUrl(link, DOWNLOADED_IMAGES_FOLDER_PATH + imgName);
                }
                notification1 = DOWNLOADED_IMAGES_FOLDER_PATH + imgName;
            } catch (Exception e) {
                System.out.println("img1: ");
                e.printStackTrace();
            }

            try {
                String link = dom.getElementsByTagName("IMG2").item(0).getTextContent();
                URL imgUrl = new URL(link);
                String imgPath = imgUrl.getPath();
                String imgName = imgPath.substring(imgPath.lastIndexOf("/") + 1);
                ImageIcon imgIcon = new ImageIcon(DOWNLOADED_IMAGES_FOLDER_PATH + imgName);
                if (imgIcon.getIconHeight() < 1) {
                    Common.saveUrl(link, DOWNLOADED_IMAGES_FOLDER_PATH + imgName);
                }
                notification2 = DOWNLOADED_IMAGES_FOLDER_PATH + imgName;
            } catch (Exception e) {
                System.out.println("img2: ");
                e.printStackTrace();
            }

            try {
                String link = dom.getElementsByTagName("IMG3").item(0).getTextContent();
                URL imgUrl = new URL(link);
                String imgPath = imgUrl.getPath();
                String imgName = imgPath.substring(imgPath.lastIndexOf("/") + 1);
                ImageIcon imgIcon = new ImageIcon(DOWNLOADED_IMAGES_FOLDER_PATH + imgName);
                if (imgIcon.getIconHeight() < 1) {
                    Common.saveUrl(link, DOWNLOADED_IMAGES_FOLDER_PATH + imgName);
                }
                notification2 = DOWNLOADED_IMAGES_FOLDER_PATH + imgName;
            } catch (Exception e) {
                System.out.println("img3: ");
                e.printStackTrace();
            }

            try {
                String link = dom.getElementsByTagName("FREE_CUSTOM_IMAGE").item(0).getTextContent();
                if (link != null && !link.isEmpty()) {
                    URL imgUrl = new URL(link);
                    String imgPath = imgUrl.getPath();
                    String imgName = imgPath.substring(imgPath.lastIndexOf("/") + 1);
                    ImageIcon imgIcon = new ImageIcon(DOWNLOADED_IMAGES_FOLDER_PATH + imgName);
                    if (imgIcon.getIconHeight() < 1) {
                        Common.saveUrl(link, DOWNLOADED_IMAGES_FOLDER_PATH + imgName);
                    }
                    freeCustomImage = DOWNLOADED_IMAGES_FOLDER_PATH + imgName;
                    freeCustomImageLink = dom.getElementsByTagName("FREE_CUSTOM_IMAGE_LINK").item(0).getTextContent();
                }
            } catch (Exception e) {
                System.out.println("free_custom_image: ");
                e.printStackTrace();
            }

            try {
                String link = dom.getElementsByTagName("PREMIUM_CUSTOM_IMAGE").item(0).getTextContent();
                if (link != null && !link.isEmpty()) {
                    URL imgUrl = new URL(link);
                    String imgPath = imgUrl.getPath();
                    String imgName = imgPath.substring(imgPath.lastIndexOf("/") + 1);
                    ImageIcon imgIcon = new ImageIcon(DOWNLOADED_IMAGES_FOLDER_PATH + imgName);
                    if (imgIcon.getIconHeight() < 1) {
                        Common.saveUrl(link, DOWNLOADED_IMAGES_FOLDER_PATH + imgName);
                    }
                    premiumCustomImage = DOWNLOADED_IMAGES_FOLDER_PATH + imgName;
                    premiumCustomImageLink = dom.getElementsByTagName("PREMIUM_CUSTOM_IMAGE_LINK").item(0).getTextContent();
                }

            } catch (Exception e) {
                System.out.println("premium_custom_image: ");
                e.printStackTrace();
            }

            String ustr = dom.getElementsByTagName("INSTALLER").item(0).getTextContent();
            Common.updateCheckResponse = CHECK_FOR_UPDATES_RESPONSE.equalsIgnoreCase(ustr) ? "" : ustr;
            ustr = dom.getElementsByTagName("PATCH").item(0).getTextContent();
            Common.patchCheckResponse = CHECK_FOR_UPDATES_RESPONSE.equalsIgnoreCase(ustr) ? "" : ustr;
            Common.connectedOnline = true;

            try {
                Common.YEARLY_PRICE = dom.getElementsByTagName("YEARLY_PRICE").item(0).getTextContent();
                //System.out.println("Y: " + Common.YEARLY_PRICE);
                Common.YEARLY_URL = dom.getElementsByTagName("YEARLY_URL").item(0).getTextContent();
                Common.LIFETIME_URL = dom.getElementsByTagName("LIFETIME_URL").item(0).getTextContent();
                Common.LIFETIME_PRICE = dom.getElementsByTagName("LIFETIME_PRICE").item(0).getTextContent();
                Common.DOCUMENTS_COUNT = Integer.valueOf(dom.getElementsByTagName("TOTAL_FREE_DOCS").item(0).getTextContent()) - 1;
                Common.alreadyEncoded = true;
            } catch (Exception ex) {
                ex.printStackTrace();
            }

            String servDate = dom.getElementsByTagName("DATE").item(0).getTextContent();
//			String servDate = "2012-04-13 11:29:33";
            try {
                serverDate = Common.SQLITE_DATE_HOUR_FORMAT.parse(servDate);
            } catch (ParseException e) {
                System.out.println("Wrong server date: " + servDate);
            }

            Common.connectedOnline = true;

        } catch (MalformedURLException ex) {
            Common.connectedOnline = true;
            ex.printStackTrace();
            throw new Exception("Failed to check for new versions.");
        } catch (IOException ex) {
            ex.printStackTrace();
            if (ex instanceof java.net.UnknownHostException
                    || ex instanceof java.net.ConnectException
                    || ex.getCause() instanceof java.net.UnknownHostException
                    || ex.getCause() instanceof java.net.ConnectException) {
                Common.connectedOnline = false;
            } else {
                Common.connectedOnline = true;
            }
            throw new Exception("Failed to check for new versions. Please check your internet connection.");
        } catch (Exception e) {
            Common.connectedOnline = true;
            e.printStackTrace();
        } finally {
            if (IS_PARTNER) {
                Common.DOCUMENTS_COUNT = 4;
            }
        }
    }

    public static void alterDatabase(String oldFileName, String tmpFileName, boolean block) {

        InputStream is = null;
        OutputStream os = null;
        try {
            is = new FileInputStream(new File(oldFileName));
            os = new FileOutputStream(new File(tmpFileName));
            byte[] buffer = new byte[1024];
            int length;
            boolean replace = true;
            while ((length = is.read(buffer)) > 0) {
                if (replace) {
                    if (block) {
                        buffer[0] = 's';
                        buffer[1] = 'q';
                        buffer[2] = 'l';
                    } else {
                        buffer[0] = 'S';
                        buffer[1] = 'Q';
                        buffer[2] = 'L';
                    }
                    replace = false;
                }
                os.write(buffer, 0, length);
            }
            is.close();
            os.close();
        } catch (Exception ex) {
        }

        // Once everything is complete, delete old file..
        File oldFile = new File(oldFileName);
        oldFile.delete();

        // And rename tmp file's name to old file name
        File newFile = new File(tmpFileName);
        newFile.renameTo(oldFile);
    }

    public static boolean isBlacklisted(String oldFileName) {

        boolean result = false;
        InputStream is = null;
        try {
            is = new FileInputStream(new File(oldFileName));
            byte[] buffer = new byte[1024];
            int length;
            while ((length = is.read(buffer)) > 0) {
                if (buffer[0] == 's' && buffer[1] == 'q' && buffer[2] == 'l') {
                    //System.out.println(new String(buffer, "UTF-8"));
                    result = true;
                    //break;
                }
                break;
            }
            is.close();
        } catch (Exception ex) {
        }

        return result;
    }

    public static String getOsType() {
        if (Common.isClient()) {
//			ClientFactory factory = sleekbill.xmlrpc.Client.getFactory();
//			Handlers hs = (Handlers) factory.newInstance(Handlers.class);
//			return hs.getOsType();
        }

        if (System.getProperty("os.name").toLowerCase().indexOf("linux") >= 0) {
            return "l";
        } else if (System.getProperty("os.name").toLowerCase().indexOf("mac") >= 0) {
            return "m";
        } else {
            return "w";
        }
    }

    public static Document parseXmlFile(InputStream is, boolean validating) {
        try {
            // Create a builder factory
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            factory.setValidating(validating);

            // Create the builder and parse the file
            Document doc = factory.newDocumentBuilder().parse(is);
            return doc;
        } catch (SAXException e) {
            // A parsing error occurred; the xml input is not valid
        } catch (ParserConfigurationException e) {
        } catch (IOException e) {
        }
        return null;
    }

    public static String getDenumireFirma(ZipFile zip) {
        String cif = "";
        try {
            Common.DB_FIRMA_TEMP_FILE_PATH = System.getProperty("java.io.tmpdir");
            Enumeration all = zip.entries();
            String dbPath = null;
            while (all.hasMoreElements()) {
                ZipEntry ze = (ZipEntry) all.nextElement();
                if (ze.toString().indexOf("sleekbill.db") >= 0) {
                    Ziper.unZipFile((ZipEntry) ze, zip, Common.DB_FIRMA_TEMP_FILE_PATH);
                    dbPath = ze.toString();
                    break;
                } else {
                    continue;
                }
            }
            if (dbPath == null) {
                return "";
            }
            Common.DB_FIRMA_TEMP_FILE_PATH = Common.DB_FIRMA_TEMP_FILE_PATH + dbPath;
            try {
                cif = CompanyDetails.getLastName(new JdbcConnectionSource("jdbc:sqlite:" + fixPath(Common.DB_FIRMA_TEMP_FILE_PATH)));
            } catch (Exception ex) {
                ex.printStackTrace();
            }
            try {
                DBConnection.getConnection("_TEMP_", FIRMA_TEMP_KEY).close();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
            new File(Common.DB_FIRMA_TEMP_FILE_PATH).delete();

        } catch (IOException ex) {
            ex.printStackTrace();
        }
        return cif;
    }

    public static String getDenumireFolderFirma(ZipFile zip) {
        String cif = "";
        Enumeration all = zip.entries();
        while (all.hasMoreElements()) {
            ZipEntry ze = (ZipEntry) all.nextElement();
            if (ze.toString().indexOf("sleekbill.db") >= 0) {
                cif = ze.toString().split("/")[0];
            } else {
                continue;
            }
        }

        return cif;
    }

    public static DesEncrypter encode() {
        // todo undo
        enc = new DesEncrypter("pepelepeu");
        return enc;
    }

    public static int getYear() {
        return Integer.parseInt(YEAR);
    }

    public static void saveUrl(String url, String filename) throws MalformedURLException, IOException {
        BufferedInputStream in = null;
        FileOutputStream fout = null;
        try {
            in = new BufferedInputStream(new URL(url).openStream());
            fout = new FileOutputStream(filename);

            byte data[] = new byte[1024];
            int count;
            while ((count = in.read(data, 0, 1024)) != -1) {
                fout.write(data, 0, count);
            }
        } finally {
            if (in != null) {
                in.close();
            }
            if (fout != null) {
                fout.close();
            }
        }
    }

    public static boolean vKInsert(SBConnection sbConnection, String k, String versiune, String an, String osType,
            Date dataExpirarii, String moduleNr, String access, String maxClients) {

        if (Common.isClient()) {
//			ClientFactory factory = sleekbill.xmlrpc.Client.getFactory();
//			Handlers hs = (Handlers) factory.newInstance(Handlers.class);
//			return hs.vKInsert(k, fkey, versiune, an, osType, dataExpirarii, moduleNr, access, maxClients);
        }

        // configure ky
        try {
            JdbcConnectionSource connectionSource = sbConnection.getConnection();
            Dao<FacturiStornateEntity, Integer> factDao = DaoManager.createDao(connectionSource, FacturiStornateEntity.class);
            FacturiStornateEntity entity = factDao.queryForId(1);

            if (entity == null) {// prima rulare
                String l = System.currentTimeMillis() + "";

                String v1 = Common.encode().encrypt(l);
//				String v2 = Common.encode().encrypt(",1");
                String v3 = Common.encode().encrypt(",1," + versiune + "," + an + "," + osType + ","
                        + Common.SQLITE_DATE_FORMAT.format(dataExpirarii) + "," + moduleNr + "," + access + ","
                        + maxClients);
                entity = new FacturiStornateEntity();
                entity.setId(1);
                entity.setDataStornarii(v1);
                entity.setValoare1(v3);
                entity.setValoare2(v1);
                factDao.create(entity);

                Dao<FacturiStornateEntity, Integer> facDao = DaoManager.createDao(Common.connection.getConnection(), FacturiStornateEntity.class);
                facDao.executeRawNoArgs("update facturi_stornate set id = 1");
            } else {
                String v1 = entity.getValoare1();
                // System.err.println("valoare = "+valoare);
                if (!v1.isEmpty()) {
                    v1 = Common.encode().decrypt(v1);
                    String arr[] = v1.split(",");
                    String cod = k == null ? arr[0] : k;
                    v1 = Common.encode().encrypt(
                            cod + ",1," + versiune + "," + an + "," + osType + ","
                            + Common.SQLITE_DATE_FORMAT.format(dataExpirarii) + "," + moduleNr + "," + access
                            + "," + maxClients);
                } else {
                    v1 = Common.encode().encrypt(
                            k != null ? k : "" + ",1," + versiune + "," + an + "," + osType + ","
                                    + Common.SQLITE_DATE_FORMAT.format(dataExpirarii) + "," + moduleNr + "," + access
                                    + "," + maxClients);
                }

                entity.setValoare1(v1);
                factDao.update(entity);
//				sql = "UPDATE facturi_stornate SET valoare1 = ?, valoare2 = ? ";
//				DBAccess.uidRow(sql, new Object[] { v1, Common.encode().encrypt(System.currentTimeMillis() + "") },
//						"_TEMP_", fkey);
            }

//			ResultSet rs = DBAccess.getRows(sql, "_TEMP_", fkey);
//			if (rs.next()) {
//				String v1 = rs.getString("valoare1");
//				// System.err.println("valoare = "+valoare);
//				if (!v1.equals("")) {
//					v1 = Common.encode().decrypt(v1);
//					String arr[] = v1.split(",");
//					String cod = k == null ? arr[0] : k;
//					v1 = Common.encode().encrypt(
//							cod + ",1," + versiune + "," + an + "," + osType + ","
//									+ Common.SQLITE_DATE_FORMAT.format(dataExpirarii) + "," + moduleNr + "," + access
//									+ "," + maxClients);
//				} else {
//					v1 = Common.encode().encrypt(
//							k != null ? k : "" + ",1," + versiune + "," + an + "," + osType + ","
//									+ Common.SQLITE_DATE_FORMAT.format(dataExpirarii) + "," + moduleNr + "," + access
//									+ "," + maxClients);
//				}
//
//				sql = "UPDATE facturi_stornate SET valoare1 = ?, valoare2 = ? ";
//				DBAccess.uidRow(sql, new Object[] { v1, Common.encode().encrypt(System.currentTimeMillis() + "") },
//						"_TEMP_", fkey);
//				rs.close();
//			} else {// prima rulare
//				String l = System.currentTimeMillis() + "";
//				String query = "INSERT INTO facturi_stornate(data_stornarii, valoare, valoare1, valoare2) VALUES(?, ?, ?, ?)";
//				String v1 = Common.encode().encrypt(l);
//				String v2 = Common.encode().encrypt(",1");
//				String v3 = Common.encode().encrypt(
//						",1," + versiune + "," + an + "," + osType + ","
//								+ Common.SQLITE_DATE_FORMAT.format(dataExpirarii) + "," + moduleNr + "," + access + ","
//								+ maxClients);
//				DBAccess.uidRow(query, new Object[] { v1, v2, v3, v1 }, "_TEMP_", fkey);
//			}
        } catch (SQLException ex) {
            ex.printStackTrace();
            return false;
        }
        return true;
    }

    public static int vKCheckAll(SBConnection sbConnection) {
        String lastName = "";
        try {
            Dao<CompanyDetailsEntity, Integer> cdDao = DaoManager.createDao(sbConnection.getConnection(), CompanyDetailsEntity.class);
            GenericRawResults<String[]> queryRaw = cdDao.queryRaw("select distinct name from company_details");
            List<String[]> results = queryRaw.getResults();
            for (String[] name : results) {
                if (Common.IS_INDIA) {
                    if (vKCheck(sbConnection, name[0] + "free") == -1 || vKCheck(sbConnection, name[0] + "paid") == -1) {
                        return -1;
                    }
                } else if (vKCheck(sbConnection, name[0]) == -1) {
                    return -1;
                }
            }
            lastName = CompanyDetails.getLastName(sbConnection.getConnection());
        } catch (Exception ex) {
            ex.printStackTrace();
        }

        return vKCheck(sbConnection, lastName);
    }

    public static int vKCheckAllNonStandardKey(SBConnection sbConnection) {
        String lastName = "";
        try {
            Dao<CompanyDetailsEntity, Integer> cdDao = DaoManager.createDao(sbConnection.getConnection(), CompanyDetailsEntity.class);
            GenericRawResults<String[]> queryRaw = cdDao.queryRaw("select distinct name from company_details");
            List<String[]> results = queryRaw.getResults();
            for (String[] name : results) {
                if (vKCheck(sbConnection, name[0] + "free") == -1 || vKCheck(sbConnection, name[0] + "paid") == -1) {
                    return -1;
                }
            }
            lastName = CompanyDetails.getLastName(sbConnection.getConnection());
        } catch (Exception ex) {
            ex.printStackTrace();
        }

        return vKCheck(sbConnection, lastName + "free");
    }

    public static int vKCheckAllStandardKey(SBConnection sbConnection) {
        String lastName = "";
        try {
            Dao<CompanyDetailsEntity, Integer> cdDao = DaoManager.createDao(sbConnection.getConnection(), CompanyDetailsEntity.class);
            GenericRawResults<String[]> queryRaw = cdDao.queryRaw("select distinct name from company_details");
            List<String[]> results = queryRaw.getResults();
            for (String[] name : results) {
                if (vKCheck(sbConnection, name[0]) == -1) {
                    return -1;
                }
            }
            lastName = CompanyDetails.getLastName(sbConnection.getConnection());
        } catch (Exception ex) {
            ex.printStackTrace();
        }

        return vKCheck(sbConnection, lastName);
    }

    public static int vKCheck(SBConnection sbConnection, String cif) {

        if (Common.isClient()) {
//			ClientFactory factory = smartbill.xmlrpc.Client.getFactory();
//			Handlers hs = (Handlers) factory.newInstance(Handlers.class);
//			return hs.vKCheck(fkey, cif);
        }

        try {
            // todo undo
            // if(true) return 5;

            JdbcConnectionSource connectionSource = sbConnection.getConnection();

            Dao<FacturiStornateEntity, Integer> factDao = DaoManager.createDao(connectionSource, FacturiStornateEntity.class);
            FacturiStornateEntity entity = factDao.queryForId(1);

            if (entity != null) {// exista ceva
                String valoare = entity.getValoare1(); //rs2.getString("valoare1");
                String configurat = "", cod = "";
                String an = "";
                String dEx = "";
                String module = "";
                String maxC = "";
                if (!valoare.equals("")) {
                    valoare = Common.encode().decrypt(valoare);
                    String arr[] = valoare.split(",");
                    cod = arr[0];
                    configurat = arr[1]; // configurat
                    if (arr.length != 9) {
                        configurat = "0";
                    } else {
                        an = arr[3];
                        dEx = arr[5];
                        module = arr[6];
                        maxC = arr[8];
                    }
                }
                if (configurat.equals("1")) {// configurat
                    // verificare every time
                    // nu are voie sa foloseasca versiunea asta; a aparut dupa
                    // data lui de expirare
                    if (SQLITE_DATE_FORMAT.parse(dEx).compareTo(RELEASE_DATE) < 0) {
                        return EXPIRED_RESPONSE;
                    }
                    if (SQLITE_DATE_FORMAT.parse(dEx).compareTo(new Date()) < 0) {
                        return EXPIRED_RESPONSE;
                    }
                    Date dBd = SQLITE_DATE_FORMAT.parse(an + "-01-01");
                    Date dApp = SQLITE_DATE_FORMAT.parse(Common.getYear() + "-01-01");
                    // if(SQLITE_DATE_FORMAT.parse(an+"-01-01").compareTo(SQLITE_DATE_FORMAT.parse(Common.getAn()+"-01-01"))
                    // != 0){
                    if (dBd.compareTo(dApp) > 0) {
                        return HIGHER_YEAR_RESPONSE;
                        // } else if(dBd.compareTo(dApp) < 0){
                        // return LOWER_YEAR_RESPONSE;
                    }

//					boolean isEqual = Common.getC(cif, Common.getVersion(), String.valueOf(Common.getYear()),
//							Common.UNIVERSAL_SO, dEx, String.valueOf(module), String.valueOf(maxC)).equals(cod);
//					if (!isEqual) {
//						isEqual = Common.getC(cif, Common.getVersion(), String.valueOf(Common.getYear()),
//								Common.getOsType(), dEx, String.valueOf(module), String.valueOf(maxC)).equals(cod);
//					}
                    boolean isEqual = Common.getC(cif).equals(cod);

                    // TODO de testat si cu SO=-
                    // if (!Common.getC(cif, Common.getVersiune(),
                    // String.valueOf(Common.getAn()), Common.getOsType(), dEx,
                    // String.valueOf(module),
                    // String.valueOf(maxC)).equals(cod)) {
                    if (!isEqual) {
                        String s = Common.encode().decrypt(entity.getDataStornarii());//rs2.getString("data_stornarii"));

                        long l = Long.parseLong(s);
                        Common.setDataPrimaCfg(l);
                        int nr_zile = (int) ((System.currentTimeMillis() - l) / (1000 * 60 * 60 * 24)) + 1;
                        // System.err.println("nr_zile = "+nr_zile+"   30-nr_zile = "+(30-nr_zile));
                        if (nr_zile < 0) {
                            nr_zile = 1;
                            // schimbam data cu data de azi
                            String newDate = System.currentTimeMillis() + "";
                            String newDateEnc = Common.encode().encrypt(newDate);
//							String query = "UPDATE facturi_stornate SET data_stornarii = "
//									+ Common.prepareString(new_date_enc);
//							if (!Common.isClient()) {
//								DBAccess.uidRow(query, "_TEMP_", fkey);
//							} else {
//								DBAccess.uidRow(query);
//							}
                            entity.setDataStornarii(newDateEnc);
                            factDao.update(entity);
                        }
//						if (!Common.isFirmaTest()) {
//							long it = Common.getInstallationTime();
//							long now = System.currentTimeMillis();
//							long deltaDataInstalarii = (now - it) / (1000 * 60 * 60 * 24);
//							nr_zile = 60 - deltaDataInstalarii >= 30 ? nr_zile
//									: 31 - nr_zile < 60 - deltaDataInstalarii ? nr_zile
//											: 31 - 60 + (int) deltaDataInstalarii;
//						}
                        return nr_zile;
                    } else {
                        return -1;// fine
                    }
                } else {
                    return 1111; // not fine? > 45 ?
                }
            }
//			rs2.close();
        } catch (Exception e) {
            System.err.println("" + e.getCause());
            return 1000; // > 45
        }
        return 1000;
    }

    public static String getC(String cif/*, String v, String an, String osType, String dataExpirarii, String moduleNr, String maxClients*/) {
//		cif = cif.toLowerCase().replaceAll("ro", "").trim();
        cif = cif.toLowerCase().trim();
//		cif += cif + v + an + osType + dataExpirarii + moduleNr + maxClients;
        cif = encode().encrypt(cif);

        byte[] defaultBytes = cif.getBytes();
        try {
            MessageDigest algorithm = MessageDigest.getInstance("MD5");
            algorithm.reset();
            algorithm.update(defaultBytes);
            byte messageDigest[] = algorithm.digest();

            StringBuffer hexString = new StringBuffer();
            for (int i = 0; i < messageDigest.length; i++) {
                hexString.append(Integer.toHexString(0xFF & messageDigest[i]));
            }
            String foo = messageDigest.toString();

            cif = hexString + "";
            // System.err.println(cif.substring(0,10).toUpperCase());
            return cif.substring(0, 10).toUpperCase();
        } catch (NoSuchAlgorithmException nsae) {
        }
        return "";
    }

    public static Date getDataExDb(SBConnection sbConnection) {
        Date dataEx = null;
        try {
            JdbcConnectionSource connectionSource = sbConnection.getConnection();
            Dao<FacturiStornateEntity, Integer> factDao = DaoManager.createDao(connectionSource, FacturiStornateEntity.class);
            FacturiStornateEntity entity = factDao.queryForId(1);

            if (entity != null) {// exista ceva
                String valoare = entity.getValoare1();
                String dEx = null;
                if (!valoare.equals("")) {
                    valoare = Common.encode().decrypt(valoare);
                    String arr[] = valoare.split(",");
                    if (arr.length == 9) {
                        dEx = arr[5];
                        dataEx = Common.SQLITE_DATE_FORMAT.parse(dEx);
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return dataEx;
    }

    public static void comandaCod(Company company, SBConnection connection) {
        if (java.awt.Desktop.isDesktopSupported()) {
            java.awt.Desktop desktop = java.awt.Desktop.getDesktop();
            if (desktop.isSupported(java.awt.Desktop.Action.BROWSE)) {
                try {

                    if (Common.IS_INDIA) {
                        throw new Exception("India");
                    }

                    if (isTestCompany()) {
                        try {
                            java.net.URI uri = new java.net.URI(Common.URL_ORDER);
                            SBDesktop.browse(uri);
                        } catch (Exception ex1) {
                            ex1.printStackTrace();
                        }
                        return;
                    }

                    CompanyDetails companyDetails = CompanyDetails.getLast(connection.getConnection());

                    if (companyDetails != null) {
                        String data = "company_name" + "=" + URLEncoder.encode(companyDetails.getName(), "UTF-8");
                        data += "&" + "address" + "=" + URLEncoder.encode(companyDetails.getAddress(), "UTF-8");
                        data += "&" + "zip_code" + "=" + URLEncoder.encode(companyDetails.getZip(), "UTF-8");
                        data += "&" + "city" + "=" + URLEncoder.encode(companyDetails.getCity(), "UTF-8");
                        data += "&" + "ci" + "=" + nrZilePrimaCfg();
                        data += "&" + "pi" + "=" + nrZilePrimaInstalare();
                        data += "&" + "email" + "=" + URLEncoder.encode(companyDetails.getEmail(), "UTF-8");
                        data += "&" + "phone" + "=" + URLEncoder.encode(companyDetails.getTelephone(), "UTF-8");

                        java.net.URI uri = new java.net.URI(Common.URL_ORDER + "?" + data);
                        SBDesktop.browse(uri);
                    }

                } catch (Exception ex) {
                    try {
                        java.net.URI uri = new java.net.URI(Common.IS_INDIA ? Common.URL_ORDER_INDIA : Common.URL_ORDER);
                        SBDesktop.browse(uri);
                    } catch (Exception ex1) {
                        ex1.printStackTrace();
                    }

                    java.io.StringWriter sw = new java.io.StringWriter();
                    java.io.PrintWriter pw = new java.io.PrintWriter(sw);
                    ex.printStackTrace(pw);
                    System.err.println("Error " + sw.toString());
                }
            }
        }
    }

    public static long getNrDocEmise(SBConnection connection) throws SBDaoException, SQLException {
        return Invoice.getAllTimeDocumentsCount(connection.getConnection());
    }

    public static DesEncrypter getEncrypter() {
        if (encrypter == null) {
            encrypter = new DesEncrypter(SECRET_PASS_PHRASE);
        }
        return encrypter;
    }

    public static int getNumberOfDaysSinceLastSave() {

        Config c = Common.selectedCompanyConfig;
        String last_backup = c.get(Config.LAST_BACKUP);

        if (last_backup != null && !last_backup.isEmpty()) {
            long l = Long.parseLong(last_backup);
            return (int) ((System.currentTimeMillis() - l) / (1000 * 60 * 60 * 24)) + 1;
        }
        return -1;
    }

    public static int getNumberOfDaysSinceCreation() {
        try {
            Dao<FacturiStornateEntity, Integer> factDao = DaoManager.createDao(Common.connection.getConnection(), FacturiStornateEntity.class);
            FacturiStornateEntity entity = factDao.queryForId(1);
            String s = Common.encode().decrypt(entity.getValoare2());
            long l = Long.parseLong(s);
            return (int) ((System.currentTimeMillis() - l) / (1000 * 60 * 60 * 24)) + 1;
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return -1;
    }

    public static boolean pingUrl(final String address) {
        try {
            final URL url = new URL("http://" + address);
            final HttpURLConnection urlConn = (HttpURLConnection) url.openConnection();
            urlConn.setConnectTimeout(1000 * 10); // mTimeout is in seconds
            final long startTime = System.currentTimeMillis();
            urlConn.connect();
            final long endTime = System.currentTimeMillis();
            if (urlConn.getResponseCode() == HttpURLConnection.HTTP_OK) {
                System.out.println("Time (ms) : " + (endTime - startTime));
                System.out.println("Ping to " + address + " was success");
                return true;
            }
        } catch (final MalformedURLException e1) {
            e1.printStackTrace();
        } catch (final IOException e) {
            e.printStackTrace();
        }
        return false;
    }

    // convert InputStream to String
    public static String getStringFromInputStream(InputStream is) {

        BufferedReader br = null;
        StringBuilder sb = new StringBuilder();

        String line;
        try {

            br = new BufferedReader(new InputStreamReader(is));
            while ((line = br.readLine()) != null) {
                sb.append(line);
            }

        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (br != null) {
                try {
                    br.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }

        return sb.toString();

    }

    public static void setDataPrimaCfg(long value) {
        dataPrimaCfg = value;
    }

    public static long getPrimaCfg() {
        return dataPrimaCfg;
    }

    public static boolean keepStocks() {
        if (Common.IS_INDIA && Common.selectedCompanyConfig.get(Config.INDIA).equals("free")) {
            return false;
        }
        return !Common.selectedCompanyConfig.get(Config.KEEP_STOCKS).equals("false");
    }
    
    public static String getFiscYear(Date date, int year) {
        Calendar c = Calendar.getInstance();
        if(year >= c.get(Calendar.YEAR)) {
            return "";
        }
        
        // from 1 April to 31 March
        Calendar min = Calendar.getInstance();
        min.set(year, Calendar.APRIL, 1);
        
        Calendar max = Calendar.getInstance();
        max.set(year + 1, Calendar.MARCH, 31);
        
        if(date.after(min.getTime()) && date.before(max.getTime())) {
            return (year + "-" + (year + 1));
        }
        
        return getFiscYear(date, year + 1);
    }
    
    public static String[] getFiscYearArray(Date date, int year) {
        Calendar c = Calendar.getInstance();
        if (year >= c.get(Calendar.YEAR)) {
            return new String[]{"" + c.get(Calendar.YEAR), "" + (c.get(Calendar.YEAR) + 1)};
        }

        // from 1 April to 31 March
        Calendar min = Calendar.getInstance();
        min.set(year, Calendar.APRIL, 1);

        Calendar max = Calendar.getInstance();
        max.set(year + 1, Calendar.MARCH, 31);

        if (date.after(min.getTime()) && date.before(max.getTime())) {
            return new String[]{"" + year, "" + (year + 1)};
        }

        return getFiscYearArray(date, year + 1);
    }

//********************************************************** OLD ****************************************
    //********************************************************** OLD ****************************************
    //********************************************************** OLD ****************************************
    //********************************************************** OLD ****************************************
//    private static User loggedUser = null;
//    
    // Defaults for Main Help
//    public static MainFrame mainFrame = new MainFrame();
//    
//    
//    public static char platitor_tva = ' ';
//    public static String FACTURI_PATH = "./reports/facturi/";
//    public static String AVIZE_PATH = "./reports/avize/";
//    public static String PROFORME_PATH = "./reports/proforme/";
//    public static String CHITANTE_PATH = "./reports/chitante/";
//    public static String BON_TRANSFER_PATH = "./reports/bontransfer/";
//    public static String BON_CONSUM_PATH = "./reports/bonconsum/";
//    public static String NIR_PATH = "./reports/nir/";
//    public static Document dom = null;
//    public static LinkedHashMap<String, String> links = null;
//    public static int showTel = 0;
//    public static int oferta = 0;
//    public static int showButonNou = 0;
//    public static String[] allRegistryKey = null;
//    public static LinkedHashMap<String, String> promoOffers = null;
//    public static boolean updateCote = false;
//    public static boolean IS_SERVER = !"true".equals(new Config().get("client"));
//    
//    public static boolean IS_CD_KEY_VERSION = false;//"true".equals(new Config().get("cd_key_version"));
//    public static String CD_KEY = new Config().get("cd_key");
//    public static String CD_KEY = "1";
//    public final static String INSTALLATION_SOURCE = new Config().get("installation_source");
//    public static HashMap<Date, HashMap<String, String>> cursuri = new HashMap<Date, HashMap<String, String>>();
//    
//    private static int nrChestionarXML = 0;
//    private static int nrChestionarTrialXML = 0;
//    public static ArrayList dateContDefault;
//    private static long dataPrimaCfg;//data din configurare initiala
//    public static Client client = new Client();    //de la fetch minFinante
    //colors
//	public static Color gradientColor1 = new Color(255, 255, 255);
//	public static Color gradientColor2 = new Color(244, 244, 244);
//	public static Color gradientColor3 = new Color(193, 193, 193);
//	public static String leftSideBarInfoIcon = "./images/icons/ico_sidebar_info_24.png";
//	public static String leftSideBarInfoSugestii = "./images/icons/ico_sidebar_sugestii_24.png";
//	public static String leftSideBarInfoOferte = "./images/icons/ico_sidebar_oferta_24.png";
//    BILL-431 CLONE -Trebuie sa introducem facilitatea de a afisa cumulat in Reg casa bonurile fiscale emise (un fel de raport Z)
//    public static int RAPOT_Z_ID = -7;// pt. Vizualizare Registru de casa - Raport Operatiuni
//    public static String RAPORT_Z_TEXT = "RAPORT Z";
//        BILL-416 CLONE -fereastra de Operatiuni casa
//    public final static Color BACKGROUND_PLATI = new Color(251,237,238);  //rosu pt. Operatiuni casa
//    public final static Color FOREGROUND_INCASARI = new Color(18,136,2); //verde pt. Operatiuni casa
    // am lasat diferite variante sa alaegem care e mai potivita.       //
//    public final static Color FOREGROUND_RAPORT_Z = new Color(0,100,0);// verde pt. Vizualizare Registru de casa - Raport Operatiuni
//    public static ArrayList <Oferta> oferteClient = null;
//	public static int showUpgradeButton = 0;
//	public static final int O_FACTURA_O_CHIT_A4 = 1;
//	public static final int DOUA_FACTURI_DOUA_CHIT_A4 = 2;
//	public static final int O_FACTURA_A4 = 3;
//	public static final int DOUA_FACTURI_A4 = 4;
//	public static final int TREI_FACTURI_A4 = 5;
//	public static final int O_FACTURA_A5 = 6;
//	
//    public static final int TOTAL_VALUE_PRODUCT_COLECTAT = 1;
//    public static final int TOTAL_VALUE_TVA_COLECTAT     = 2;
//    public static final int TOTAL_VALUE_PRODUCT_INCASAT  = 3;
//    public static final int TOTAL_VALUE_TVA_INCASAT      = 4;  
//    public final static String STYLE_TVA_LA_INCASARE = "\n<style size='7' forecolor='#353535'>TVA la incasare</style>";
//    public final static String STYLE_TOTAL_VALUE_PRODUCT = "\n<style size='7' forecolor='#FFFFFF'>T</style>";//"\n<style size='7' forecolor='#FFFFFF'>TVA la incasare</style>");
//    public final static String STYLE_TOTAL_VALUE_TVA_COLECTAT = "\n<style size='7' forecolor='#5A5A5A'>TVA colectat</style>";
//    public final static String STYLE_TOTAL_VALUE_TVA_INCASAT = "\n<style size='7' forecolor='#5A5A5A'>TVA la incasare</style>";      
    //utils pentru aducere date client
//	public static final String UTILS_JAR_NAME = "utils-1.0.0.jar";
//	public static SBUtils sbUtils = null;
//	
//    public static void setDataPrimaCfg(long value){
//        dataPrimaCfg =  value;
//    }
//    public static long getPrimaCfg(){
//        return dataPrimaCfg;
//    }
//    public static int nrZilePrimaInstalare(){
//        try {
//            int nr_zile = (int) ((System.currentTimeMillis() - Common.getInstallationTime()) / (1000 * 60 * 60 * 24)) + 1;
//            return nr_zile;
//        } catch (Exception e) {
//            //e.printStackTrace();
//            System.err.println("err___PI_______");
//
//            return -1;
//        }
//    }
//    public static int nrZilePrimaCfg(){
//        try {
//            int nr_zile = (int) ((System.currentTimeMillis() - getPrimaCfg()) / (1000 * 60 * 60 * 24)) + 1;
//            return nr_zile;
//        } catch (Exception e) {
//            //e.printStackTrace();
//            System.err.println("err___CI________");
//            return -2;
//        }
//    }
//    public static boolean autoSavePDF() {
//        return "true".equals((new Config().get("auto_save_pdf")));
//    }
//    public static Map<String, String> getDateFirma(int conf_id) {
//        Map<String, String> params = null;
//        try {
//            params = (Map<String, String>) DBAccess.getRows("SELECT * FROM date_firma WHERE configuratie_id =? ", new Object[]{conf_id}, new ResultSetHandler() {
//
//                @Override
//                public Object handle(ResultSet rs) throws SQLException {
//                    Map<String, String> params = new HashMap<String, String>();
//                    if (!rs.next()) {
//                        return null;
//                    }
//                    params.put("denumire", rs.getString("denumire"));
//                    params.put("cif", rs.getString("cif"));
//                    params.put("reg_com", rs.getString("reg_com"));
//                    params.put("adresa", rs.getString("adresa"));
//                    params.put("oras", rs.getString("oras"));
//                    params.put("judet", rs.getString("judet"));
//                    params.put("platitor_tva", rs.getString("platitor_tva"));
//                    params.put("banca", rs.getString("banca"));
//                    params.put("iban", rs.getString("iban"));
//                    params.put("telefon", rs.getString("telefon"));
//                    params.put("fax", rs.getString("fax"));
//                    params.put("email", rs.getString("email"));
//                    params.put("website", rs.getString("website"));
//                    params.put("capital_social", rs.getString("capital_social"));
//                    params.put("background", rs.getString("background"));
//                    params.put("logo", rs.getString("logo"));
//					params.put("stamp", rs.getString("stamp"));
//					params.put("tva_la_incasare", rs.getString("tva_la_incasare"));
//                    return params;
//                }
//            });
//
//        } catch (Exception ex) {
//            ex.printStackTrace();
//        }
//        return params;
//    }
//    public static Date getFacturiActivityDate() {
//        // Get the components of the date
//        String today = Common.SQLITE_DATE_FORMAT.format(new Date());
//        Date ds = (Date) DBAccess.getRows("select data_emiterii from facturi where date(data_emiterii) = "
//                + "(select max(date(data_emiterii)) from facturi where anulata!='y' and date(data_emiterii)<=date(?))", new Object[]{today}, new ResultSetHandler() {
//
//            @Override
//            public Object handle(ResultSet rs) throws SQLException {
//                if (rs.next()) {
//                    try {
//                        return Common.SQLITE_DATE_FORMAT.parse(rs.getString(1));
//                    } catch (ParseException ex) {
//                        System.out.println("no date found " + ex.getMessage());
//                    }
//                }
//                return new Date();
//            }
//        });
//        return ds;
//    }
//    public static boolean toateIbanurilePtAceeasiMoneda() {
//        HashMap<String, String> mapMonede = new HashMap<String, String>();
//        String query = "SELECT moneda FROM ibans where folosit = 'y' AND deleted = 'n'";
//        ResultSet rs;
//        try {
//            rs = DBAccess.getRows(query);
//            while (rs.next()) {
//                mapMonede.put(rs.getString(1), "");
//            }
//        } catch (SQLException ex) {
//            ex.printStackTrace();
//        }
//        if (!mapMonede.isEmpty() && mapMonede.size() == 1) {
//            return true;
//        }
//
//        return false;
//    }
//    public static ImageIcon getIcon(String iconName) {
//        return new ImageIcon(IMAGES_FOLDER_PATH + "icons/" + iconName);
//    }
//
//
//
//    public static boolean isStornoPePozitii() {
//        //        return true;
//        return "pozitii".equals(new Config().get("tip_stornare"));
//    }
//
//    public static void postTip(final JComponent component) {
//        Action toolTipAction = component.getActionMap().get("postTip");
//        if (toolTipAction != null) {
//            ActionEvent postTip = new ActionEvent(component, ActionEvent.ACTION_PERFORMED, "");
//            toolTipAction.actionPerformed(postTip);
//        }
//    }
//
//    public static Map<String, String> queryToMap(String query) {
//        ResultSet rs = null;
//        Map<String, String> result = new HashMap<String, String>();
//        try {
//            rs = DBAccess.getRows(query);
//            if (!rs.next()) {
//                return null;
//            }
//            ResultSetMetaData rsmd = rs.getMetaData();
//            int numColumns = rsmd.getColumnCount();
//
//            // Get the column names; column indices start from 1
//            for (int i = 1; i <= numColumns; i++) {
//                if (rsmd.getColumnName(i).equals("background")
//                        || rsmd.getColumnName(i).equals("logo")
//                        || rsmd.getColumnName(i).equals("stamp")) {
//                    result.put(rsmd.getColumnName(i), rs.getString(i));
//                } else {
//                    result.put(rsmd.getColumnName(i), escapeAmp(rs.getString(i)));
//                }
//            }
//            rs.close();
//        } catch (SQLException e) {
//            e.printStackTrace();
//        }
//        return result;
//    }
//    public static String escapeString(String str) {
//        str = str == null ? "" : str;
//        str = str.trim();
//        str = str.replace("'", "''"); //quotes in sqlite (pascal-like)
//        return str;
//    }
//
//    public static String prepareString(String str) {
//        str = str == null ? "" : str;
//        str = str.trim();
//        str = str.replace("'", "''"); //quotes in sqlite (pascal-like)
//        str = "'" + str + "'";
//        return str;
//    }
//
//    public static String prepareLikeString(String str) {
//        str = "%" + str + "%";
//        return prepareString(str);
//    }
//    public static int getNoSerii(char c) {
//        String query = "SELECT COUNT(*) AS nr_serii FROM serii WHERE tip_serie = '" + c + "'";
//        int nr_serii = 0;
//        try {
//            ResultSet rs = DBAccess.getRows(query);
//            if (!rs.next()) {
//                return 0;
//            }
//            nr_serii = rs.getInt("nr_serii");
//            rs.close();
//        } catch (SQLException e) {
//            e.printStackTrace();
//        }
//
//        return nr_serii;
//    }
//
//    public static int getLayoutSerie(int serie_id) {
//        int layout_id = 0;
//        String query = "SELECT layout_id FROM serii WHERE serie_id = " + serie_id;
//        try {
//            ResultSet rs = DBAccess.getRows(query);
//            if (!rs.next()) {
//                return 0;
//            }
//            layout_id = rs.getInt("layout_id");
//            rs.close();
//        } catch (SQLException e) {
//            e.printStackTrace();
//        }
//        return layout_id;
//    }
    /**
     * ********** ;)Esteban: BILL - 69 ****************************************
     * ************ *
     */
//    public static int getLastLayout(String table, String numeId, int serie_id) {
//        int layout_id = 0;
//        if (!table.equals("")) {
//            String query = "SELECT layout_id FROM " + table + " order by rowid desc limit 1";
//            try {
//                ResultSet rs = DBAccess.getRows(query);
//                if (!rs.next()) {
//                    return getLayoutSerie(serie_id);// 0;
//                }
//                layout_id = rs.getInt("layout_id");
//                rs.close();
//            } catch (SQLException e) {
//                e.printStackTrace();
//            }
//        } else {
//            layout_id = getLayoutSerie(serie_id);
//        }
//
//        return layout_id;
//    }
//
//    public static Serie[] getSerii(char tip) {
//        Serie[] list = new Serie[getNoSerii(tip)];
//        String _denumire = "", _sablon = "", _serie = "";
//        int _increment, _nr_initial, _serie_id, _layout_id;
//        int i = 0;
//        String query = "SELECT serie_id,denumire,sablon,serie,nr_initial,increment,layout_id FROM serii WHERE tip_serie = '" + tip + "' ORDER BY serie_id ASC";
//        try {
//            ResultSet rs = DBAccess.getRows(query);
//            while (rs.next()) {
//                _serie_id = rs.getInt("serie_id");
//                _denumire = rs.getString("denumire");
//                _sablon = rs.getString("sablon");
//                _serie = rs.getString("serie");
//                _nr_initial = rs.getInt("nr_initial");
//                _increment = rs.getInt("increment");
//                _layout_id = rs.getInt("layout_id");
//                Serie s = new Serie(_serie_id, _denumire, _serie, _sablon, _nr_initial, _increment, tip, _layout_id);
//                list[i++] = s;
//            }
//            rs.close();
//        } catch (SQLException e) {
//            e.printStackTrace();
//
//        }
//
//        return list;
//    }
//
//    public static String formatNr(String str, int k) {
//        for (int i = 0; i < k; i++) {
//            str = "0" + str;
//        }
//        return str;
//    }
//
//    public static String getNrFactura(int id_serie) {
//        String sablon = "", nr_factura = "";
//        String query = "SELECT * FROM serii  WHERE serie_id=" + id_serie + " LIMIT 1";
//        try {
//            ResultSet rs = DBAccess.getRows(query);
//            if (!rs.next()) {
//                return "";
//            }
//            sablon = rs.getString("sablon");
//            nr_factura = rs.getString("increment");
//
//            rs.close();
//        } catch (SQLException e) {
//            e.printStackTrace();
//        }
//
//        Date date = new Date();
//
//        DateFormat formatter = new SimpleDateFormat("yyyy");
//        String s = formatter.format(date);
//        sablon = sablon.replace("aaaa", s);
//
//        formatter = new SimpleDateFormat("yy");
//        s = formatter.format(date);
//        sablon = sablon.replace("aa", s);
//
//        formatter = new SimpleDateFormat("MM");
//        s = formatter.format(date);
//        sablon = sablon.replace("ll", s);
//
//        formatter = new SimpleDateFormat("dd");
//        s = formatter.format(date);
//        sablon = sablon.replace("zz", s);
//
//        String n = "";
//
//        int i;
//
//        for (i = 0; i < sablon.length(); i++) {
//            n += "n";
//            if (sablon.indexOf(n) == -1)//nu mai gaseste string-ul => break, i = nr de n
//            {
//                break;
//            }
//        }
//        n = "";
//        if (i > 0) {
//            for (int j = 0; j < i; j++) {
//                n += "n";
//            }
//            nr_factura = formatNr(nr_factura, i - nr_factura.length());
//            sablon = sablon.replace(n, nr_factura);
//        }
//
//        return sablon;
//    }
//
//    public static String getNrFacturaNrInitial(int id_serie) {
//        String sablon = "", nr_factura = "";
//        String query = "SELECT * FROM serii  WHERE serie_id=" + id_serie + " LIMIT 1";
//        try {
//            ResultSet rs = DBAccess.getRows(query);
//            if (!rs.next()) {
//                return "";
//            }
//            sablon = rs.getString("sablon");
//            nr_factura = rs.getString("nr_initial");
//
//            rs.close();
//        } catch (SQLException e) {
//            e.printStackTrace();
//        }
//        return getNumarSerie(nr_factura, sablon);
//
//    }
//
//    public static String getNumarSerie(String nr_factura, String sablon) {
//
//        Date date = new Date();
//
//        DateFormat formatter = new SimpleDateFormat("yyyy");
//        String s = formatter.format(date);
//        sablon = sablon.replace("aaaa", s);
//
//        formatter = new SimpleDateFormat("yy");
//        s = formatter.format(date);
//        sablon = sablon.replace("aa", s);
//
//        formatter = new SimpleDateFormat("MM");
//        s = formatter.format(date);
//        sablon = sablon.replace("ll", s);
//
//        formatter = new SimpleDateFormat("dd");
//        s = formatter.format(date);
//        sablon = sablon.replace("zz", s);
//
//        String n = "";
//
//        int i;
//
//        for (i = 0; i < sablon.length(); i++) {
//            n += "n";
//            if (sablon.indexOf(n) == -1)//nu mai gaseste string-ul => break, i = nr de n
//            {
//                break;
//            }
//        }
//        n = "";
//
//        if (i > 0) {
//            for (int j = 0; j < i; j++) {
//                n += "n";
//            }
//            nr_factura = formatNr(nr_factura, i - nr_factura.length());
//            sablon = sablon.replace(n, nr_factura);
//        }
//        return sablon;
//    }
//
//    public static String getNrFactura(String sablon, int primul_numar) {
//
//        Date date = new Date();
//
//        DateFormat formatter = new SimpleDateFormat("yyyy");
//        String s = formatter.format(date);
//        sablon = sablon.replace("aaaa", s);
//
//        formatter = new SimpleDateFormat("yy");
//        s = formatter.format(date);
//        sablon = sablon.replace("aa", s);
//
//        formatter = new SimpleDateFormat("MM");
//        s = formatter.format(date);
//        sablon = sablon.replace("ll", s);
//
//        formatter = new SimpleDateFormat("dd");
//        s = formatter.format(date);
//        sablon = sablon.replace("zz", s);
//        String n = "";
//
//        int i;
//
//        for (i = 0; i < sablon.length(); i++) {
//            n += "n";
//            if (sablon.indexOf(n) == -1)//nu mai gaseste string-ul => break, i = nr de n
//            {
//                break;
//            }
//        }
//        n = "";
//        String nr_factura = primul_numar + "";
//        if (i > 0) {
//            for (int j = 0; j < i; j++) {
//                n += "n";
//            }
//            nr_factura = formatNr(nr_factura, i - nr_factura.length());
//            sablon = sablon.replace(n, nr_factura);
//        }
//        return sablon;
//    }
//
//    public static int getNoLimbi() {
//        String query = "SELECT COUNT(*) AS nr_limbi FROM limbi";
//        int nr_limbi = 0;
//        try {
//            ResultSet rs = DBAccess.getRows(query);
//            if (!rs.next()) {
//                return 0;
//            }
//            nr_limbi = rs.getInt("nr_limbi");
//            rs.close();
//        } catch (SQLException e) {
//            e.printStackTrace();
//        }
//        return nr_limbi;
//    }
//
//    public static Limba[] getLimbi() {
//        Limba[] limbi = new Limba[getNoLimbi()];
//        String den = "", cod = "";
//        String query = "SELECT denumire,cod_limba FROM limbi";
//        try {
//            ResultSet rs = DBAccess.getRows(query);
//            int i = 0;
//            while (rs.next()) {
//                den = rs.getString("denumire");
//                cod = rs.getString("cod_limba");
//                Limba l = new Limba(cod, den);
//                limbi[i++] = l;
//            }
//            rs.close();
//        } catch (SQLException e) {
//            e.printStackTrace();
//        }
//        return limbi;
//    }
//
//    public static int getNoMonede() {
//        String query = "SELECT COUNT(*) AS nr_monede FROM monede WHERE folosit = 'y'  AND simbol <> \'FIM\' AND simbol <> \'IEP\'";
//        int nr_monede = 0;
//        try {
//            ResultSet rs = DBAccess.getRows(query);
//            if (!rs.next()) {
//                return 0;
//            }
//            nr_monede = rs.getInt("nr_monede");
//            rs.close();
//        } catch (SQLException e) {
//            e.printStackTrace();
//        }
//        return nr_monede;
//    }
//
//    public static Moneda[] getMonede() {
//        Moneda[] monede = new Moneda[getNoMonede()];
//        String den = "", simbol = "";
//        String query = "SELECT denumire,simbol FROM monede WHERE folosit = 'y' AND simbol <> \'FIM\' AND simbol <> \'IEP\'";
//        try {
//            ResultSet rs = DBAccess.getRows(query);
//            int i = 0;
//            while (rs.next()) {
//                den = rs.getString("denumire");
//                simbol = rs.getString("simbol");
//                Moneda m = new Moneda(den, simbol);
//                monede[i++] = m;
//
//            }
//            rs.close();
//        } catch (SQLException e) {
//            e.printStackTrace();
//        }
//        return monede;
//    }
//
//    public static Moneda[] getAllMonede() {
//        String q = "SELECT COUNT(*) as nr_monede FROM monede WHERE simbol <> \'FIM\' AND simbol <> \'IEP\'";
//        int nr_monede = 0;
//        try {
//            ResultSet rs = DBAccess.getRows(q);
//            if (rs.next()) {
//                nr_monede = rs.getInt("nr_monede");
//            }
//            rs.close();
//        } catch (SQLException e) {
//            e.printStackTrace();
//        }
//        Moneda[] monede = new Moneda[nr_monede];
//        String den = "", simbol = "";
//        String query = "SELECT denumire,simbol FROM monede WHERE simbol <> \'FIM\' AND simbol <> \'IEP\'";
//        try {
//            ResultSet rs = DBAccess.getRows(query);
//            int i = 0;
//            while (rs.next()) {
//                den = rs.getString("denumire");
//                simbol = rs.getString("simbol");
//                Moneda m = new Moneda(den, simbol);
//                monede[i] = m;
//                i++;
//            }
//            rs.close();
//        } catch (SQLException e) {
//            e.printStackTrace();
//        }
//        return monede;
//    }
//
//    public static int getNrCoteTva() {
//        String query = "SELECT COUNT(*) AS nr_cote_tva FROM cote_tva where deleted='n'";
//        int nr_cote_tva = 0;
//        try {
//            ResultSet rs = DBAccess.getRows(query);
//            if (!rs.next()) {
//                return 0;
//            }
//            nr_cote_tva = rs.getInt("nr_cote_tva");
//            rs.close();
//        } catch (SQLException e) {
//            e.printStackTrace();
//        }
//        return nr_cote_tva;
//    }
//
//    public static String[] getDenumireProcentCotaTva(int id) {
//        String[] cota = new String[2];
//        String den = "", impl = "";
//        int procent, tva_id;
//        String query = "SELECT tva_id, denumire, procent, implicit"
//                + "            FROM cote_tva"
//                + "            WHERE tva_id = " + id + " AND deleted = 'n'";
//        //System.out.println(query);
//        try {
//            ResultSet rs = DBAccess.getRows(query);
//            int i = 0;
//            while (rs.next()) {
//                cota[1] = rs.getString("denumire");
//                cota[0] = rs.getString("procent");
//            }
//            rs.close();
//        } catch (SQLException e) {
//            e.printStackTrace();
//        }
//        return cota;
//    }
//
//    //Oli: am pus cota de 19% deleted = 'y' dar pe facturile emise cu ea trebuie sa apara totusi
//     public static String[] getDenumireProcentCotaTvaEvenIfDeleted(int id) {
//        String[] cota = new String[2];
//        String den = "", impl = "";
//        int procent, tva_id;
//        String query = "SELECT tva_id, denumire, procent, implicit"
//                + "            FROM cote_tva"
//                + "            WHERE tva_id = " + id;
//        //System.out.println(query);
//        try {
//            ResultSet rs = DBAccess.getRows(query);
//            int i = 0;
//            while (rs.next()) {
//                cota[1] = rs.getString("denumire");
//                cota[0] = rs.getString("procent");
//            }
//            rs.close();
//        } catch (SQLException e) {
//            e.printStackTrace();
//        }
//        return cota;
//    }
//
//    public static CotaTva[] getCoteTva() {
//        CotaTva[] cote = new CotaTva[getNrCoteTva()];
//        String den = "", impl = "";
//        int procent, tva_id;
//        String query = "SELECT tva_id,denumire,procent,implicit FROM cote_tva WHERE deleted = 'n'";
//        try {
//            ResultSet rs = DBAccess.getRows(query);
//            int i = 0;
//            while (rs.next()) {
//                tva_id = rs.getInt("tva_id");
//                den = rs.getString("denumire");
//                impl = rs.getString("implicit");
//                procent = rs.getInt("procent");
//                CotaTva c = new CotaTva(tva_id, den, procent, impl.charAt(0));
//                cote[i++] = c;
//            }
//            rs.close();
//        } catch (SQLException e) {
//            e.printStackTrace();
//        }
//        try {
//            Arrays.sort(cote, new Comparator<CotaTva>() {
//
//                @Override
//                public int compare(CotaTva o1, CotaTva o2) {
//                    if (o1 != null && o2 != null) {
//                        if (o1.getProcent() == 19) {
//                            return 1;
//                        }
//                        if (o2.getProcent() == 19) {
//                            return -1;
//                        }
//                        if (o1.getProcent() == 24) {
//                            return -1;
//                        }
//                        if (o2.getProcent() == 24) {
//                            return 1;
//                        }
//                    }
//                    return 0;
//                }
//            });
//        } catch (Exception e) {
//            e.printStackTrace();
//        }
//        return cote;
//    }
//
//    public static CotaTva getCotaTvaImplicita() {
//        CotaTva cota = null;
//        String den = "", impl = "";
//        int procent, tva_id;
//        String query = "SELECT tva_id,denumire,procent,implicit FROM cote_tva WHERE deleted = 'n' and implicit ='y'";
//        try {
//            ResultSet rs = DBAccess.getRows(query);
//            int i = 0;
//            if (rs.next()) {
//                tva_id = rs.getInt("tva_id");
//                den = rs.getString("denumire");
//                impl = rs.getString("implicit");
//                procent = rs.getInt("procent");
//                cota = new CotaTva(tva_id, den, procent, impl.charAt(0));
//            }
//            rs.close();
//        } catch (SQLException e) {
//            e.printStackTrace();
//        }
//        return cota;
//    }
//
//    public static String getCurs(String simb) {
//        String curs = "", curs_azi = "", curs_online = "";
//        BigDecimal adaos_curs = new BigDecimal("0.00"), curs_d;
//
//        Date today = new Date();
//        DateFormat d = new SimpleDateFormat("yyyy-MM-dd");
//        String azi = d.format(today);
//
//        Date yesterday = new Date(System.currentTimeMillis() - 1000 * 60 * 60 * 24);
//        String ieri = d.format(yesterday);
//        Config config = new Config();
//        curs_azi = config.get("curs_azi");
//        curs_online = config.get("curs_online");
//        adaos_curs = new BigDecimal(config.get("adaos_curs"));
//
//        int precizieCurs = 6;   // BNR se raporteaza la 100 unitati pt ca e mica valoarea => impartim la 100 si mai punem 2 zecimale => 6 zecimale pt siguranta
//        
//        if (curs_online.equals("true")) {//cursul trebuie sa fi fost luat in prealabil de pe net
//            if (curs_azi.equals("true")) {//luam cursul de azi
//                String query = "SELECT " + simb + " FROM istoric_curs WHERE strftime('%Y-%m-%d',data) = '" + azi + "' LIMIT 1";
//                //System.out.println("query = "+query);
//                try {
//                    ResultSet rs = DBAccess.getRows(query);
//                    if (rs.next()) {
//                        curs = rs.getString(simb + "");
//                        rs.close();
//                        //System.out.println("curs = "+curs);
//                        if ((simb.equals("HUF") || simb.equals("JPY")) && curs != null  && !curs.equals("")) {
//                            curs = BigDecimal.valueOf(Double.parseDouble(curs)).divide(BigDecimal.valueOf(100)).setScale(precizieCurs, RoundingMode.HALF_UP).toString();
//                        }
//                        if (curs == null || curs.equals("")) {
//                            return "";
//                        }
//                        curs = curs.replace(",", ".");
//                        if (!curs.equals("") && adaos_curs.compareTo(BigDecimal.ZERO) != 0) {
//                            curs_d = new BigDecimal(curs);
//                            curs_d = curs_d.add(curs_d.multiply(adaos_curs).divide(BigDecimal.valueOf(100), new MathContext(20, RoundingMode.HALF_UP)));
//                            curs_d = curs_d.setScale(4, RoundingMode.HALF_UP);
//                            curs = curs_d.toString();
//                        }
//                    }
//                    rs.close();
//                    return curs;
//                } catch (SQLException e) {
//                    e.printStackTrace();
//                }
//            } else if (curs_azi.equals("false")) {//luam cursul de ieri
//                String query = "SELECT " + simb + " FROM istoric_curs WHERE strftime('%Y-%m-%d',data) = '" + ieri + "' LIMIT 1";
//                //  System.out.println("query = "+query);
//                try {
//                    ResultSet rs = DBAccess.getRows(query);
//                    if (rs.next()) {
//                        curs = rs.getString(simb + "");
//                         if ((simb.equals("HUF") || simb.equals("JPY")) && curs != null  && !curs.equals("")) {
//                            curs = BigDecimal.valueOf(Double.parseDouble(curs)).divide(BigDecimal.valueOf(100)).setScale(precizieCurs, RoundingMode.HALF_UP).toString();
//                        }
//                        //System.out.println("curs = "+curs);
//                        curs = curs.replace(",", ".");
//                        if (!"".equals(curs) && adaos_curs.compareTo(BigDecimal.ZERO) != 0) {
//                            curs_d = new BigDecimal(curs);
//                            curs_d = curs_d.add(curs_d.multiply(adaos_curs).divide(BigDecimal.valueOf(100), new MathContext(20, RoundingMode.HALF_UP)));
//                            curs_d = curs_d.setScale(4, RoundingMode.HALF_UP);
//                            curs = curs_d.toString();
//                        }
//                    }
//                    rs.close();
//                    return curs;
//                } catch (SQLException e) {
//                    e.printStackTrace();
//                }
//            }
//
//        }
//        return "";
//    }
//
//    public static char refreshPlatitorTva() {
//        String query = "SELECT platitor_tva FROM date_firma ORDER BY configuratie_id DESC LIMIT 1";
//        try {
//            ResultSet rs = DBAccess.getRows(query);
//            if (rs.next()) {
//                platitor_tva = rs.getString("platitor_tva").charAt(0);
//                return platitor_tva;
//            }
//            rs.close();
//        } catch (SQLException e) {
//            e.printStackTrace();
//        }
//        return platitor_tva = 'n';
//    }
//
//    public static char isPlatitorTva() {
//        if (platitor_tva == ' ') {
//            refreshPlatitorTva();
//        }
//        return platitor_tva;
//    }
//
//    public static char isPlatitorTva(int facturaId, String table) {
//        String platitor_tva = "n";
//        String query = "SELECT platitor_tva FROM date_firma d left join " + table + " f on d.configuratie_id=f.configuratie_id  where f.rowid=?";
//        try {
//            platitor_tva = (String) DBAccess.getRows(query, new Object[]{facturaId}, new ResultSetHandler() {
//
//                public Object handle(ResultSet rs) throws SQLException {
//                    if (rs.next()) {
//                        return rs.getString("platitor_tva");
//                    }
//                    return "n";
//                }
//            });
//            return platitor_tva.charAt(0);
//        } catch (Exception e) {
//            e.printStackTrace();
//        }
//        return 'n';
//    }
//
//    public static boolean platitorTva() {
//        if (isPlatitorTva() == 'y') {
//            return true;
//        } else {
//            return false;
//        }
//    }
//
//    public static boolean isDataOraExpediere() {
//        try {
//            ResultSet rs = DBAccess.getRows("select f_data_ora from flags order by flag_id desc limit 1");
//            String r = "";
//            if (rs.next()) {
//                r = rs.getString(1);
//            }
//            rs.close();
//            if ("y".equals(r)) {
//                return true;
//            }
//        } catch (SQLException ex) {
//            ex.printStackTrace();
//        }
//        return false;
//    }
//
//    public static int getLastConfiguratieId() {
//        String query = "SELECT configuratie_id FROM date_firma ORDER BY configuratie_id DESC LIMIT 1";
//        int configuratie_id = 0;
//        try {
//            ResultSet rs = DBAccess.getRows(query);
//            if (rs.next()) {
//                configuratie_id = rs.getInt("configuratie_id");
//            }
//            rs.close();
//            return configuratie_id;
//        } catch (SQLException e) {
//            e.printStackTrace();
//        }
//        return -1;
//    }
//
//    public static int getLastFlagId() {
//        String query = "SELECT flag_id FROM flags ORDER BY flag_id DESC LIMIT 1";
//        int flag_id = 0;
//        try {
//            ResultSet rs = DBAccess.getRows(query);
//            if (rs.next()) {
//                flag_id = rs.getInt("flag_id");
//            }
//            rs.close();
//            return flag_id;
//        } catch (SQLException e) {
//            e.printStackTrace();
//        }
//        return -1;
//    }
//
////    public static boolean askInsertArticole() {
////        return new Config().get(Config.ASK_WHEN_NEW_ADDED_ART).equals("true") ? true : false;
////    }
//
//    public static char existaArticolCod(String denumire, String cod) {
//        String query = "SELECT articol_id FROM articole WHERE denumire like ?" + "AND cod like ?" + " AND deleted = 'n' LIMIT 1";
//        //System.out.println("query = "+query);
//        Character c = (Character) DBAccess.getRows(query, new Object[]{denumire, cod}, new ResultSetHandler() {
//
//            @Override
//            public Object handle(ResultSet rs) throws SQLException {
//                if (rs.next()) {
//                    return 'y'; //articolul exista in bd
//                }
//                return 'n';
//            }
//        });
//        return c;
//    }
//
//    public static int[] getIbans() {
//        int ibans[] = new int[4];
//        for (int i = 0; i < 4; i++) {
//            ibans[i] = 0;
//        }
//        int ct = 0;
//        String query = "SELECT iban_id FROM ibans WHERE folosit = 'y' AND deleted = 'n' LIMIT 4";
//        try {
//            ResultSet rs = DBAccess.getRows(query);
//            while (rs.next()) {
//                ibans[ct++] = rs.getInt("iban_id");
//            }
//            rs.close();
//        } catch (SQLException e) {
//            e.printStackTrace();
//        }
//        return ibans;
//    }
//
//    public static int[] getIbansByMoneda(String moneda) {
//        int ibans[] = new int[4];
//        for (int i = 0; i < 4; i++) {
//            ibans[i] = 0;
//        }
//        ArrayList tempIbans = new ArrayList();
//        String query = "SELECT iban_id FROM ibans WHERE folosit = 'y' AND deleted = 'n' AND moneda = ? LIMIT 4";
//        try {
//            ResultSet rs = DBAccess.getRows(query, new Object[]{moneda});
//            while (rs.next()) {
//                tempIbans.add(rs.getInt("iban_id"));
//            }
//            rs.close();
//        } catch (SQLException e) {
//            e.printStackTrace();
//        }
//        int dimensiune = tempIbans.size();
//        String q = "SELECT iban_id FROM ibans WHERE folosit = 'y' AND deleted = 'n' AND (moneda != ? or moneda is null) LIMIT 4";
//        try {
//            ResultSet resultSet = DBAccess.getRows(q, new Object[]{moneda});
//            while (resultSet.next() && dimensiune < 4) {
//                tempIbans.add(resultSet.getInt("iban_id"));
//                dimensiune++;
//            }
//            resultSet.close();
//        } catch (SQLException e) {
//            e.printStackTrace();
//        }
//        for (int k = 0; k < tempIbans.size(); k++) {
//            ibans[k] = Integer.parseInt(tempIbans.get(k) + "");
//        }
//        return ibans;
//    }
//
//    public static void packTable(JTable table, int margin) {
//        TableModel model = table.getModel();
//        DefaultTableColumnModel colModel = (DefaultTableColumnModel) table.getColumnModel();
//        int maxColWidth = table.getPreferredSize().width / table.getColumnCount() * 2;
//        int minColWidth;
//        for (int vColIndex = 0; vColIndex < colModel.getColumnCount(); vColIndex++) {
//            TableColumn col = colModel.getColumn(vColIndex);
//            int width = 0;
//
//            // Get width of column header
//            TableCellRenderer renderer = col.getHeaderRenderer();
//            if (renderer == null) {
//                renderer = table.getTableHeader().getDefaultRenderer();
//            }
//            Component comp = renderer.getTableCellRendererComponent(table, col.getHeaderValue(), false, false, 0, 0);
//            width = comp.getPreferredSize().width;
//            minColWidth = width;
//
//            // Get maximum width of column data
//            for (int r = 0; r < table.getRowCount(); r++) {
//                renderer = table.getCellRenderer(r, vColIndex);
//                comp = renderer.getTableCellRendererComponent(table, table.getValueAt(r, vColIndex), false, false, r, vColIndex);
//                width = Math.max(width, comp.getPreferredSize().width);
//            }
//
//            // Add margin
//            width += 2 * margin;
//
//            if (table.getAutoResizeMode() == JTable.AUTO_RESIZE_OFF) {
//                width = width < minColWidth ? minColWidth : width;
//            }
//            // Set the width
//            width = width > maxColWidth ? maxColWidth : width;
//            width = width < minColWidth ? minColWidth : width;
//            String headerName = "";
//            try {
//                headerName = table.getTableHeader().getColumnModel().getColumn(0).getHeaderValue().toString();
//            } catch (Exception e) {
//                e.printStackTrace();
//            }
//            if (headerName == null) {
//                headerName = "";
//            }
//            if (vColIndex == 0 && headerName.equals("Nr. crt.")) {
//                width = 30;
//            }
//            if (vColIndex == 1) {
//                width = width * 12 / 10;
//            }
//            if (vColIndex == table.getColumnCount() - 1 && headerName.trim().equals("")) {
//                width = 30;
//            }
//            col.setPreferredWidth(width);
//        }
//    }
//
//
//
//    public static User getLoggedUser() {
//        if (loggedUser == null && !Common.isClient()) {
//            loggedUser = User.getUser(1); //user_id = 1 is admin
//        }
//        return loggedUser;
//    }
//
//    public static void setLoggedUser(User user) {
//        loggedUser = user;
//    }
//
//
//
//   
//    public static String getCif(ZipFile zip) {
//        String cif = "";
//        try {
//            Common.DB_FIRMA_TEMP_FILE_PATH = System.getProperty("java.io.tmpdir");
//            Enumeration all = zip.entries();
//            String dbPath = null;
//            while (all.hasMoreElements()) {
//                ZipEntry ze = (ZipEntry) all.nextElement();
//                if (ze.toString().indexOf("sleekbill.db") >= 0) {
//                    Ziper.unZipFile((ZipEntry) ze, zip, Common.DB_FIRMA_TEMP_FILE_PATH);
//                    dbPath = ze.toString();
//                    break;
//                } else {
//                    continue;
//                }
//            }
//            if (dbPath == null) {
//                return "";
//            }
//            Common.DB_FIRMA_TEMP_FILE_PATH = Common.DB_FIRMA_TEMP_FILE_PATH + "/" + dbPath;
//            try {
//                ResultSet rs = DBAccess.getRows("select cif from date_firma order by configuratie_id desc limit 1", "_TEMP_", FIRMA_TEMP_KEY);
//                if (rs.next()) {
//                    cif = rs.getString("cif");
//                }
//            } catch (SQLException ex) {
//                ex.printStackTrace();
//            }
//            try {
//                DBConnection.getConnection("_TEMP_", FIRMA_TEMP_KEY).close();
//            } catch (SQLException ex) {
//                ex.printStackTrace();
//            }
//            new File(Common.DB_FIRMA_TEMP_FILE_PATH).delete();
//
//        } catch (IOException ex) {
//            ex.printStackTrace();
//        }
//        return cif;
//    }
//
//    public static int getVersiune(ZipFile zip) {
//        String vers = "";
//        int v = -1;
//        try {
//            Common.DB_FIRMA_TEMP_FILE_PATH = System.getProperty("java.io.tmpdir");
//            Enumeration all = zip.entries();
//            String dbPath = null;
//            while (all.hasMoreElements()) {
//                ZipEntry ze = (ZipEntry) all.nextElement();
//                if (ze.toString().indexOf("sleekbill.db") >= 0) {
//                    Ziper.unZipFile((ZipEntry) ze, zip, Common.DB_FIRMA_TEMP_FILE_PATH);
//                    dbPath = ze.toString();
//                    break;
//                } else {
//                    continue;
//                }
//            }
//            if (dbPath == null) {
//                return -1;
//            }
//            Common.DB_FIRMA_TEMP_FILE_PATH = Common.DB_FIRMA_TEMP_FILE_PATH + "/" + dbPath;
//            try {
//                ResultSet rs = DBAccess.getRows("select versiune from versiune limit 1", "_TEMP_", FIRMA_TEMP_KEY);
//                if (rs.next()) {
//                    vers = rs.getString("versiune");
//                    v = Integer.parseInt(vers.substring(0, vers.indexOf(".")));
//                } else {
//                    return -1;
//                }
//            } catch (Exception ex) {
//                ex.printStackTrace();
//            }
//            try {
//                DBConnection.getConnection("_TEMP_", FIRMA_TEMP_KEY).close();
//            } catch (SQLException ex) {
//                ex.printStackTrace();
//            }
//            new File(Common.DB_FIRMA_TEMP_FILE_PATH).delete();
//
//        } catch (IOException ex) {
//            ex.printStackTrace();
//        }
//        return v;
//    }
//
//    public static int getLastRowId(ZipFile zip) {
//        int lastId = 0;
//        try {
//            Common.DB_FIRMA_TEMP_FILE_PATH = System.getProperty("java.io.tmpdir");
//            Enumeration all = zip.entries();
//            String dbPath = null;
//            while (all.hasMoreElements()) {
//                ZipEntry ze = (ZipEntry) all.nextElement();
//                if (ze.toString().indexOf("sleekbill.db") >= 0) {
//                    Ziper.unZipFile((ZipEntry) ze, zip, Common.DB_FIRMA_TEMP_FILE_PATH);
//                    dbPath = ze.toString();
//                    break;
//                } else {
//                    continue;
//                }
//            }
//            if (dbPath == null) {
//                return 0;
//            }
//            Common.DB_FIRMA_TEMP_FILE_PATH = Common.DB_FIRMA_TEMP_FILE_PATH + "/" + dbPath;
//            try {
//                ResultSet rs = DBAccess.getRows("select rowid from facturi order by rowid desc limit 1", "_TEMP_", FIRMA_TEMP_KEY);
//                if (rs.next()) {
//                    lastId = rs.getInt(1);
//                }
//            } catch (SQLException ex) {
//                ex.printStackTrace();
//            }
//            try {
//                DBConnection.getConnection("_TEMP_", FIRMA_TEMP_KEY).close();
//            } catch (SQLException ex) {
//                ex.printStackTrace();
//            }
//            new File(Common.DB_FIRMA_TEMP_FILE_PATH).delete();
//
//        } catch (IOException ex) {
//            ex.printStackTrace();
//        }
//        return lastId;
//    }
//
//    public static Date getLastDataEmiterii(ZipFile zip) {
//        Date dataEmiterii = null;
//        try {
//            Common.DB_FIRMA_TEMP_FILE_PATH = System.getProperty("java.io.tmpdir");
//            Enumeration all = zip.entries();
//            String dbPath = null;
//            while (all.hasMoreElements()) {
//                ZipEntry ze = (ZipEntry) all.nextElement();
//                if (ze.toString().indexOf("dbfile/sleekbill.db") >= 0) {
//                    Ziper.unZipFile((ZipEntry) ze, zip, Common.DB_FIRMA_TEMP_FILE_PATH);
//                    dbPath = ze.toString();
//                    break;
//                } else {
//                    continue;
//                }
//            }
//            if (dbPath == null) {
//                return null;
//            }
//            Common.DB_FIRMA_TEMP_FILE_PATH = Common.DB_FIRMA_TEMP_FILE_PATH + "/" + dbPath;
//            try {
//                ResultSet rs = DBAccess.getRows("select data_emiterii from facturi order by date(data_emiterii) desc limit 1", "_TEMP_", FIRMA_TEMP_KEY);
//                if (rs.next()) {
//                    dataEmiterii = Common.SQLITE_DATE_FORMAT.parse(rs.getString(1));
//                }
//            } catch (Exception ex) {
//                ex.printStackTrace();
//            }
//            try {
//                DBConnection.getConnection("_TEMP_", FIRMA_TEMP_KEY).close();
//            } catch (SQLException ex) {
//                ex.printStackTrace();
//            }
//            new File(Common.DB_FIRMA_TEMP_FILE_PATH).delete();
//
//        } catch (IOException ex) {
//            ex.printStackTrace();
//        }
//        return dataEmiterii;
//    }
//
//    public static String getCif() {
//        ResultSet rs = null;
//        String cif = null;
//        try {
//            rs = DBAccess.getRows("select cif from date_firma order by configuratie_id desc limit 1");
//            if (rs.next()) {
//                cif = rs.getString("cif");
//            }
//            rs.close();
//        } catch (SQLException ex) {
//            ex.printStackTrace();
//        }
//        return cif;
//    }
//
//    public static String getCif(String user, String firma) {
//        ResultSet rs = null;
//        String cif = null;
//        try {
//            rs = DBAccess.getRows("select cif from date_firma order by configuratie_id desc limit 1", user, firma);
//            if (rs.next()) {
//                cif = rs.getString("cif");
//            }
//            rs.close();
//        } catch (SQLException ex) {
//            ex.printStackTrace();
//        }
//        return cif;
//    }
//    
//    public static String getDenumireFirma() {
//        String denumire = "";
//        ResultSet rs = null;
//        try {
//            rs = DBAccess.getRows("select denumire from date_firma order by configuratie_id desc limit 1");
//            if (rs.next()) {
//                denumire = rs.getString("denumire");
//            }
//            rs.close();
//        } catch (SQLException ex) {
//            ex.printStackTrace();
//        }
//        return denumire;
//    }
//
//    public static void seteazaCursuriValutare() throws Exception {
//
//        if (Common.isClient()) {
//            return; //se seteaza pe server
//        }
//        boolean isCursAzi = false;
//        try {
//            String res = "";
//            Config config = new Config();
//            res = config.get("curs_online");
//            isCursAzi = "true".equals(config.get("curs_azi"));
//
//            if (!res.equals("true")) {
//                throw new Exception("Nu se folosesc cursurile preluate online."); //not using online rates
//            }
//        } catch (SQLException ex) {
//            ex.printStackTrace();
//            return;
//        }
//        for (Date date : cursuri.keySet()) {
//            String dateString = Common.SQLITE_DATE_FORMAT.format(date);
//            try {
//                DBAccess.uidRow("delete from istoric_curs where data=?", new Object[]{dateString});
//            } catch (SQLException ex) {
//                ex.printStackTrace();
//            }
//            String columns = "";
//            String values = "";
//            DatabaseMetaData dbmd = null;
//            try {
//            	dbmd = DBConnection.getConnection("_TEMPCURS_", DBAccess.getFirmakey()).getMetaData();
//            } catch (SQLException ex) {
//                ex.printStackTrace();
//                throw new RuntimeException(ex);
//            }
//            for (String c : cursuri.get(date).keySet()) {
//                    columns += "," + c;
//                    values += "," + cursuri.get(date).get(c);
//            }
//            DBConnection.getConnection("_TEMPCURS_", DBAccess.getFirmakey()).close();
//            
//
////             DBConnection.releaseLock(getCurrentFirma());
//            if (DBAccess.getFirmakey() != null) {
//                DBAccess.beginTransaction("_TEMPCURS_", DBAccess.getFirmakey());
//                String query = "insert into istoric_curs(data" + columns + ") values(" + "'" + dateString + "'" + values + ")";
//                try {
//                    DBAccess.uidRow(query, null, "_TEMPCURS_", DBAccess.getFirmakey());
//                    DBAccess.commitTr("_TEMPCURS_", DBAccess.getFirmakey());
//
//                    GregorianCalendar gc = new GregorianCalendar();
//                    Date today = new Date();
//                    DateFormat d = new SimpleDateFormat("yyyy-MM-dd");
//                    String azi = d.format(today);
//                    if (!new Config().get("data_ultim_curs").equals(azi)) {
//                        if (gc.get(GregorianCalendar.HOUR_OF_DAY) >= 13 && (gc.get(GregorianCalendar.HOUR_OF_DAY) == 13 ? (gc.get(GregorianCalendar.MINUTE) >= 20) : true)) {
//                            new Config().set("data_ultim_curs", azi);
//                        }
//                    }
//                } catch (SQLException ex) {
//                    ex.printStackTrace();
//                    DBAccess.rollbackTr("_TEMPCURS_", DBAccess.getFirmakey());
//                }
//            }
//        }
//    }
//
//
//
//    public static JSONObject checkOnlineCif(int nrZile) {
//        try {
//            URL url = new URL(URL_CHECK_CIF);
//            URLConnection conn = url.openConnection();
//            conn.setReadTimeout(URLCONNECTION_TIMEOUT);
//            String data = URLEncoder.encode("versiune", "UTF-8") + "=" + URLEncoder.encode(VERSION, "UTF-8")+"&"+
//                URLEncoder.encode("cif", "UTF-8") + "=" + URLEncoder.encode(getCif(), "UTF-8")+"&"+
////                URLEncoder.encode("nrzile", "UTF-8") + "=" + URLEncoder.encode(nrZile+"", "UTF-8")+"&"+
//                URLEncoder.encode("data", "UTF-8") + "=" + URLEncoder.encode(Common.ROMANIAN_DATE_FORMAT.format(getConfigDate()), "UTF-8");
//
//            conn.setDoInput(true);
//            conn.setDoOutput(true);
//           
//            OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
//            wr.write(data);
//            wr.flush();
//            wr.close();
//
//            BufferedReader rdx = new BufferedReader(new InputStreamReader(conn.getInputStream()));
//            String ax = rdx.readLine();
//            JSONObject response = new JSONObject(ax);
//            return response;
//        }catch(Exception e){
//            e.printStackTrace();
//            return null;
//        }
//    }
//	
//	public static void checkUpdateClientXML() throws Exception {
//        try {
//            URL url = new URL(URL_CHECK_FOR_UPDATES_SCRIPT_CLIENT);
//            URLConnection conn = url.openConnection();
//            conn.setReadTimeout(URLCONNECTION_TIMEOUT);
//            String data = URLEncoder.encode("versiune", "UTF-8") + "=" + URLEncoder.encode(Common.getVersiune(), "UTF-8")
//					+ "&" + URLEncoder.encode("an", "UTF-8") + "=" + URLEncoder.encode(String.valueOf(Common.getAn()), "UTF-8")
//                    + "&" + URLEncoder.encode("nr_versiune", "UTF-8") + "=" + URLEncoder.encode(Common.getNrVersiune(), "UTF-8")
//                    + (Common.getVersiuneMinor() != null ? "." + URLEncoder.encode(Common.getVersiuneMinor(), "UTF-8") : "")
//                    + "&" + URLEncoder.encode("client", "UTF-8") + "=" + URLEncoder.encode(Common.isClient() ? "true" : "false", "UTF-8")
//                    + "&" + URLEncoder.encode("r", "UTF-8") + "=" + URLEncoder.encode(INSTALLATION_SOURCE, "UTF-8");
//
//			data += "&osType=" + URLEncoder.encode(Common.getLocalOsType(), "UTF-8");
////			data += "&osType=";
//
//            if (new Config().get("test_update").equals("true")) {
//                data = data + "&test=true";
//            }
//
//            conn.setDoOutput(true);
//
//            OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
//            wr.write(data);
//            wr.flush();
//            wr.close();
//
//            dom = parseXmlFile(conn.getInputStream(), false);
//            if (dom == null) {
//                return;
//            }
//			String ustr = dom.getElementsByTagName("INSTALLER").item(0).getTextContent();
//            Common.updateCheckResponse = CHECK_FOR_UPDATES_RESPONSE.equalsIgnoreCase(ustr) ? "" : ustr;
//			ustr = dom.getElementsByTagName("PATCH").item(0).getTextContent();
//            Common.patchCheckResponse = CHECK_FOR_UPDATES_RESPONSE.equalsIgnoreCase(ustr) ? "" : ustr;
//
//
//		} catch (MalformedURLException ex) {
//            ex.printStackTrace();
//            throw new Exception("Nu a reusit verificarea de noi versiuni.");
//        } catch (IOException ex) {
//            ex.printStackTrace();
//            throw new Exception("Verificare de versiuni noi nereusita.Verificati conexiunea la internet.");
//        } catch (Exception e) {
//            e.printStackTrace();
//        }
//	}
//
//    public static void getOnlinePollXML() throws SQLException, IOException, NullPointerException {      
//        int nrChestionarDB = 0;
//        int chestionarOnline = 0;
//        URL url = null;
//        if ((Common.vKCheck() < 0 && !Common.isFirmaTest()) || (Common.vKCheck2011(DBAccess.getFirmakey(), Common.getCif()) == -1)) {          //(daca e firma activata si nu e de test) sau (daca e activata in 2011)
//            url = new URL(URL_QUESTIONS_POLL);
//            chestionarOnline = nrChestionarXML;
//        } else {
//            url = new URL(URL_QUESTIONS_TRIAL_POLL);
//            chestionarOnline = nrChestionarTrialXML;
//        }
//
//        ResultSet rs = DBAccess.getRows("SELECT MAX(numar) as numar from chestionare");
//        if (rs.next()) {
//            nrChestionarDB = rs.getInt("numar");
//        }
//        rs.close();
//        if (nrChestionarDB < chestionarOnline) {
//            URLConnection conn = url.openConnection();
//            conn.setReadTimeout(URLCONNECTION_TIMEOUT);
//            String cif = ((Common.getCif()==null || Common.getCif().equals(""))? "" : Common.getCif());
//            String versiune = ((Common.getVersiune()==null || Common.getVersiune().equals(""))? "" : Common.getVersiune());
//            String data = URLEncoder.encode("cif", "UTF-8") + "=" + URLEncoder.encode(cif, "UTF-8")
//                + "&" + URLEncoder.encode("versiune", "UTF-8") + "=" + URLEncoder.encode(versiune, "UTF-8");
//            // Send data
//            conn.setDoOutput(true);
//            OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
//            wr.write(data);
//            wr.flush();
//            wr.close();
//
//            dom = parseXmlFile(conn.getInputStream(), false);
//
//            if (dom == null) {
//                return;
//            }
//
//			connectedOnline = true;
//            String query = "";
//
//            int idChestionar = 0;
////            String raspunsStandard = "da%nu%nu stiu%poate%alta data";
//            NodeList nodeList = dom.getElementsByTagName("QUESTION");
//
//            //setez numarul chestionarului.
//            query = "INSERT INTO chestionare (numar) VALUES (?)";
//            DBAccess.uidRow(query, new Object[]{chestionarOnline});
//
//            if (nodeList.getLength() > 0) {
//
//                //aflu id_chestionar pentru a putea face legaturile intre chestionar si intrebari
//                rs = DBAccess.getRows("SELECT MAX(id_chestionar) AS id_chestionar FROM chestionare ");
//                if (rs.next()) {
//                    idChestionar = rs.getInt("id_chestionar");
//                }
//                rs.close();
//
//                //pun intrebarile in DB
//                int idIntrebare = 0;
//                String textIntrebare = "";
//                int countIds = 0;
//                for (int i = 0; i < nodeList.getLength(); i++) {
//                    Node nNode = nodeList.item(i);
//                    if (nNode.getNodeType() == Node.ELEMENT_NODE) {
//                        Element eElement = (Element) nNode;
//                        idIntrebare = Integer.parseInt(getTagValue("ID", eElement));
//                        textIntrebare = getTagValue("TEXT", eElement);
//                        countIds = (Integer) DBAccess.getRows("SELECT COUNT(id_intrebare) FROM intrebari WHERE id_intrebare = ?",  new Object[]{idIntrebare}, new OneIntegerResultSetHandler());
//                 
//                        if (countIds > 0) {
//                            query = "UPDATE intrebari SET text_intrebare = ? WHERE id_intrebare = ?";
//                        } else {
//                            query = "INSERT INTO intrebari (text_intrebare, id_intrebare) VALUES (?, ?)";
//                        }
//                        DBAccess.uidRow(query, new Object[]{textIntrebare, idIntrebare});
//
//                        //setez legaturile intre chestionar si intrebari
//                        query = "INSERT INTO leg_chest_intreb (id_chestionar, id_intrebare) VALUES (?, ?)";
//                        DBAccess.uidRow(query, new Object[]{idChestionar, idIntrebare});
//                    }
//                }
//            }
//        }
//    }
//
//	public static void getPromosTestDbXML(String cif) throws Exception {
//		try {
//			//do get
//			URL url = new URL(URL_PROMOS_TEST_DB);
//			URLConnection conn = url.openConnection();
//
//			dom = parseXmlFile(conn.getInputStream(), false);
//
//			if (dom == null) {
//				return;
//			}
//
//			connectedOnline = true;
//			Node rootNode = null;
//			oferteClient = new ArrayList<Oferta>();
//			NodeList nodeList = dom.getElementsByTagName("PROMOS");
//			for (int i = 0; i < nodeList.getLength(); i++) {
//				if (nodeList.item(i).getNodeType() == Node.ELEMENT_NODE) {
//					rootNode = nodeList.item(i);
//					for (int j = 0; j < rootNode.getChildNodes().getLength(); j++) {
//						if (rootNode.getChildNodes().item(j).getNodeType() == Node.ELEMENT_NODE) {
//							Node n = rootNode.getChildNodes().item(j);
//							if (n.getNodeName().equalsIgnoreCase("PROMO")) {
//								NodeList firmaNodes = n.getChildNodes();
//
//								String imageURL = "";
//								String imageLocalName = null;
//								String imageLink = "";
//								String imageTagName = "";
//								boolean sendClientData = false;
//								for (int ti = 0; ti < firmaNodes.getLength(); ti++) {
//									Node tn = firmaNodes.item(ti);
//									if (tn.getNodeName().equalsIgnoreCase("IMG")) {
//										imageURL = tn.getTextContent();
//
//										URL imgUrl = new URL(imageURL);
//										String imgPath = imgUrl.getPath();
//										imageLocalName = imgPath.substring(imgPath.lastIndexOf("/") + 1);
//										ImageIcon imgIcon = new ImageIcon(DOWNLOADED_IMAGES_FOLDER_PATH + imageLocalName);
//										if (imgIcon.getIconHeight() < 1) {
//											Common.saveUrl(imageURL, DOWNLOADED_IMAGES_FOLDER_PATH + imageLocalName);
//										}
//									} else if (tn.getNodeName().equalsIgnoreCase("TARGET")) {
//										imageLink = tn.getTextContent();
//									} else if (tn.getNodeName().equalsIgnoreCase("NAME")) {
//										imageTagName = tn.getTextContent();
//									} else if (tn.getNodeName().equalsIgnoreCase("SEND_DATA")) {
//										sendClientData = Boolean.parseBoolean(tn.getTextContent());
//									}
//								}
//                                        oferteClient.add(new Oferta(cif, DOWNLOADED_IMAGES_FOLDER_PATH + imageLocalName,
//                                            imageLocalName, imageLink, imageTagName, sendClientData));
//                                    }
//                                }
//							}
//						}
//					}
//
//		} catch (MalformedURLException ex) {
//			ex.printStackTrace();
//			throw new Exception("Nu a reusit verificarea de noi versiuni.");
//		} catch (IOException ex) {
//			ex.printStackTrace();
//			throw new Exception("Verificare de versiuni noi nereusita.Verificati conexiunea la internet.");
//		} catch (Exception e) {
//			e.printStackTrace();
//		}
//	}
//
//    private static String getTagValue(String sTag, Element eElement) {
//        NodeList nlList = eElement.getElementsByTagName(sTag).item(0).getChildNodes();
//
//        Node nValue = (Node) nlList.item(0);
//
//        return nValue.getNodeValue();
//    }
//
//    public static HashMap<String, String> getLinks() {
//        return links;
//    }
//
//
//    public static void setLastSave(long t) {
//        try {
//            DBAccess.uidRow("insert into salvare(data) values(?)", new Object[]{t});
//        } catch (SQLException ex) {
//            ex.printStackTrace();
//        }
//    }
//
//    public static String _t(String text, String cod_limba) {
//        String s = "";
//        ResultSet rs = null;
//        try {
//            String query = "SELECT text_tradus FROM traduceri WHERE cod_limba = '" + cod_limba + "' AND text_romana = '" + text + "'";
//            // System.out.println("query = "+query);
//            rs = DBAccess.getRows(query);
//            if (rs.next()) {
//                s = rs.getString("text_tradus");
//            }
//            rs.close();
//        } catch (SQLException ex) {
//            ex.printStackTrace();
//        }
//        return s;
//    }
//
//    public static BigDecimal getProcentCota(int tva_id) {
//        double s = -1;
//        ResultSet rs = null;
//        try {
//            String query = "SELECT procent FROM cote_tva WHERE tva_id = " + tva_id;
//            rs = DBAccess.getRows(query);
//            if (rs.next()) {
//                s = rs.getDouble("procent");
//            }
//            rs.close();
//        } catch (SQLException ex) {
//            ex.printStackTrace();
//        }
//        return BigDecimal.valueOf(s);
//    }
//   
//    public static void salveaza(Proforma p) {
//        DBAccess.beginTransaction();
//        try {
//            Client client = p.getClient();
//            Intocmitor intocmitor = p.getIntocmitor();
//            Delegat delegat = p.getDelegat();
//
//            ArrayList<Articol> articole = p.getLista_articole();
//
//
//            client.saveClient();
//            if (!intocmitor.getNume().equals(""))//daca nu e gol campul cu denumirea intocmitorului
//            {
//                intocmitor.saveIntocmitor();
//            }
//            if (!delegat.getNume().equals(""))//daca nu e gol campul cu denumirea/cnp delegat
//            {
//                delegat.saveDelegat();
//            }
//            OperatiuneJurnal o = new OperatiuneJurnal((p.getProforma_id() > 0 ? "Editare" : "Emitere") + " proforma "+(p.isManualTotalEdit()?"(modificare manuala)":""),
//                    p.getSerie() + p.getNumar(),
//                    "proforma",
//                    Common.getServerDate(),
//                    Common.getLoggedUser().getUserName(),
//                    DBAccess.getCurrentLock(DBAccess.getFirmakey()));
//
//            p.saveFactura();
//            Serie.updateSerie(p.getSerie_id(), p.getLayout_id(), 'p');
//            o.setDocument(p.getSerie() + p.getNumar());
//            OperatiuneJurnal.insert(o);
//
//
//            int fact_id = p.getProforma_id();
//            for (int i = 0; i < articole.size(); i++) {
//                if (articole.get(i).getFactura_id() == -1) {
//                    articole.get(i).setFactura_id(fact_id);
//                }
//                articole.get(i).saveArticol();      //inseram/updateam articolul in bd
//
//            }
//            p.saveProformeArticole();//salvam in proforme articole
//            DBAccess.commitTr();
//        } catch (Exception e) {
//            DBAccess.rollbackTr();
//            e.printStackTrace();
//        }
//    }
//
//
//    public static void salveaza(Operatiune op) throws OperatiuneException{
//
//        String msj = "";
//
//        int id_doc = op.getOperatiune_id();
//        if (id_doc > 0){
//            Operatiune.save(op);
//            msj = "Editare ";
//        }else{
//            Operatiune.insert(op);
//            msj = "Emitere ";
//        }
//        int idPlati = -1;
//        //                    idPlati = Incasare.insertPlati(dp.getPlati());
//        String td = op.getNume_operatiune();
//
//        OperatiuneJurnal o = new OperatiuneJurnal(msj + "operatiune casa (" + op.getTip_operatiune() + ") "/*op.getDescriere()*/,
//            op.getNumar_document(),td, new Date(),Common.getLoggedUser().getUserName(),
//            DBAccess.getCurrentLock(DBAccess.getFirmakey()));
//
//        OperatiuneJurnal.insert(o);
//
//    }
//
//
//    public static void salveazaRegistruCasa(Incasare chit, boolean editare, Double val_total)throws SQLException, ParseException, OperatiuneException{
//        Operatiune newop = null;
//
//        if (chit == null) return;
//        Boolean cu_chitanta = chit.getChitanta() == 'y';
// // verifica daca chit trebuie salvata in registru de casa(verifica si daca reg. casa este activ).
//        if (!deInregistratRegCasa(chit.getTipIncasare(), chit.getMoneda())) return;
////        if (!isNumerar(chit.getTipIncasare())) return;
//
//        int id = 0;
//        String nume="", functie="", cnp="";
////de resolvat ce punem aici intocmitorul sau utilizator, default punem utilisatorul
//        Angajat angajat  =  autocompletareAngajat();
//            nume = angajat.getNume();
//            functie = angajat.getFunctie();
//            cnp = angajat.getCnp();
//            id = angajat.getAngajat_id();
//
//            if (chit.isToDelete()){
//
//            }//sa intampla daca editare chitanta din modificare documente
//             else if (editare){
////                Operatiune newop = null;
//                //editare operatie
//                ArrayList<Operatiune> opl = Operatiune.get("select * from operatiuni_casa where fk_id=? and nume_operatiune like 'chitanta%'", new Object[]{chit.getIncasare_id()});
//                ArrayList<Operatiune> aopl = Operatiune.get("select * from operatiuni_casa where fk_id=? and nume_operatiune like 'Bon fiscal'", new Object[]{chit.getIncasare_id()});//    GEST-553 Incasarea prin bon in Vizualizare registru casa
//        
////      editari de incasari cu bon nu sunt trecute in registru de casa
//                if (chit.getTipIncasare().equals("Bon") && !aopl.isEmpty()){
//                    System.out.println("nu se editeaza bunul pe registru de casa");
//                    return;
//                }
//
//                if (cu_chitanta && chit.getIncasare_id() > 0 && opl.size()>0) {
//                    Incasare ch = chit;
//                    Operatiune op = opl.get(0);
//                    op.setCurs(BigDecimal.valueOf(ch.getCurs()));
//                    op.setData(Common.SQLITE_DATE_FORMAT.parse(ch.getData_incasare()));
//                    if (isExplicatieDefaultRCasa(op.getDescriere())){ //op.setDescriere("");// ;) GEST-543 Chitanta editata in registru casa  -trebuie pastrat descrierea...
//                        op.setDescrierePartialTotal(ch.getValoare(), val_total);
//                    }
//      //  y cuando editamos la chitanta sola que pasa ?
//                    op.setFkId(ch.getIncasare_id());
//                    op.setMoneda(ch.getMoneda());
//                    op.setNumar_document(ch.getSerie() + ch.getNumar());
//                    //                       ;)Esteban: nu era registrata schimbare de pret din emitere facturi in registru de casa.
//                    op.setValoare(BigDecimal.valueOf(ch.getValoare()));
//                    op.setV_valoare(BigDecimal.valueOf(ch.getV_valoare_incasata()));
//
//                    Operatiune.save(op);
//                }// ramane o gaura cand editam o factura incasata cu mandat postal, card, etc.
//                else if(chit.getIncasare_id() > 0){
//                    newop = new Operatiune(0, id, nume, functie, cnp, "incasare",
//                        cu_chitanta? "Chitanta" : "Bon fiscal",
//                        chit.getSerie()+chit.getNumar(),"",
//                        chit.getMoneda(), BigDecimal.valueOf(chit.getValoare()),
//                        BigDecimal.valueOf(chit.getV_valoare_incasata()),
//                        BigDecimal.valueOf(chit.getCurs()),
//                        Common.SQLITE_DATE_FORMAT.parse(chit.getData_incasare()), 0);
//
//                    newop.setDescriere(getExplicatieChitantaRegCasa(chit));
//                    if (newop != null) {
//                        newop.setFkId(chit.getIncasare_id());
//                        if (cu_chitanta){//   Incasarea cu chitanta
//                            Operatiune.insert(newop);
//                        }else if (chit.getTipIncasare().equals("Bon")//aopl.isEmpty() && f.getBon() != null //&& f.getFactura_id() <= 0
//                                                                /*&& f.getBon().getTipPlata().compareTo(TipPlataIncasare.CARD) != 0*/){
//                            Operatiune.insert(newop);
//                            chit.getTipIncasare().equals("Bon");
//                        }
//                    }
//                }
//            }else{
//
//                newop = new Operatiune(0, id, nume, functie, cnp, "incasare",
//                    cu_chitanta? "Chitanta" : "Bon fiscal",
//                    chit.getSerie()+chit.getNumar(),"",
//                    chit.getMoneda(), BigDecimal.valueOf(chit.getValoare()),
//                    BigDecimal.valueOf(chit.getV_valoare_incasata()),
//                    BigDecimal.valueOf(chit.getCurs()),
//                    Common.SQLITE_DATE_FORMAT.parse(chit.getData_incasare()), 0);
//
//                newop.setDescriere(getExplicatieChitantaRegCasa(chit));
//                if (newop != null) {
//                    newop.setFkId(chit.getIncasare_id());
//                    if (cu_chitanta/*chitante.get(0).getChitanta() == 'y'*/){//    GEST-553 Incasarea prin bon in Vizualizare registru casa
//                        Operatiune.insert(newop);
//                    }else if (chit.getTipIncasare().equals("Bon")//aopl.isEmpty() && f.getBon() != null //&& f.getFactura_id() <= 0
//                                                            /*&& f.getBon().getTipPlata().compareTo(TipPlataIncasare.CARD) != 0*/){
//                        Operatiune.insert(newop);
//                        chit.getTipIncasare().equals("Bon");
//                    }
//                }
//            }
//
//     //   }else{// pt Bonuri Fiscale
//            
//     //   }
//    }
//
//// BILL-420  Mesajul de advertisare ca poate edita din tabel explicatie si angajat.
//    public static int countRegCasa(){
//        try {
//            return DBAccess.getInt("SELECT COUNT(operatiune_id) FROM operatiuni_casa", new Object[]{});
//        } catch (Exception e) {
//            return 0;
//        }
//    }
//    public static boolean isOperatiuneInLEI(String moneda){
//        if (moneda.isEmpty())
//            return false;
// // verifica daca c trebuie salvata in registru de casa.
//        if( moneda.equalsIgnoreCase("RON") ){
//            return true;
//        }
//        System.out.println(moneda + "  Nu se inregistreaza in registru de Casa!");
////        Messages.showWarningMessage(null, moneda + "  Nu se inregistreaza in registru de Casa!!!", "Atentie");
//        return false;
//    }
//    
//    public static boolean isNumerar(String tip_incasare){
//        if (tip_incasare.isEmpty())
//            return false;
// // verifica daca c trebuie salvata in registru de casa.
//        if( (tip_incasare.equalsIgnoreCase("chitanta") || tip_incasare.equalsIgnoreCase("bon")) ){
//            return true;
//        }
//        System.out.println(tip_incasare + "  Nu se inregistreaza in registru de Casa!");
////        Messages.showWarningMessage(null, tip_incasare + "  Nu se inregistreaza in registru de Casa!!!", "Atentie");
//        return false;
//    }
//    
//    /***
//     * Verifica daca registru de casa este activ, si daca operatiune este in LEI si numerar.
//     * @param tip
//     * @param mon
//     * @return
//     */
//    public static boolean deInregistratRegCasa(String tip, String mon){
//        try {
//            return isRegCasaActiv() && isNumerar(tip) && isOperatiuneInLEI(mon);
//        } catch (Exception ex) {
//            Logger.getLogger(Common.class.getName()).log(Level.SEVERE, null, ex);
//            return false;
//        }
//    }
///**
// * verifica daca registru de casa este activ.
// * @return
// */
//    public static boolean isRegCasaActiv(){
//       //if(true) return true;
//        try {
//            Modules m = new Modules(Common.getModulesDb(DBAccess.getFirmakey()));
//            return m.isModuleEnabled(Modules.REGISTRU_CASA);
//        } catch (Exception e) {
//            return false;
//        }
//    }
//
//    public static Angajat autocompletareAngajat(){
//        Angajat ang = new Angajat();
//        try {
//            User user = Common.getLoggedUser();     //se autocompleteaza cu userul logat
//            
//            String angajatul = user.getNume() + " " + user.getPrenume();
//            angajatul = angajatul.trim().equals("") ? user.getUserName() : angajatul;
////                        int angajat_id, String nume, String functie, String cnp
//            ang = new Angajat(user.getId(), angajatul, "", user.getCnp());
//        } catch (Exception e) {
//        }
//
//        return ang;
//    }
//    
//    public static String comunNumber(int nr) {
//
//        String mat[] = {"zero", "unu", "doua", "trei", "patru", "cinci", "sase", "sapte", "opt", "noua"};
//        String comun = "";
//        int a;
//        a = nr / 100;
//        if (a != 0) {
//            if (a == 1) {
//                comun = "unasuta";
//            } else if (a == 2) {
//                comun = "douasute";
//            } else {
//                comun = mat[a] + "sute";
//            }
//        }
//        int b = nr % 100;
//        b = b / 10;
//        int c = nr % 10;
//
//        if (b != 0) {
//            if (b == 1) {
//                if (c == 0) {
//                    comun += "zece";
//                } else if (c == 1) {
//                    comun += "unsprezece";
//                } else if (c == 2) {
//                    comun += "doisprezece";
//                } else if (c == 6) {
//                    comun += "saisprezece";
//                } else {
//                    comun = comun + mat[c] + "sprezece";
//                }
//                return comun;
//            } else {
//                if (b == 2) {
//                    comun += "douazeci";
//                } else if (b == 6) {
//                    comun += "saizeci";
//                } else {
//                    comun = comun + mat[b] + "zeci";
//                }
//            }
//        }
//
//        if (c != 0) {
//            if (b != 0) {
//                comun += "si";
//            }
//            comun += mat[c];
//        }
//
//        return comun;
//    }
//
//    public static String nrToStr(int nr) {
//        if (nr >= 1000000000) {
//            return "";
//        }
//        if (nr == 0) {
//            return "zero";
//        }
//        int a;
//        String string = "";
//        if (nr >= 1000000) {//un milion
//            a = nr / 1000000;//cate milioane sint...
//            if (a == 1) {
//                string += "unmilion";
//            } else // mai multe milioane
//            {
//                string = string + comunNumber(a) + "milioane";
//            }
//        }
//        nr = nr % 1000000;
//
//        if (nr >= 1000) {//o mie
//            a = nr / 1000;//cate mii sint...
//            if (a == 1) {
//                string += "unamie";
//            } else // mai multe milioane
//            {
//                string += comunNumber(a) + "mii";
//            }
//        }
//
//        nr = nr % 1000;
//        if (nr >= 1) {//o mie
//            a = nr / 1;//cate mii sint...
//            string += comunNumber(a);
//        }
//        return string;
//    }
//
//    public static String numberToText(double nr, String moneda) {
//        StringTokenizer stk = new StringTokenizer(nr + "", ".");
//        String left = null, right = null;
//        if (stk.hasMoreTokens()) {
//            left = stk.nextToken();
//        }
//        if (stk.hasMoreElements()) {
//            right = stk.nextToken();
//            if (right.length() == 1) {
//                right = right + "0";
//            }
//        }
//        int intNr = 0;
//        try {
//            intNr = Integer.parseInt(left);
//        } catch (NumberFormatException ex) {
//            ex.printStackTrace();
//        }
//        String response = nrToStr(intNr);
//        try {
//            if (right != null) {
//                int r = Integer.parseInt(right);
//                if (r == 0) {
//                    right = null;
//                }
//            }
//        } catch (NumberFormatException ex) {
//            right = null;
//        }
//        if ("doua".equals(response)) {
//            response = "doi";
//        }
//        /*
//        if($nr[1]){
//        $nr[1] = substr($nr[1],0,2);
//        $nr[1] = round($nr[1],2);
//        //if($nr[1][0]==0)
//        //$nr[1] = substr($nr[1],1,strlen($nr[1])-1);
//        $response .=" , ".$nr[1];
//        }
//         */
//        if (right != null) {
//            response = response + " " + moneda + " si " + right + (("RON".equals(moneda) || "LEI".equals(moneda.toUpperCase())) ? " bani" : " centi");
//        } else {
//            response = response + " " + moneda;
//        }
//        return response;
//    }
//
//    public static int getLayout(int serie_id) {
//        int lid = 1;
//        ResultSet rs = null;
//        try {
//            String query = "SELECT layout_id FROM serii WHERE serie_id = " + serie_id;
//            rs = DBAccess.getRows(query);
//            if (rs.next()) {
//                lid = rs.getInt("layout_id");
//            }
//            rs.close();
//        } catch (SQLException ex) {
//            ex.printStackTrace();
//        }
//        return lid;
//    }
//
//
//    public static boolean existaSerie(char tip) {
//        String query = "SELECT * FROM serii WHERE tip_serie = '" + tip + "'";
//        try {
//            ResultSet rs = DBAccess.getRows(query);
//            int i = 0;
//            while (rs.next()) {
//                i++;
//            }
//            if (i > 0) {
//                rs.close();
//                return true;
//            }
//        } catch (SQLException e) {
//            e.printStackTrace();
//        }
//        return false;
//    }
//
//
//    public static String numeVersiune(int v) {
//        switch (v) {
//            case 1:
//                return "Standard";
//            case 2:
//                return "Profesional";
//            case 3:
//                if(Common.isClient()) return "Client Retea";
//                return "Profesional Plus";
//            case 4:
//                return "Gestiune Magazin";
//            case 5:
//                return "Gestiune Plus";
//            default:
//                return "";
//        }
//    }
//
//    public static void setMinimumSize(Window w) {
//        Dimension sz = Toolkit.getDefaultToolkit().getScreenSize();
//        if (sz.getWidth() == 1024) {
//            w.setMinimumSize(new Dimension(1024, (int) sz.getHeight() * 8 / 10));
//        } else {
//            w.setMinimumSize(new Dimension(((int) sz.getWidth() * 85 / 100), (int) sz.getHeight() * 8 / 10));
//        }
//    }
//
//
//    public static void updateStornariFacturi(final int id) {
//        BigDecimal vt = BigDecimal.ZERO;
//        BigDecimal t = BigDecimal.ZERO;
//        try {
//            ResultSet rs = DBAccess.getRows("select valoare_totala from facturi where factura_id = (select factura_id from stornari where factura_storno_id =" + id + ")");
//            if (rs.next()) {
//                vt = BigDecimal.valueOf(rs.getDouble(1));
//            }
//            rs.close();
//            rs = DBAccess.getRows("select total(valoare_stornata)+total(tva_stornat) from stornari where factura_id in "
//                    + "(select factura_id sfid from stornari where factura_storno_id=" + id + " and "
//                    + "(select anulata from facturi where factura_id =sfid)!='y') and (select anulata from facturi where factura_id =" + id + ")!='y'");
//            if (rs.next()) {
//                t = BigDecimal.valueOf(rs.getDouble(1));
//            }
//            rs.close();
//
//        } catch (SQLException ex) {
//            ex.printStackTrace();
//        }
//        try {
//            if (t.compareTo(BigDecimal.ZERO) <= 0) {
//                DBAccess.uidRow("update facturi set stornata='n' where factura_id=" + "(select factura_id from stornari where factura_storno_id =?)", new Object[]{id});
//            } else if (vt.subtract(t).compareTo(BigDecimal.ZERO) <= 0) {
//                DBAccess.uidRow("update facturi set stornata='y' where factura_id=" + "(select factura_id from stornari where factura_storno_id =?)", new Object[]{id});
//            } else {
//                DBAccess.uidRow("update facturi set stornata='p' where factura_id=" + "(select factura_id from stornari where factura_storno_id =?)", new Object[]{id});
//            }
//        } catch (SQLException ex) {
//            ex.printStackTrace();
//        }
//    }
//
//    public static void updateIncasariFacturiByIncId(final int id) {
//        try {
//            ResultSet rs = DBAccess.getRows("select factura_id from incasari_facturi where incasare_id =" + id);
//            if (!rs.next()) {
//                return;
//            }
//            int fid = rs.getInt(1);
//            rs.close();
//            char incasata = getFacturaIncasata(fid);
//            DBAccess.uidRow("update facturi set incasata= ? where factura_id=" + "(select factura_id from incasari_facturi where incasare_id =?)", new Object[]{incasata, id});
//        } catch (SQLException ex) {
//            ex.printStackTrace();
//        }
//    }
//
//
//	public static String getLocalOsType(){
//        if (System.getProperty("os.name").toLowerCase().indexOf("linux") >= 0) {
//			return "l";
//		} else if (System.getProperty("os.name").toLowerCase().indexOf("mac") >= 0) {
//			return "m";
//		} else {
//			return "w";
//		}
//	}
//
//    public static void updateIncasariFacturi(final int id) {
//        try {
//            char incasata = getFacturaIncasata(id);
//            DBAccess.uidRow("update facturi set incasata=? where factura_id= ?", new Object[]{incasata, id});
//        } catch (SQLException ex) {
//            ex.printStackTrace();
//        }
//    }
//
//    public static char getFacturaIncasata(int id) {
//        BigDecimal vt = BigDecimal.ZERO;
//        BigDecimal t = BigDecimal.ZERO;
//        try {
//            ResultSet rs = DBAccess.getRows("select valoare_totala from facturi where factura_id =" + id);
//            if (rs.next()) {
//                vt = BigDecimal.valueOf(rs.getDouble(1));
//            }
//            rs.close();
//            //rs = DBAccess.getRows("select total(valoare) from incasari where anulata!='y' and incasare_id in (select incasare_id from incasari_facturi where factura_id =" + id + ")");
//            rs = DBAccess.getRows("select total(val_factura) from incasari_facturi inc "
//                + "left join incasari i on (inc.incasare_id = i.incasare_id) "
//                + "where i.anulata!='y' and inc.factura_id = ? and inc.incasare_id in (select incasare_id from incasari_facturi where factura_id = ?) ", new Object[]{id,id});
//            if (rs.next()) {
//                t = BigDecimal.valueOf(rs.getDouble(1));
//            }
//            rs.close();
//
//            if (t.compareTo(BigDecimal.ZERO) <= 0) {
//                return 'n';
//            } else if (vt.subtract(t).compareTo(BigDecimal.ZERO) <= 0) {
//                return 'y';
//            }
//            return 'p';
//        } catch (SQLException ex) {
//            ex.printStackTrace();
//        }
//        return 'n';
//    }
//
//    public static String escapeAmp(String text) {
//        if (text == null) {
//            return "";
//        }
//        if (text.indexOf("&amp") > 0) {
//            return escapeLt(text);
//        }
//        return escapeLt(text.replace("&", "&amp;"));
//    }
//
//    //    BILL-239 La finalizare factura da eroare daca apare vreun ' la delegat sau cand se foloseste caracterul " < "
//    public static String escapeLt(String text) {
//        if (text == null) {
//            return "";
//        }
//        if (text.indexOf("&lt") > 0) {
//            return text;
//        }
////        if (text.contains("<style") || text.contains("</style"))
////            return text;
////        else
//            return ((text.replace("<", "&lt;")).replace("&lt;style", "<style")).replace("&lt;/style", "</style");
//    }
//
//
//    public static boolean isOneUserNoLogin() {
//        if (new Config().get("one_user_no_login").equals("true")) {
//            return true;
//        }
//        return false;
//    }
//
//    public static int getUsersCount() {
//        try {
//            ResultSet rs = DBAccess.getRows("select count(*) from users where deleted!='y' limit 1");
//            int r = 0;
//            if (rs.next()) {
//                r = rs.getInt(1);
//            }
//            rs.close();
//
//            return r;
//        } catch (SQLException ex) {
//            ex.printStackTrace();
//        }
//        return 0;
//    }
//
//    public static boolean existaEmiseDupa(String table, Date date, Serie s, int facturaId) {
//        try {
//            String whc = "";
//            if (facturaId > 0) {
//                whc = " (rowid>" + facturaId + " and date(data_emiterii) < date('" + SQLITE_DATE_FORMAT.format(date) + "') ) ";
//            } else {
//                whc = " (date(data_emiterii) >date('" + SQLITE_DATE_FORMAT.format(date) + "')) ";
//            }
//            ResultSet rs = DBAccess.getRows("select count(*) from " + table + " where " + whc + " and serie_id= " + s.getSerieId() + " and anulata!='y' limit 1");
//            if (rs.next()) {
//                int r = rs.getInt(1);
//                rs.close();
//                if (r > 0) {
//                    return true;
//                }
//            }
//        } catch (SQLException ex) {
//            ex.printStackTrace();
//        }
//        return false;
//    }
//
//    public static int getLastPrintId(String sql) {
//        int r = -1;
//        try {
//            ResultSet rs = DBAccess.getRows("select print_id from " + sql + " order by rowid desc limit 1");
//            if (rs.next()) {
//                r = rs.getInt(1);
//                rs.close();
//            }
//        } catch (SQLException ex) {
//            ex.printStackTrace();
//        }
//        return r;
//    }
//
//    public static boolean isSuggesterMentiuni() {
//        return "true".equals(new Config().get("suggester_mentiuni"));
//    }
//
//
//
//    public static void toQueryLog(String query) {
//        if (true) {
//            return;
//        }
//        FileWriter fw = null;
//        BufferedWriter bw = null;
//        try {
//            bw = new BufferedWriter(new FileWriter(new File(LOG_FILE), true));
//            if (!query.contains("facturi_stornate")) {
//                bw.append("\r\n\r\n" + query);
//            }
//            bw.close();
//        } catch (IOException ex) {
//            ex.printStackTrace();
//        } finally {
//            try {
//                if (bw != null) {
//                    bw.close();
//                }
//                if (fw != null) {
//                    fw.close();
//                }
//            } catch (IOException ex) {
//                ex.printStackTrace();
//            }
//        }
//    }
//
//
//    public static void copyFolder(File src, File dest) throws IOException {
//		if(src.isDirectory()){
//			if(!dest.exists()){
//    		   dest.mkdir();
//    		}
//			String files[] = src.list();
//    		for (String file : files) {
//    		   //construct the src and dest file structure
//    		   File srcFile = new File(src, file);
//    		   File destFile = new File(dest, file);
//    		   //recursive copy
//    		   copyFolder(srcFile, destFile);
//    		}
//		}else{
//			copy(src, dest);
//		}
//    }
//
//    public static boolean isStocMode() {
//        return IS_STOC_MODE;
//    }
//
//	@Deprecated
//    public static void switchToFirma(String denumire) {
//        switchToFirma(denumire, false);
//    }
//
//
//    //method hangs until connected or exit
//    public static void checkClientConnection() {
//        if (isClient()) {
//            ResultSet rs = null;
//            do {
//                try {
//                    rs = DBAccess.getRows("select * from versiune");
//                } catch (Exception ex) {
//                    System.err.println("No connection to server:" + ex.getMessage());
//                }
//            } while (rs == null);
//        }
//    }
//
//    public static String getCurrentFirma() {
//        return sbProperties.getProperty("firma", DBConnection.DEFAULT_DBKEY);
//    }
//
//    public static String getSBTitle() {
//        String titlu = "Sleek Bill " + Common.getAn() + " " + 
//        	Common.numeVersiune(Integer.parseInt(Common.getVersiune())) + " " + Common.getNrVersiune() + (Common.getVersiuneMinor() != null ? "." + Common.getVersiuneMinor() : "");
//
//        if (!Common.getDenumireFirma().equals("")) {
//            titlu += " - " + Common.getDenumireFirma();
//        }
//        return titlu;
//    }
//
//     public static String restaurareDate(File file) throws IOException, SQLException {
//        String denumire = null;
//        ZipFile zip = new ZipFile(file);
//        Date lastDataEmiterii = getLastDataEmiterii(zip);
//        denumire = getDenumireFirma(zip);
//        Vector<Company> firme = Company.getFirmeList();
//        denumire = Common.sanitizePath(denumire);
//        denumire = denumire.trim();
//        if (getVersiune(zip) > 3) {
//            Messages.showErrorMessage(mainFrame, "Nu puteti restaura o versiune de Sleek Bill Gestiune in Sleek Bill Facturi", "Eroare");
//            return null;
//        }
//        for (Company f : firme) {
//            if (f.getName().equals(denumire)) {
//                if (getLastRowId(zip) < f.getLastFacturaId()) {
//                    if (Messages.showQuestionMessage(mainFrame,
//                            "Atentie! Sunteti pe cale sa Restaurati o Baza de Date (Salvare a"
//                            + "\nDatelor) mai Veche decat cea existenta in program pentru Firma " + denumire + " !"
//                            + "\nDaca alegeti sa Continuati,  aceasta va STERGE si INLOCUI baza de date existenta!"
//                            + "\nDoriti sa continuati cu INLOCUIREA?", "Atentie") != JOptionPane.YES_OPTION) {
//                        return null;
//                    }
//                } else {
//                    if (Messages.showQuestionMessage(mainFrame,
//                            "Atentie! Sunteti pe cale sa Restaurati o Baza de Date (Salvare a "
//                            + "\nDatelor) pentru Firma " + denumire + " !"
//                            + "\nDaca alegeti sa Continuati,  aceasta va STERGE si INLOCUI baza de date "
//                            + "\nexistenta in program pentru aceasta firma!"
//                            + "\nDoriti sa continuati cu INLOCUIREA?", "Atentie") != JOptionPane.YES_OPTION) {
//                        return null;
//                    }
//                }
////                if (!getCif(zip).equals(f.getCif())) {
////                    if (Messages.showQuestionMessage(mainFrame, "CIF-ul firmei " + denumire + " nu corespunde cu CIF-ul firmei din fisierul de restaurare. \nSunteti sigur ca doriti suprascrierea firmei " + denumire + " ?", "Atentie") != JOptionPane.YES_OPTION) {
////                        return null;
////                    }
////                }
//                DBConnection.getConnection(DBAccess.SERVERNAME, denumire).close();
//                //salvare
//                try {
//
//                    String fn = Common.REPORTS_FOLDER_PATH + Common.sanitizePath(denumire) + "/salvare_" + Common.sanitizePath(Common.ROMANIAN_DATE_FORMAT.format(new Date())) + "-" + new DecimalFormat("####").format(Math.random() * 1000) + ".sbf";
//                    Ziper.zipFolder(Common.USERDATA_FOLDER_PATH, new File(fn));
//                } catch (Exception e) {
//                    e.printStackTrace();
//                }
//                Ziper.specialUnZip(zip, COMPANIES_PATH + denumire);
//                GregorianCalendar unuIulie = new GregorianCalendar(2010, GregorianCalendar.JULY, 1);
//                if (lastDataEmiterii != null && lastDataEmiterii.compareTo(unuIulie.getTime()) < 0 && Common.isPlatitorTva() == 'y') {
//                    SwingUtilities.invokeLater(new Runnable() {
//
//                        @Override
//                        public void run() {
//                            Messages.showOkMessage(null,
//                                    "\nSleek Bill s-a actualizat cu succes conform ultimelor modificari ale cotei TVA !"
//                                    + "\nPentru actualizarea preturilor Dvs cu noua cota va rugam sa cititi mai departe."
//                                    + "\nAm introdus in meniu un buton Nou pentru ca intotdeauna sa fiti la un click distanta de ultimele anunturi si noutati legate de Sleek Bill."
//                                    + "\nVa recomandam sa-l accesati acum si ori de cate ori aveti dubii sau intrebari despre actualizari esentiale ale Sleek Bill.", "Atentie");
//                            if (Messages.showQuestionMessage(null, "Doriti sa actualizati cotele articolelor din nomenclator de la cota veche de 19% la cea de 24%?", "Atentie") == JOptionPane.YES_OPTION) {
//                                updateCote = true;
//                            }
//                        }
//                    });
//                }
//                return denumire;
//            }
//        }
//
//
//        if (Messages.showQuestionMessage(mainFrame, "Sunteti pe cale sa restaurati o Salvare a Datelor pentru firma " + denumire + "."
//                + "\nDoriti sa continuati?", "Atentie") == JOptionPane.YES_OPTION) {
//            Ziper.specialUnZip(zip, COMPANIES_PATH + denumire);
//
//            GregorianCalendar unuIulie = new GregorianCalendar(2010, GregorianCalendar.JULY, 1);
//            if (lastDataEmiterii != null && lastDataEmiterii.compareTo(unuIulie.getTime()) < 0 && Common.isPlatitorTva() == 'y') {
//                SwingUtilities.invokeLater(new Runnable() {
//
//                    @Override
//                    public void run() {
//                        Messages.showOkMessage(null,
//                                "\nSleek Bill s-a actualizat cu succes conform ultimelor modificari ale cotei TVA !"
//                                + "\nPentru actualizarea preturilor Dvs cu noua cota va rugam sa cititi mai departe."
//                                + "\nAm introdus in meniu un buton Nou pentru ca intotdeauna sa fiti la un click distanta de ultimele anunturi si noutati legate de Sleek Bill."
//                                + "\nVa recomandam sa-l accesati acum si ori de cate ori aveti dubii sau intrebari despre actualizari esentiale ale Sleek Bill.", "Atentie");
//                        if (Messages.showQuestionMessage(null, "Doriti sa actualizati cotele articolelor din nomenclator de la cota veche de 19% la cea de 24%?", "Atentie") == JOptionPane.YES_OPTION) {
//                            updateCote = true;
//                        }
//                    }
//                });
//            }
//            return denumire;
//        } else {
//            return null;
//        }
//    }
//
//    public static int getLastTermenDePlata() {
//        try {
//            return (Integer) DBAccess.getRows("select julianday(data_scadentei) - julianday(data_emiterii) from facturi order by rowid desc limit 1", null, new ResultSetHandler() {
//
//                public Object handle(ResultSet rs) throws SQLException {
//                    if (rs.next()) {
//                        return Math.round(rs.getFloat(1));
//                    }
//                    return 0;
//                }
//            });
//        } catch (Exception ex) {
//            ex.printStackTrace();
//        }
//        return 0;
//    }
//
//    //0 in v2008 necompletat
//    //-1 inseamna data scadenta
//    public static int getTermenPlata() {
//        return (Integer) DBAccess.getRows("select f_termen_plata, termen_plata FROM flags ORDER by flag_id DESC LIMIT 1", null, new ResultSetHandler() {
//
//            @Override
//            public Object handle(ResultSet rs) throws SQLException {
//                if (rs.next()) {
//                    if ("y".equals(rs.getString("f_termen_plata"))) {
//                        return rs.getInt("termen_plata");
//                    }
//                }
//                return -1;
//            }
//        });
//    }
//
//    public static TableModel resultSetToTableModel(ResultSet rs) {
//        try {
//            ResultSetMetaData metaData = rs.getMetaData();
//            int numberOfColumns = metaData.getColumnCount();
//            Vector columnNames = new Vector();
//
//            // Get the column names
//            for (int column = 0; column < numberOfColumns; column++) {
//                columnNames.addElement(metaData.getColumnLabel(column + 1));
//            }
//
//            // Get all rows.
//            Vector rows = new Vector();
//
//            while (rs.next()) {
//                Vector newRow = new Vector();
//
//                for (int i = 1; i <= numberOfColumns; i++) {
//                    newRow.addElement(rs.getObject(i));
//                }
//
//                rows.addElement(newRow);
//            }
//
//            return new DefaultTableModel(rows, columnNames);
//        } catch (Exception e) {
//            e.printStackTrace();
//
//            return null;
//        }
//    }
//
//    public static boolean clientExists(String cif, String denumire, String adresa) {
//        cif = cif == null ? "" : cif;
//        String cleanCif = "";
//        if (cif.startsWith("RO")) {
//            cleanCif = cif.substring(2, cif.length());
//        }
//        cleanCif = cif.replace(" ", "");
//
//        String roCif = "RO" + cleanCif;
//
//        try {
//            ResultSet rs;
//            if (cif != null && !cif.isEmpty() && !"-".equals(cif)) {
//                rs = DBAccess.getRows("select * from clienti where (cif=" + Common.prepareString(cif) + " or cif=" + Common.prepareString(cleanCif) + " or cif=" + Common.prepareString(roCif) + ") and deleted!='y'");
//            } else {
//                rs = DBAccess.getRows("select * from clienti where (denumire like " + Common.prepareString(denumire) + " and adresa like " + Common.prepareString(adresa) + ") and deleted!='y'");
//            }
//            if (rs.next()) {
//                rs.close();
//                return true;
//            }
//        } catch (SQLException ex) {
//            ex.printStackTrace();
//        }
//        return false;
//    }
//
//    public static boolean clientExists(String cif, String denumire, String adresa, int id) {
//        cif = cif == null ? "" : cif;
//        String cleanCif = "";
//        if (cif.startsWith("RO")) {
//            cleanCif = cif.substring(2, cif.length());
//        }
//        cleanCif = cif.replace(" ", "");
//
//        String roCif = "RO" + cleanCif;
//
//        try {
//            ResultSet rs;
//            if (cif != null && !cif.isEmpty() && !"-".equals(cif)) {
//                rs = DBAccess.getRows("select * from clienti where (cif=" + Common.prepareString(cif) + " or cif=" + Common.prepareString(cleanCif) + " or cif=" + Common.prepareString(roCif) + ") and deleted!='y' and client_id!=" + id);
//            } else {
//                rs = DBAccess.getRows("select * from clienti where (denumire like " + Common.prepareString(denumire) + " and adresa like " + Common.prepareString(adresa) + ") and deleted!='y' and client_id!=" + id);
//            }
//            if (rs.next()) {
//                rs.close();
//                return true;
//            }
//        } catch (SQLException ex) {
//            ex.printStackTrace();
//        }
//        return false;
//    }
//
//
//    /* plata, incasare */
//    public static String[] getTipuriOperatiuni() {
//        try {
//            return (String[]) DBAccess.getRows("select distinct tip from tipuri_operatiuni", null, new ResultSetHandler() {
//
//                @Override
//                public Object handle(ResultSet rs) throws SQLException {
//                    ArrayList<String> list = new ArrayList<String>();
//                    while (rs.next()) {
//                        list.add(rs.getString("tip"));
//                    }
//                    return list.toArray(new String[list.size()]);
//                }
//            });
//        } catch (Exception ex) {
//            ex.printStackTrace();
//        }
//        return null;
//    }
//
//    /* plata, incasare */
//    public static String[] getNumeOperatiuni(String tip) {
//        try {
//            return (String[]) DBAccess.getRows("select nume from tipuri_operatiuni where tip = ?", new Object[]{tip}, new ResultSetHandler() {
//
//                @Override
//                public Object handle(ResultSet rs) throws SQLException {
//                    ArrayList<String> list = new ArrayList<String>();
//                    while (rs.next()) {
//                        list.add(rs.getString("nume"));
//                    }
//                    return list.toArray(new String[list.size()]);
//                }
//            });
//        } catch (Exception ex) {
//            ex.printStackTrace();
//        }
//        return null;
//    }
//
//    /*reset components on jpanel*/
//    static public void resetPanel(JPanel jp) {
//        for (int i = 0; i < jp.getComponents().length; i++) {
//            Component c = jp.getComponent(i);
//            if (c instanceof JPanel) {
//                resetPanel((JPanel) c);
//            } else if (c instanceof JTextComponent) {
//                ((JTextComponent) c).setText("");
//            } else if (c instanceof JComboBox) {
//                if (((JComboBox) c).getItemCount() > 0) {
//                    ((JComboBox) c).setSelectedIndex(0);
//                }
//            } else if (c instanceof JScrollPane) {
//                if (((JScrollPane) c).getViewport().getView() instanceof JTextArea) {
//                    ((JTextArea) ((JScrollPane) c).getViewport().getView()).setText("");
//                }
//            }
//        }
//    }
//
//    /*resets components on jpanel ignoring the ones in the arraylist*/
//    static public void resetPanelWithoutComp(JPanel jp, ArrayList<Component> list){
//        for (int i = 0; i < jp.getComponents().length; i++) {
//            Component c = jp.getComponent(i);
//            if(list.contains(c)) continue;
//            if (c instanceof JPanel) {
//                resetPanelWithoutComp((JPanel) c, list);
//            } else if (c instanceof JTextComponent) {
//                ((JTextComponent) c).setText("");
//            } else if (c instanceof JComboBox) {
//                if (((JComboBox) c).getItemCount() > 0) {
//                    ((JComboBox) c).setSelectedIndex(0);
//                }
//            } else if (c instanceof JScrollPane) {
//                if (((JScrollPane) c).getViewport().getView() instanceof JTextArea) {
//                    ((JTextArea) ((JScrollPane) c).getViewport().getView()).setText("");
//                }
//            }
//        }
//    }
//
//    /*reset components on jpanel*/
//    static public void setEnabledPanel(JPanel jp, boolean enabled) {
//        for (int i = 0; i < jp.getComponents().length; i++) {
//            Component c = jp.getComponent(i);
//            if (c instanceof SBACPanel) {
//                c.setEnabled(false);
//            } else if (c instanceof JPanel) {
//                setEnabledPanel((JPanel) c, enabled);
//            } else if (c instanceof JTextComponent) {
//                ((JTextComponent) c).setEnabled(enabled);
//            } else if (c instanceof JComboBox) {
//                if (((JComboBox) c).getItemCount() > 0) {
//                    ((JComboBox) c).setEnabled(enabled);
//                }
//            } else if (c instanceof JScrollPane) {
//                if (((JScrollPane) c).getViewport().getView() instanceof JTextComponent) {
//                    ((JTextComponent) ((JScrollPane) c).getViewport().getView()).setEnabled(enabled);
//                }
//            } //else if (c instanceof SBDatePicker) {
//                //c.setEnabled(false);} (andrei) 
//            else if (c instanceof JRadioButton) {
//                c.setEnabled(false);
//            } else if (c instanceof JCheckBox) {
//                c.setEnabled(false);
//            }
//        }
//    }
//
//    /*reset components on jpanel*/
//    static public void setVisiblePanel(JPanel jp, boolean visible) {
//        for (int i = 0; i < jp.getComponents().length; i++) {
//            Component c = jp.getComponent(i);
//            if (c instanceof SBACPanel) {
//                c.setVisible(false);
//            } else if (c instanceof JPanel) {
//                setVisiblePanel((JPanel) c, visible);
//            } else if (c instanceof JTextComponent) {
//                ((JTextComponent) c).setVisible(visible);
//            } else if (c instanceof JComboBox) {
//                if (((JComboBox) c).getItemCount() > 0) {
//                    ((JComboBox) c).setEnabled(visible);
//                }
//            } else if (c instanceof JScrollPane) {
//                if (((JScrollPane) c).getViewport().getView() instanceof JTextComponent) {
//                    ((JTextComponent) ((JScrollPane) c).getViewport().getView()).setVisible(visible);
//                }
//            }// else if (c instanceof SBDatePicker) {
//            //    c.setVisible(false);} (andrei)
//            else if (c instanceof JRadioButton) {
//                c.setVisible(false);
//            } else if (c instanceof JCheckBox) {
//                c.setVisible(false);
//            }
//        }
//    }
//
//    public static int getLastInsertId() {
//        String query = "SELECT last_insert_rowid() AS last_insert_id";
//        try {
//            ResultSet rs = DBAccess.getRows(query);
//            if (rs.next()) {
//                return rs.getInt("last_insert_id");
//            }
//            rs.close();
//        } catch (SQLException e) {
//            e.printStackTrace();
//        }
//
//        return 0;
//    }
//
//    static public Date toDate(String s) {
//        try {
//            return SQLITE_DATE_FORMAT.parse(s);
//        } catch (ParseException ex) {
//            return null;
//        }
//
//    }
//
//    //intoarce numarul de zile de rulare sau <0 daca e ok
//    public static int vKCheck() {
//        return vKCheck(DBAccess.getFirmakey(), Common.getCif());
//    }
//
//    public static int vKCheck(String fkey, String cif) {
// 
//        if (Common.isClient()) {
//            ClientFactory factory = sleekbill.xmlrpc.Client.getFactory();
//            Handlers hs = (Handlers) factory.newInstance(Handlers.class);
//            return hs.vKCheck(fkey, cif);
//        }
//
//        try {
//            //todo undo
////            if(true) return 5;
//        	
//            String sql = "SELECT * FROM facturi_stornate";
//            ResultSet rs2 = null;
//            if (!Common.isClient()) {
//                rs2 = DBAccess.getRows(sql, "_TEMP_", fkey);
//            } else {
//                rs2 = DBAccess.getRows(sql);
//            }
//            if (rs2.next()) {//exista ceva
//                String valoare = rs2.getString("valoare1");
//                String configurat = "", cod = "";
//                String an = "";
//				String dEx = "";
//				String module = "";
//				String maxC = "";
//                if (!valoare.equals("")) {
//                    valoare = Common.encode().decrypt(valoare);
//                    String arr[] = valoare.split(",");
//                    cod = arr[0];
//                    configurat = arr[1];   //configurat
//                    if(arr.length != 9){
//                    	configurat = "0";
//                    } else {
//	                    an = arr[3];
//	                    dEx = arr[5];
//						module = arr[6];
//						maxC = arr[8];
//                    }
//                }
//                if (configurat.equals("1")) {//configurat
//                    //verificare every time
//                    //nu are voie sa foloseasca versiunea asta; a aparut dupa data lui de expirare
//                    if(SQLITE_DATE_FORMAT.parse(dEx).compareTo(RELEASE_DATE)<0) return EXPIRED_RESPONSE;
//                    if(SQLITE_DATE_FORMAT.parse(dEx).compareTo(new Date())<0) return EXPIRED_RESPONSE;
//                    Date dBd = SQLITE_DATE_FORMAT.parse(an+"-01-01");
//                    Date dApp = SQLITE_DATE_FORMAT.parse(Common.getAn()+"-01-01");
////                    if(SQLITE_DATE_FORMAT.parse(an+"-01-01").compareTo(SQLITE_DATE_FORMAT.parse(Common.getAn()+"-01-01")) != 0){
//                    if(dBd.compareTo(dApp) > 0){
//                    	return HIGHER_YEAR_RESPONSE;
////                    } else if(dBd.compareTo(dApp) < 0){
////                    	return LOWER_YEAR_RESPONSE;
//                    }
//
//                    boolean isEqual = Common.getC(cif, Common.getVersiune(),
//							String.valueOf(Common.getAn()), Common.UNIVERSAL_SO, dEx,
//							String.valueOf(module), String.valueOf(maxC)).equals(cod);
//                    if(!isEqual) {
//	                    isEqual = Common.getC(cif, Common.getVersiune(),
//								String.valueOf(Common.getAn()), Common.getOsType(), dEx,
//								String.valueOf(module), String.valueOf(maxC)).equals(cod);
//                    }
//                    
//                    //TODO de testat si cu SO=-
////                    if (!Common.getC(cif, Common.getVersiune(),
////							String.valueOf(Common.getAn()), Common.getOsType(), dEx,
////							String.valueOf(module), String.valueOf(maxC)).equals(cod)) {
//                    if(!isEqual) {
//                        String s = Common.encode().decrypt(rs2.getString("data_stornarii"));
//
//                        long l = Long.parseLong(s);
//                        Common.setDataPrimaCfg(l);
//                        int nr_zile = (int) ((System.currentTimeMillis() - l) / (1000 * 60 * 60 * 24)) + 1;
//                        //System.err.println("nr_zile = "+nr_zile+"   30-nr_zile = "+(30-nr_zile));
//                        if (nr_zile < 0) {
//                            nr_zile = 1;
//                            //schimbam data cu data de azi
//                            String new_date = System.currentTimeMillis() + "";
//                            String new_date_enc = Common.encode().encrypt(new_date);
//                            String query = "UPDATE facturi_stornate SET data_stornarii = " + Common.prepareString(new_date_enc);
//                            if (!Common.isClient()) {
//                                DBAccess.uidRow(query, "_TEMP_", fkey);
//                            } else {
//                                DBAccess.uidRow(query);
//                            }
//                        }
//                        if (!Common.isFirmaTest()) {
//                            long it = Common.getInstallationTime();
//                            long now = System.currentTimeMillis();
//                            long deltaDataInstalarii = (now - it) / (1000 * 60 * 60 * 24);
//                            nr_zile = 60 - deltaDataInstalarii >= 30 ? nr_zile : 31 - nr_zile < 60 - deltaDataInstalarii ? nr_zile : 31 - 60 + (int) deltaDataInstalarii;
//                        }
//                        return nr_zile;
//                    } else {
//                        return -1;//fine
//                    }
//                } else {
//                    return 1111; //not fine?  > 45 ?
//                }
//            }
//            rs2.close();
//        } catch (Exception e) {
//            System.err.println("" + e.getCause());
//            return 1000; //  > 45
//        }
//        return 1000;
//    }
//
//    public static boolean vKCheck(Date date) {
//        try {
//            long nr = vKCheck();
//            if (nr < 0) {
//                return true; //a ok
//            }
//            Date installDate = new Date(System.currentTimeMillis() - nr * (1000 * 60 * 60 * 24));
//            if (Math.abs((date.getTime() - installDate.getTime()) / (1000 * 60 * 60 * 24)) > 45) {
//                return false;
//            }
//            return true;
//        } catch (Exception e) {
//            e.printStackTrace();
//            return false;
//        }
//    }
//
//    public static boolean vKInsert(String k, String fkey, String versiune, String an,
//			String osType, Date dataExpirarii, String moduleNr, String access, String maxClients) {
//
//    	if (Common.isClient()) {
//			ClientFactory factory = sleekbill.xmlrpc.Client.getFactory();
//			Handlers hs = (Handlers) factory.newInstance(Handlers.class);
//			return hs.vKInsert(k, fkey, versiune, an, osType, dataExpirarii, moduleNr, access, maxClients);
//		}
//
//        //configure ky
//        String sql = "SELECT * FROM facturi_stornate";
//        try {
//
//            ResultSet rs = DBAccess.getRows(sql, "_TEMP_", fkey);
//            if (rs.next()) {
//                String v1 = rs.getString("valoare1");
//                //System.err.println("valoare = "+valoare);
//                if (!v1.equals("")) {
//					v1 = Common.encode().decrypt(v1);
//					String arr[] = v1.split(",");
//					String cod = k == null ? arr[0] : k;
//                    v1 = Common.encode().encrypt(cod + ",1," +
//                    		versiune + "," + an + "," + osType + "," +
//							Common.SQLITE_DATE_FORMAT.format(dataExpirarii) +
//							"," + moduleNr + "," + access + "," + maxClients);
//                } else {
//                    v1 = Common.encode().encrypt(k != null ? k : "" + ",1," 
//							+ versiune + "," + an + "," + osType + "," +
//							Common.SQLITE_DATE_FORMAT.format(dataExpirarii) +
//							"," + moduleNr + "," + access + "," + maxClients);
//                }
//
//				sql = "UPDATE facturi_stornate SET valoare1 = ?, valoare2 = ? ";
//                DBAccess.uidRow(sql, new Object[]{v1, Common.encode().encrypt(System.currentTimeMillis()+"")}, "_TEMP_", fkey);
//                rs.close();
//            } else {//prima rulare
//                String l = System.currentTimeMillis() + "";
//				String query = "INSERT INTO facturi_stornate(data_stornarii, valoare, valoare1, valoare2) VALUES(?, ?, ?, ?)";
//				String v1 = Common.encode().encrypt(l);
//				String v2 =  Common.encode().encrypt(",1");
//				String v3 =  Common.encode().encrypt(",1," + versiune + "," + an + "," +
//						osType + "," + Common.SQLITE_DATE_FORMAT.format(dataExpirarii) +
//						"," + moduleNr + "," + access + "," + maxClients);
//                DBAccess.uidRow(query, new Object[]{v1, v2, v3, v1}, "_TEMP_", fkey);
//            }
//
//        } catch (SQLException ex) {
//            ex.printStackTrace();
//            return false;
//        }
//        return true;
//    }
//
//   public static boolean vKUpdateAccess(String fkey, String access) {
//	   
//		if (Common.isClient()) {
//			ClientFactory factory = sleekbill.xmlrpc.Client.getFactory();
//			Handlers hs = (Handlers) factory.newInstance(Handlers.class);
//			return hs.vKUpdateAccess(fkey, access);
//		}
//				
//        String sql = "SELECT * FROM facturi_stornate";
//        try {
//
//            ResultSet rs = DBAccess.getRows(sql, "_TEMP_", fkey);
//            if (rs.next()) {
//                String valoare = rs.getString("valoare1");
//                //System.err.println("valoare = "+valoare);
//                if (!valoare.equals("")) {
//                    valoare = Common.encode().decrypt(valoare);
//                    String arr[] = valoare.split(",");
//                    arr[1] = "1";   //configurat
//                    valoare = Common.encode().encrypt(arr[0] + "," + arr[1] + ","
//							+ arr[2] + "," + arr[3] + "," + arr[4] + "," +
//							arr[5] + "," + arr[6] + "," + access + "," + arr[8]);
//                }
//
//				sql = "UPDATE facturi_stornate SET valoare1 = ? ";
//                DBAccess.uidRow(sql, new Object[]{valoare}, "_TEMP_", fkey);
//                rs.close();
//            }
//
//        } catch (SQLException ex) {
//            ex.printStackTrace();
//            return false;
//        }
//        return true;
//    }
//
//    public static boolean vKAccessCheck(String fkey) {
//        try {
//            String sql = "SELECT * FROM facturi_stornate";
//            ResultSet rs2 = null;
//            if (!Common.isClient()) {
//                rs2 = DBAccess.getRows(sql, "_TEMP_", fkey);
//            } else {
//                rs2 = DBAccess.getRows(sql);
//            }
//            if (rs2.next()) {//exista ceva
//                String valoare = rs2.getString("valoare1");
//				String access = "1";
//                if (!valoare.equals("")) {
//                    valoare = Common.encode().decrypt(valoare);
//                    String arr[] = valoare.split(",");
//                    if(arr.length >=9){
//                    	access = arr[7];
//                    }
//                }
//				return !access.equals("1");
//            }
//            rs2.close();
//        } catch (Exception e) {
//            System.err.println("" + e.getCause());
//            return false;
//        }
//        return false;
//    }
//    
//    
//    public static Date getDataActivariiDb(String fkey) {
//        try {
//            String sql = "SELECT * FROM facturi_stornate";
//            ResultSet rs2 = null;
//            if (!Common.isClient()) {
//                rs2 = DBAccess.getRows(sql, "_TEMP_", fkey);
//            } else {
//                rs2 = DBAccess.getRows(sql);
//            }
//            if (rs2.next()) {//exista ceva
//                String valoare = rs2.getString("valoare2");
//                if (!valoare.equals("")) {
//					String s = Common.encode().decrypt(valoare);
//					long l = Long.parseLong(s);
//					Date rd = new Date(l);
//					return rd;
//                }
//            }
//            rs2.close();
//        } catch (Exception e) {
//            System.err.println("" + e.getCause());
//            return new Date();
//        }
//        return new Date();
//    }
//    
//    public static String getModulesDb(String fkey) {
//        String m = "0";
//        try {
//            String sql = "SELECT * FROM facturi_stornate";
//            ResultSet rs2 = null;
////            if (!Common.isClient()) {
////                rs2 = DBAccess.getRows(sql, "_TEMP_", fkey);
////            } else {
////                rs2 = DBAccess.getRows(sql);
////            }
//            rs2 = DBAccess.getRows(sql);
//            if (rs2.next()) {//exista ceva
//                String valoare = rs2.getString("valoare1");
//                if (!valoare.equals("")) {
//                    valoare = Common.encode().decrypt(valoare);
//                    String arr[] = valoare.split(",");
//                    if(arr.length == 9) {
//                        m = arr[6];
//                    }
//                }
//            }
//        } catch(Exception e){
//            e.printStackTrace();
//        }
//        return m;
//    }
//
//   public static boolean vKUpdateModules(String fkey, String modules) {
//
//		if (Common.isClient()) {
//			ClientFactory factory = sleekbill.xmlrpc.Client.getFactory();
//			Handlers hs = (Handlers) factory.newInstance(Handlers.class);
//			return hs.vKUpdateAccess(fkey, modules);
//		}
//
//        String sql = "SELECT * FROM facturi_stornate";
//        try {
//
//            ResultSet rs = DBAccess.getRows(sql, "_TEMP_", fkey);
//            if (rs.next()) {
//                String valoare = rs.getString("valoare1");
//                //System.err.println("valoare = "+valoare);
//                if (!valoare.equals("")) {
//                    valoare = Common.encode().decrypt(valoare);
//                    String arr[] = valoare.split(",");
//                    arr[1] = "1";   //configurat
//                    valoare = Common.encode().encrypt(arr[0] + "," + arr[1] + ","
//							+ arr[2] + "," + arr[3] + "," + arr[4] + "," +
//							arr[5] + "," + modules + "," + arr[7] + "," + arr[8]);
//                }
//
//				sql = "UPDATE facturi_stornate SET valoare1 = ? ";
//                DBAccess.uidRow(sql, new Object[]{valoare}, "_TEMP_", fkey);
//                rs.close();
//            }
//
//        } catch (SQLException ex) {
//            ex.printStackTrace();
//            return false;
//        }
//        return true;
//    }
//
//    public static String getMaxClientsDb(String fkey) {
//        String m = "0";
//        try {
//            String sql = "SELECT * FROM facturi_stornate";
//            ResultSet rs2 = null;
//            if (!Common.isClient()) {
//                rs2 = DBAccess.getRows(sql, "_TEMP_", fkey);
//            } else {
//                rs2 = DBAccess.getRows(sql);
//            }
////            rs2 = DBAccess.getRows(sql);
//            if (rs2.next()) {//exista ceva
//                String valoare = rs2.getString("valoare1");
//                if (!valoare.equals("")) {
//                    valoare = Common.encode().decrypt(valoare);
//                    String arr[] = valoare.split(",");
//                    if(arr.length == 9) {
//                        m = arr[8];
//                    }
//                }
//            }
//        } catch(Exception e){
//            e.printStackTrace();
//        }
//        return m;
//    }
//    
//    public static Date getConfigDate() {
//        try {
//            String fkey = DBAccess.getFirmakey();
//            String sql = "SELECT * FROM facturi_stornate";
//            ResultSet rs2 = null;
//            if (!Common.isClient()) {
//                rs2 = DBAccess.getRows(sql, "_TEMP_", fkey);
//            } else {
//                rs2 = DBAccess.getRows(sql);
//            }
//            if (rs2.next()) {//exista ceva
//                String valoare = rs2.getString("valoare");
//                String configurat = "", cod = "";
//                if (!valoare.equals("")) {
//                    valoare = Common.encode().decrypt(valoare);
//                    String arr[] = valoare.split(",");
//                    cod = arr[0];
//                    configurat = arr[1];   //configurat
//                }
//                if (configurat.equals("1")) {//configurat
//                        String s = Common.encode().decrypt(rs2.getString("data_stornarii"));
//
//                        long l = Long.parseLong(s);
//                        Date rd = new Date(l);
//                        return rd;
//                }
//            }
//            rs2.close();
//        } catch (Exception e) {
//            System.err.println("" + e.getCause());
//            return new Date(0);
//        }
//        return new Date(0);
//    }
//
//	//2011
//    public static int vKCheck2011(String fkey, String cif) {
//        try {
//            //todo undo           
////            if(true) return 5;
//            String sql = "SELECT * FROM facturi_stornate";
//            ResultSet rs2 = null;
//            if (!Common.isClient()) {
//                rs2 = DBAccess.getRows(sql, "_TEMP_", fkey);
//            } else {
//                rs2 = DBAccess.getRows(sql);
//            }
//            if (rs2.next()) {//exista ceva
//                String valoare = rs2.getString("valoare");
//                String configurat = "", cod = "";
//                if (!valoare.equals("")) {
//                    valoare = Common.encode().decrypt(valoare);
//                    String arr[] = valoare.split(",");
//                    cod = arr[0];
//                    configurat = arr[1];   //configurat
//                }
//                if (configurat.equals("1")) {//configurat
//                    //verificare every time
//
//					boolean equal = Common.getC2011(cif, 1).equals(cod);
//					if(!equal) {
//						equal = Common.getC2011(cif, 2).equals(cod);
//					}
//					if(!equal) {
//						equal = Common.getC2011(cif, 3).equals(cod);
//					}
//
////                    if (!Common.getC2011(cif, Integer.parseInt(Common.getVersiune())).equals(cod)) {
//					if (!equal) {
//                        String s = Common.encode().decrypt(rs2.getString("data_stornarii"));
//
//                        long l = Long.parseLong(s);
//                        Common.setDataPrimaCfg(l);
//                        int nr_zile = (int) ((System.currentTimeMillis() - l) / (1000 * 60 * 60 * 24)) + 1;
//                        //System.err.println("nr_zile = "+nr_zile+"   30-nr_zile = "+(30-nr_zile));
//                        if (nr_zile < 0) {
//                            nr_zile = 1;
//                            //schimbam data cu data de azi
//                            String new_date = System.currentTimeMillis() + "";
//                            String new_date_enc = Common.encode().encrypt(new_date);
//                            String query = "UPDATE facturi_stornate SET data_stornarii = " + Common.prepareString(new_date_enc);
//                            if (!Common.isClient()) {
//                                DBAccess.uidRow(query, "_TEMP_", fkey);
//                            } else {
//                                DBAccess.uidRow(query);
//                            }
//                        }
//                        if (!Common.isFirmaTest()) {
//                            long it = Common.getInstallationTime();
//                            long now = System.currentTimeMillis();
//                            long deltaDataInstalarii = (now - it) / (1000 * 60 * 60 * 24);
//                            nr_zile = 60 - deltaDataInstalarii >= 30 ? nr_zile : 31 - nr_zile < 60 - deltaDataInstalarii ? nr_zile : 31 - 60 + (int) deltaDataInstalarii;
//                        }
//                        return nr_zile;
//                    } else {
//                        return -1;//fine
//                    }
//                } else {
//                    return 1111; //not fine?  > 45 ?
//                }
//            }
//            rs2.close();
//        } catch (Exception e) {
//            System.err.println("" + e.getCause());
//            return 1000; //  > 45
//        }
//        return 1000;
//    }
//	    
//	public static String getC2011(String cif, int v) {
//        cif = cif.toLowerCase().replaceAll("ro", "").trim();
//        cif += cif + v;
//        cif = encode().encrypt(cif);
//
//        byte[] defaultBytes = cif.getBytes();
//        try {
//            MessageDigest algorithm = MessageDigest.getInstance("MD5");
//            algorithm.reset();
//            algorithm.update(defaultBytes);
//            byte messageDigest[] = algorithm.digest();
//
//            StringBuffer hexString = new StringBuffer();
//            for (int i = 0; i < messageDigest.length; i++) {
//                hexString.append(Integer.toHexString(0xFF & messageDigest[i]));
//            }
////            String foo = messageDigest.toString();
//
//            cif = hexString + "";
//            //System.err.println(cif.substring(0,10).toUpperCase());
//            return cif.substring(0, 10).toUpperCase();
//        } catch (NoSuchAlgorithmException nsae) {
//        }
//        return "";
//    }
//	//~2011
//
//    public static Date getServerDate() {
//        if (isServer()) {
//            return new Date();
//        } else if (isClient()) {
//            ClientFactory factory = sleekbill.xmlrpc.Client.getFactory();
//            Handlers hs = (Handlers) factory.newInstance(Handlers.class);
//            return hs.getServerDate();
//        }
//        return null;
//    }
//
//    public static String[] getServerVersion() {
//        if (isServer()) {
//            return new String[]{VERSION, AN};
//        } else if (isClient()) {
//            ClientFactory factory = sleekbill.xmlrpc.Client.getFactory();
//            Handlers hs = (Handlers) factory.newInstance(Handlers.class);
//            return hs.getServerVersion().toArray(new String[]{""});
//        }
//        return null;
//    }
//
//    public static boolean login(String user, String pass, boolean remember) {
//        try {
//
//            User loggedUserTmp = User.getLoggedUser(user, pass);
//            if (loggedUserTmp != null) {
//                Common.setLoggedUser(loggedUserTmp);
//                if (Common.isServer()) {
//                    DBAccess.uidRow("update users set remember = 'n'");
//                } else if (Common.isClient()) {
//                    Config c = new Config();
//                    c.set("client_user", "");
//                    c.set("client_pass", "");
//                }
//                if (remember) {
//                    if (Common.isServer()) {
//                        DBAccess.uidRow("update users set remember='y' where user_id=" + loggedUserTmp.getId());
//                    } else if (Common.isClient()) {
//                        Config c = new Config();
//                        c.set("client_user", loggedUserTmp.getUserName());
//                        c.set("client_pass", Common.getEncrypter().encrypt(loggedUserTmp.getParola()));
//                    }
//                }
//                return true;
//            } else {
//                return false;
//            }
//        } catch (SQLException ex) {
//            ex.printStackTrace();
//        }
//        return false;
//    }
//
//
//    public static int getSerieId(char tipDocument, String serie) {
//        return (Integer) DBAccess.getRows("select serie_id from serii where tip_serie=? and serie=?", new Object[]{tipDocument, serie}, new ResultSetHandler() {
//
//            @Override
//            public Object handle(ResultSet rs) throws SQLException {
//                if (rs.next()) {
//                    return rs.getInt(1);
//                }
//                return 0;
//            }
//        });
//    }
//
//    public static int getSerie(char tipDocument, String cifClient) {
//        switch (tipDocument) {
//            case 'c':
//                return (Integer) DBAccess.getRows("select serie_id from incasari where anulata!='y' and chitanta='y' and "
//                        + "cif_client=? order by incasare_id desc limit 1", new Object[]{cifClient}, new OneIntegerResultSetHandler());
//            case 'n':
//            case 'a':
//            case 's':
//                return (Integer) DBAccess.getRows("select serie_id from facturi where anulata!='y' and "
//                        + "client_cif=? order by factura_id desc limit 1", new Object[]{cifClient}, new OneIntegerResultSetHandler());
//            case 'z':
//                return (Integer) DBAccess.getRows("select serie_id from avize where anulata!='y' and "
//                        + "client_cif=? order by aviz_id desc limit 1", new Object[]{cifClient}, new OneIntegerResultSetHandler());
//            case 'p':
//                return (Integer) DBAccess.getRows("select serie_id from proforme where anulata!='y' and "
//                        + "client_cif=? order by proforma_id desc limit 1", new Object[]{cifClient}, new OneIntegerResultSetHandler());
//
//            default:
//                return 0;
//        }
//    }
//
//    public static int getSerieImplicita(char docType)throws SQLException {
//        if (docType == 'n') {
//            docType = 'f';
//        } else if (docType == 'z') {
//            docType = 'a';
//        } else if (docType != 'p' && docType != 'c') {
//            docType = 'f';
//        }
//        String query = "SELECT serie_id FROM serii WHERE tip_serie = ? AND implicit = ?";
//        return (Integer) DBAccess.getRows(query, new Object[]{docType, 'y'}, new OneIntegerResultSetHandler());
//    }
//
//    public static int getSerieClientNou(char tipDocument) {
//        switch (tipDocument) {
//            case 'n':
//            case 'a':
//            case 's':
//                return (Integer) DBAccess.getRows("select  serie_id,client_id,client_cif from facturi where client_id = (select max(client_id) from facturi) order by factura_id limit 1",
//                        null, new ResultSetHandler() {
//
//                    @Override
//                    public Object handle(ResultSet rs) throws SQLException {
//                        if (rs.next()) {
//                            return rs.getInt(1);
//                        }
//                        return 0;
//                    }
//                });
//            case 'z':
//                return (Integer) DBAccess.getRows("select  serie_id,client_id,client_cif from avize where client_id = (select max(client_id) from avize) order by aviz_id limit 1",
//                        null, new ResultSetHandler() {
//
//                    @Override
//                    public Object handle(ResultSet rs) throws SQLException {
//                        if (rs.next()) {
//                            return rs.getInt(1);
//                        }
//                        return 0;
//                    }
//                });
//            case 'p':
//                return (Integer) DBAccess.getRows("select  serie_id,client_id,client_cif from proforme where client_id = (select max(client_id) from proforme) order by proforma_id limit 1",
//                        null, new ResultSetHandler() {
//
//                    @Override
//                    public Object handle(ResultSet rs) throws SQLException {
//                        if (rs.next()) {
//                            return rs.getInt(1);
//                        }
//                        return 0;
//                    }
//                });
//            case 'c':
////                return (Integer) DBAccess.getRows("select incasari.serie_id,clienti.client_id,incasari.cif_client from incasari left join clienti on incasari.cif_client=clienti.cif group by client_id"
////                        + " having clienti.client_id = max(clienti.client_id)  order by incasari.incasare_id limit 1",
////                        null, new ResultSetHandler() {
//            	String query = "SELECT inc.serie_id, cl.client_id, inc.cif_client , inc.incasare_id " +
//					"FROM incasari AS inc " +
//					"INNER JOIN (SELECT client_id, cif FROM clienti ORDER BY client_id DESC LIMIT 1) AS cl ON(inc.cif_client=cl.cif) " +
//					"ORDER BY inc.incasare_id DESC " +
//					"LIMIT 1";
//            	return (Integer) DBAccess.getRows(query, null, new ResultSetHandler() {
//
//                    @Override
//                    public Object handle(ResultSet rs) throws SQLException {
//                        if (rs.next()) {
//                            return rs.getInt(1);
//                        }
//                        return 0;
//                    }
//                });
//
//            default:
//                return 0;
//        }
//    }
//
//    public static Integer getTaxGroupEcr(int tvaId) {
//        if (tvaId == -1) {
//            return null;
//        }
//        return (Integer) DBAccess.getRows("select grupa_tva_casa from cote_tva where tva_id = ?", new Object[]{tvaId}, new ResultSetHandler() {
//
//            @Override
//            public Object handle(ResultSet rs) throws SQLException {
//                if (rs.next()) {
//                    try {
//                        int r = Integer.parseInt(rs.getString(1));
//                        return r;
//                    } catch (NumberFormatException n) {
//                        return null;
//                    }
//                }
//                return null;
//            }
//        });
//    }
//
//    public static boolean existaTaxGroupEcrSetat(){
//        int nr = -1;
//        try {
//            ResultSet rs = DBAccess.getRows("select count(*) as nr from cote_tva where grupa_tva_casa != ''");
//            if (rs.next()) {
//                nr = rs.getInt("nr");
//            }
//        } catch (SQLException ex) {
//            ex.printStackTrace();
//            return false;
//        }
//        return (nr > 0) ? true : false;
//    }
//
//    public static boolean isECRSetup() {
//        return !"0".equals(new Config().get("ecr"));
//    }
//
//    public static boolean isValidDate(java.util.Date dataDoc) throws SQLException {
//
//        GregorianCalendar c = new GregorianCalendar();
//        c.setTime(dataDoc);
//        c.set(GregorianCalendar.HOUR_OF_DAY, 0);
//        c.set(GregorianCalendar.MINUTE, 0);
//        c.set(GregorianCalendar.SECOND, 0);
//        c.set(GregorianCalendar.MILLISECOND, 0);
//
//        java.sql.Date dMax = StocArticoleSalvate.getMaxData();
//
//        if (dMax == null) {
//            return true;
//        }
//        if (dMax.compareTo(dataDoc) <= 0) {
//            return true;
//        }
//
//        return false;
//
//    }
//
//    public static int getStocPrecision() {
//        return STOC_PRECISION;
//    }
//
//    public static int getLastUsedGestiuneId() {
//        return DBAccess.getInt("select case when primitor_gestiune_id<=0"
//                + " then predator_gestiune_id"
//                + " else primitor_gestiune_id"
//                + " end"
//                + " from TRANZACTII"
//                + " where tranzactie_id = (select max(tranzactie_id) from tranzactii)", null);
//    }
//
//    public static String getLastGestiune() {
//        return (String) DBAccess.getRows("select denumire from gestiuni where gestiune_id=?", new Object[]{getLastUsedGestiuneId()}, new ResultSetHandler() {
//
//            @Override
//            public Object handle(ResultSet rs) throws SQLException {
//                if (rs.next()) {
//                    return rs.getString(1);
//                }
//                return "";
//            }
//        });
//    }
//
//    public static int getLastUsedGestiuneId(int tip) {
//        return DBAccess.getInt("select case when primitor_gestiune_id<=0"
//                + " then predator_gestiune_id"
//                + " else primitor_gestiune_id"
//                + " end"
//                + " from TRANZACTII"
//                + " where tranzactie_id = (select max(tranzactie_id) from tranzactii t"
//                + " left join gestiuni g1 on t.predator_gestiune_id=g1.gestiune_id left join gestiuni g2 on t.primitor_gestiune_id=g2.gestiune_id where g1.tip=? or g2.tip=?)",
//                new Object[]{tip, tip});
//    }
//
//    public static String getLastGestiune(int tip) {
//        return (String) DBAccess.getRows("select denumire from gestiuni where gestiune_id=?", new Object[]{getLastUsedGestiuneId(tip)}, new ResultSetHandler() {
//
//            @Override
//            public Object handle(ResultSet rs) throws SQLException {
//                if (rs.next()) {
//                    return rs.getString(1);
//                }
//                return "";
//            }
//        });
//    }
//
//    public static BigDecimal getPretGestiune(String id, String gestiune) {
//        Gestiune g = Gestiune.get(gestiune);
//        if (g == null) {
//            return null;
//        }
//        BigDecimal r = null;
//        switch (g.getTip()) {
//            case Gestiune.TIP_GESTIUNE_DEPOZIT:
//                r = (BigDecimal) DBAccess.getRows("select tdr.pret_iesire from tranzactii_detalii_reale tdr left join tranzactii_detalii td on tdr.tranzactie_detaliu_id=td.tranzactie_detaliu_id left join tranzactii t on t.tranzactie_id=td.tranzactie_id "
//                        + "left join gestiuni g on g.gestiune_id=t.predator_gestiune_id where td.articol_id=? and t.tip_doc='FCT' order by td.tranzactie_detaliu_id desc", new Object[]{id}, new ResultSetHandler() {
//
//                    @Override
//                    public Object handle(ResultSet rs) throws SQLException {
//                        if (rs.next()) {
//                            return new BigDecimal(rs.getString(1));
//                        }
//                        return null;
//                    }
//                });
//                if (r == null) {
//                    try {
//                        r = StocArticol.getMinPrice(g.getId(), Integer.valueOf(id));
//                    } catch (Exception e) {
//                        e.printStackTrace();
//                    }
//                }
//                break;
//            case Gestiune.TIP_GESTIUNE_MAGAZIN:
//                r = (BigDecimal) DBAccess.getRows("select pret_cu_adaos from stoc_articole where cantitate>0 and articol_id=? and gestiune_id=?", new Object[]{id, g.getId()}, new ResultSetHandler() {
//
//                    @Override
//                    public Object handle(ResultSet rs) throws SQLException {
//                        if (rs.next()) {
//                            return new BigDecimal(rs.getString(1));
//                        }
//                        return null;
//                    }
//                });
//        }
//        return r;
//    }
//
//    public static BigDecimal getPretMagazin(String id) {
//        BigDecimal r = (BigDecimal) DBAccess.getRows("select pret_cu_adaos from stoc_articole where cantitate>0 and articol_id=? and gestiune_id>0", new Object[]{id}, new ResultSetHandler() {
//
//            @Override
//            public Object handle(ResultSet rs) throws SQLException {
//                if (rs.next()) {
//                    return new BigDecimal(rs.getString(1));
//                }
//                return null;
//            }
//        });
//        return r;
//    }
//
//    public static int getLastTranzactieId() {
//        return (Integer) DBAccess.getRows("select max(tranzactie_id) tid from tranzactii ", null, new ResultSetHandler() {
//
//            @Override
//            public Object handle(ResultSet rs) throws SQLException {
//                if (rs.next()) {
//                    return rs.getInt(1);
//                }
//                return 0;
//            }
//        });
//    }
//
//    public static int getLastTranzactieIdTip(int tip, String tipDoc) {
//        return (Integer) DBAccess.getRows("select max(t.tranzactie_id) tid from tranzactii t left join gestiuni g on t.primitor_gestiune_id=g.gestiune_id "
//                + " where g.tip=? and t.tip_doc=?", new Object[]{tip, tipDoc}, new ResultSetHandler() {
//
//            @Override
//            public Object handle(ResultSet rs) throws SQLException {
//                if (rs.next()) {
//                    return rs.getInt(1);
//                }
//                return 0;
//            }
//        });
//    }
//
//    //sold inainte de date
//    public static BigDecimal getSold(Date date, int gestiuneId) {
//        return (BigDecimal) DBAccess.getRows("select total(intrare)-total(iesire) as sold from ("
//                + " select distinct tdr.rowid,date(data_operarii) data_io,(case when primitor_gestiune_id>0 then tdr.pret_cu_adaos*tdr.cantitate else 0 end) as intrare, (case when predator_gestiune_id>0 then tdr.pret_iesire*tdr.cantitate else 0 end) as  iesire  from tranzactii_detalii_reale tdr"
//                + " left join tranzactii_detalii td on td.tranzactie_detaliu_id=tdr.tranzactie_detaliu_id"
//                + " left join tranzactii t on t.tranzactie_id=td.tranzactie_id"
//                + " left join serii s on t.serie_id=s.serie_id"
//                + " where (primitor_gestiune_id=? or  predator_gestiune_id=?)"
//                + " and data_io<?"
//                + " order by data_io desc,intrare desc)", new Object[]{gestiuneId, gestiuneId, Common.SQLITE_DATE_FORMAT.format(date)}, new ResultSetHandler() {
//
//            @Override
//            public Object handle(ResultSet rs) throws SQLException {
//                if (rs.next()) {
//                    return rs.getBigDecimal(1);
//                }
//                return BigDecimal.ZERO;
//            }
//        });
//    }
//
//    public static BigDecimal getSoldClient(String denumireClient, String cifClient, String data, String moneda, boolean includeProforme) {
//        cifClient = cifClient.replaceAll("RO", "").replaceAll("ro", "").replaceAll("Ro", "").replaceAll("rO", "");
//        BigDecimal sold = getSoldClient(denumireClient, cifClient, data, moneda);
//        if (includeProforme) {
//            try {
//                String whereDataEmitere = "";
//                String whereMoneda = "";
//                String col = "";
//                if (!data.trim().isEmpty()) {
//                    whereDataEmitere += " and date(data_emiterii) < date('" + data + "') ";
//                } else {
//                    whereDataEmitere += " and 1=1 ";
//                }
//
//                if (moneda.trim().isEmpty()) {
//                    whereMoneda = " and 3=3 ";
//                    col = "v_valoare_totala";
//                } else {
//                    whereMoneda = " and moneda = '" + moneda + "' ";
//                    col = "valoare_totala";
//                }
//                ResultSet rs = DBAccess.getRows("select ifnull(sum(" + col + "), 0) from proforme p "
//                    + "left join incasari_proforme ip on (p.proforma_id = ip.proforma_id) "
//                    + "where ip.proforma_id isnull and anulata='n' and client_denumire = ? and trim(client_cif) LIKE ? " + whereMoneda + whereDataEmitere, new Object[]{denumireClient, "%"+cifClient});
//                if (rs.next()) {
//                    sold = sold.add(rs.getBigDecimal(1));
//                    sold = sold.setScale(2, RoundingMode.HALF_UP);
//                }
//                rs.close();
//
//            } catch (SQLException ex) {
//                ex.printStackTrace();
//                return BigDecimal.ZERO.setScale(2, RoundingMode.HALF_UP);
//            }
//        }
//        return sold;
//    }
//
//    public static BigDecimal getSoldClient(String denumireClient, String cifClient, String data, String moneda) {
//        cifClient = cifClient.replaceAll("RO", "").replaceAll("ro", "").replaceAll("Ro", "").replaceAll("rO", "");
//        BigDecimal sold = BigDecimal.ZERO.setScale(2, RoundingMode.HALF_UP);
//        try {
//            String whereDataEmitere = "";
//            String whereDataIncasare = "";
//            String whereMoneda = "";
//            String columnFact = "";
//            String columnInc = "";
//
//            if (!data.trim().isEmpty()) {
//                whereDataEmitere += " and date(data_emiterii) < date('" + data + "') ";
//                whereDataIncasare += " and date(data_incasare) < date('" + data + "') ";
//            } else {
//                whereDataEmitere += " and 1=1 ";
//                whereDataIncasare += " and 2=2 ";
//            }
//
//            if (moneda.trim().isEmpty()) {
//                whereMoneda = " and 3=3 ";
//                columnFact = "v_valoare_totala";
//                columnInc = "v_valoare_incasata";
//            } else {
//                whereMoneda = " and moneda = '" + moneda + "' ";
//                columnFact = "valoare_totala";
//                columnInc = "valoare";
//            }
//
//            ResultSet rs = DBAccess.getRows("select total("+columnFact+")-(select total("+columnInc+") from incasari where anulata='n' and denumire_client = ? "
//                + "and trim(cif_client) LIKE ? " + whereDataIncasare + whereMoneda + "), client_precizie "
//                + "from facturi "
//                + "where anulata='n' and client_denumire = ? and trim(client_cif) LIKE ? " + whereMoneda + whereDataEmitere, new Object[]{denumireClient, "%"+cifClient, denumireClient, "%"+cifClient});
//            if (rs.next()) {
//                sold = rs.getBigDecimal(1);
//                sold = sold.setScale(rs.getInt(2), RoundingMode.HALF_UP);
//            }
//            rs.close();
//
//        } catch (SQLException ex) {
//            ex.printStackTrace();
//            return BigDecimal.ZERO.setScale(2, RoundingMode.HALF_UP);
//        }
//        return sold;
//    }
//
//    public static String getGestiune(int facturaArticolId) {
//        String query =
//                "SELECT g.denumire AS gestiune "
//                + "FROM tranzactii_detalii AS td "
//                + "INNER JOIN tranzactii AS t ON(t.tranzactie_id = td.tranzactie_id) "
//                + "INNER JOIN gestiuni AS g ON(g.gestiune_id = t.predator_gestiune_id) "
//                + "WHERE "
//                + "td.fa_id = ? "
//                + "GROUP BY t.tranzactie_id ";
//
//        return (String) DBAccess.getRows(query, new Object[]{facturaArticolId}, new ResultSetHandler() {
//
//            @Override
//            public Object handle(ResultSet rs) throws SQLException {
//                if (rs.next()) {
//                    return rs.getString(1);
//                }
//                return null;
//            }
//        });
//    }
//
//    public static String getClientEmail(int doc_id, char tip_doc) {
//        String query = "";
//        switch (tip_doc) {
//            case 'f':
//                query = "SELECT email FROM clienti c LEFT JOIN facturi f ON c.client_id = f.client_id WHERE f.factura_id = " + doc_id;
//                break;
//            case 'p':
//                query = "SELECT email FROM clienti c LEFT JOIN proforme p ON c.client_id = p.client_id WHERE p.proforma_id = " + doc_id;
//                break;
//            case 'a':
//                query = "SELECT email FROM clienti c LEFT JOIN avize a ON c.client_id = a.client_id WHERE a.aviz_id = " + doc_id;
//                break;
//            default:
//                return "";
//
//        }
//        String vs = "";
//        ResultSet rs = null;
//        try {
//            rs = DBAccess.getRows(query);
//            if (rs.next()) {
//                vs = rs.getString("email");
//            }
//            rs.close();
//        } catch (SQLException ex) {
//            ex.printStackTrace();
//        }
//        return vs;
//    }
//
//    public static int getNumberOfArticles() {
//        String query = "SELECT count(*) as number_products FROM articole WHERE deleted = 'n' AND is_serviciu = 0";
//        int vs = 0;
//        ResultSet rs = null;
//        try {
//            rs = DBAccess.getRows(query);
//            if (rs.next()) {
//                vs = rs.getInt("number_products");
//            }
//            rs.close();
//        } catch (SQLException ex) {
//            ex.printStackTrace();
//        }
//        return vs;
//    }
//
//    public static CotaTva getCota(String s) {
//        CotaTva cote[] = getCoteTva();
//        for (int i = 0; i < cote.length; i++) {
//            String dc = cote[i].toString().toLowerCase();
//            String pc = cote[i].getProcent() + "";
//            s = s.toLowerCase();
//            if (dc.equals(s) || (dc.contains(s) && s.length() >= 3) || pc.equals(s)) {
//                return cote[i];
//            }
//        }
//        return null;
//    }
//
//    public static boolean existaArticol(String denArt, String gestiune) {
//        if (gestiune != null && !gestiune.isEmpty()) {
//            return ((Integer) DBAccess.getRows("select sa.articol_id from articole a left join stoc_articole sa "
//                    + " on a.articol_id=sa.articol_id left join gestiuni g on g.gestiune_id=sa.gestiune_id where a.denumire=? and g.denumire=? and a.deleted!='y'", new Object[]{denArt, gestiune}, new OneIntegerResultSetHandler())) > 0;
//        } else {
//            return ((Integer) DBAccess.getRows("select sa.articol_id from articole a left join stoc_articole sa "
//                    + " on a.articol_id=sa.articol_id where a.denumire=? and a.deleted!='y'", new Object[]{denArt}, new OneIntegerResultSetHandler())) > 0;
//        }
//    }
//
//    public static boolean existaFurnizori() {
//        return (Integer) DBAccess.getRows("select furnizor_id from furnizori where deleted!='y'", null, new OneIntegerResultSetHandler()) > 0;
//    }
//
//    public static boolean existaClienti() {
//        return (Integer) DBAccess.getRows("select client_id from clienti where deleted!='y'", null, new OneIntegerResultSetHandler()) > 0;
//    }
//
//    public static boolean existaAngajati() {
//        return (Integer) DBAccess.getRows("select angajat_id from angajati where deleted!='y'", null, new OneIntegerResultSetHandler()) > 0;
//    }
//
//    public static boolean existaArticolCuCod(String codProd) {
//        return ((Integer) DBAccess.getRows("select articol_id from articole where cod like ? and deleted!='y'", new Object[]{codProd}, new OneIntegerResultSetHandler())) > 0;
//    }
//
//    public static boolean existaArticolCuCod(String denumire, String codProd) {
//        return ((Integer) DBAccess.getRows("select articol_id from articole where denumire like ? and cod like ? and deleted!='y'", new Object[]{denumire, codProd}, new OneIntegerResultSetHandler())) > 0;
//    }
//
//    public static boolean existaAltArticolCuCod(String denumire, String codProd) {
//        return ((Integer) DBAccess.getRows("select articol_id from articole where denumire not like ? and cod like ? and deleted!='y'", new Object[]{denumire, codProd}, new OneIntegerResultSetHandler())) > 0;
//    }
//
//    public static boolean existaArticol(String denumire, int id) {
//        return ((Integer) DBAccess.getRows("select articol_id from articole where denumire like ? and articol_id != ? and deleted!='y'", new Object[]{denumire, id}, new OneIntegerResultSetHandler())) > 0;
//    }
//
//    public static boolean existaArticol(String denumire) {
//        return ((Integer) DBAccess.getRows("select articol_id from articole where denumire like ? and deleted!='y'", new Object[]{denumire}, new OneIntegerResultSetHandler())) > 0;
//    }
//
//    public static Date getDateLastDoc(String tipDoc) {
//        Date d = (Date) DBAccess.getRows("select data from tranzactii where tip_doc=? and date(data)<=date('now') order by date(data) desc limit 1", new Object[]{tipDoc}, new ResultSetHandler() {
//
//            @Override
//            public Object handle(ResultSet rs) throws SQLException {
//                try {
//                    if (rs.next()) {
//                        return SQLITE_DATE_FORMAT.parse(rs.getString("data"));
//                    }
//                } catch (ParseException pe) {
//                    return new Date();
//                }
//                return new Date();
//            }
//        });
//        return d;
//    }
//
//    public static int getTipGestiune(Integer facturaId) {
//        List<Articol> articole = Articol.getFacturiArticole("select * from facturi_articole where factura_id=?", new Object[]{facturaId});
//        for (Articol art : articole) {
//            int predatorGestiuneId = (Integer) DBAccess.getRows("select t.predator_gestiune_id from tranzactii_detalii td left join tranzactii t on t.tranzactie_id=td.tranzactie_id where td.fa_id=?", new Object[]{art.getFaId()}, new OneIntegerResultSetHandler());
//            Gestiune g = null;
//            try {
//                g = Gestiune.get(predatorGestiuneId);
//            } catch (SQLException ex) {
//                ex.printStackTrace();
//            }
//            if (g != null) {
//                return g.getTip();
//            }
//        }
//        return -1;
//    }
//
//    public static boolean isLastDoc(String tipDocument, String serie, int toCheckId) {
//        String table;
//        if (tipDocument.equals("factura")) {
//            table = "facturi";
//        } else if (tipDocument.equals("aviz")) {
//            table = "avize";
//        } else if (tipDocument.equals("chitanta")) {
//            table = "incasari";
//        } else if (tipDocument.equals("proforma")) {
//            return true;
//        } else {
//            return false;
//        }
//        int id = (Integer) DBAccess.getRows("select rowid from " + table + " where serie=? order by rowid desc limit 1", new Object[]{serie}, new OneIntegerResultSetHandler());
//        if (id == toCheckId) {
//            return true;
//        }
//        return false;
//    }
//
//    public static boolean checkTime() {
//        Date date = new Date();
//        Date lastDateInDb = (Date) DBAccess.getRows("select data from jurnal order by data desc", null, new ResultSetHandler() {
//
//            @Override
//            public Object handle(ResultSet rs) throws SQLException {
//                if (rs.next()) {
//                    try {
//                        return Common.SQLITE_DATE_HOUR_FORMAT.parse(rs.getString(1));
//                    } catch (ParseException ex) {
//                        ex.printStackTrace();
//                    }
//                }
//                return new Date(0);
//            }
//        });
//        if (date.compareTo(lastDateInDb) < 0) {
//            return false;
//        }
//        return true;
//    }
//
//    public static boolean existaArticolPeFacturaNedescarcata(int articolId) {
//        return (Integer) DBAccess.getRows("select fa.articol_id from facturi f left join facturi_articole fa on fa.factura_id=f.factura_id where f.factura_id not in "
//                + "(select f2.factura_id from facturi f2 inner join tranzactii t on f2.serie_id=t.serie_id and f2.numar=t.nr_doc and 'FCT'=t.tip_doc)"
//                + " and fa.articol_id=?", new Object[]{articolId}, new OneIntegerResultSetHandler()) > 0;
//    }
//
//    public static boolean isCIFValid(String cif) {
//
//        String key = "235712357";
//        if (cif == null) {
//            return false;
//        }
//
//        if (cif.toUpperCase().startsWith("RO")) {
//            cif = cif.substring(2);
//            if (cif.startsWith("-")) {
//                cif = cif.substring(1);
//            }
//        }
//        cif = cif.trim();
//        if (cif.length() == 0) {
//            return false;
//        }
//        if (cif.length() > 10) {
//            return false;
//        }
//
//        try {
//            Integer.parseInt(cif);
//        } catch (NumberFormatException e) {
//            return false;
//        }
//
//        String control = cif.substring(cif.length() - 1);
//        String s = new StringBuffer(cif.substring(0, cif.length() - 1)).reverse().toString();
//
//        int total = 0;
//        for (int i = 0; i < key.length(); i++) {
//            int part = 0;
//            if (i < s.length()) {
//                part = Character.digit(s.charAt(i), 10);
//            }
//            total += part * Character.digit(key.charAt(i), 10);
//        }
//
//        total = total * 10;
//        int mod = total % 11;
//
//        if (mod == 10) {
//            mod = 0;
//        }
//
//        if (Integer.parseInt(control) == mod) {
//            return true;
//        }
//
//        return false;
//    }
//
//    public static Client fetchClientByCif(String cif) throws MalformedURLException, IOException {
//    	if(Common.sbUtils != null) {
////    		SBDateFirma dateFirma = sbUtils.fetchClientByCif(cif);
//			SBDateFirma dateFirma = sbUtils.fetchClientByCif(cif, serverDate);
//    		Client client = new Client();
//    		client.setCif(dateFirma.getCif());
//    		client.setDenumire(dateFirma.getDenumire());
//    		client.setAdresa(dateFirma.getAdresa());
//    		client.setJudet(dateFirma.getJudet());
//    		client.setLocalitate(dateFirma.getLocalitate());
//    		client.setReg_com(dateFirma.getNrRegCom());
//    		client.setPlatitorTVA(dateFirma.getPlatitorTva());
//    		return client;
//    	}
//    	return null;
//    	
////        if (true) {
////			try {
////                Client c = fetchClientByCifFromRegCom(cif);
////				if (c.getDenumire() != null) {
////					return c;
////				} else {
////					return fetchClientByCifFromMinisterulFinantelor(cif);
////				}
////			} catch (Exception ex) {
////				//pentru orice eroare pe mfinante se face cautare si pe mfinante
////				return fetchClientByCifFromMinisterulFinantelor(cif);
////			}
////        }
////        return null;
//        
////		return new Client();
////        Client c = fetchClientByCifFromMinFin(cif);
////        if (c.getDenumire() == null || c.getDenumire().isEmpty()) {
////            c = fetchClientByCifFromRegCom(cif);
////        }
////        return c;
//    }
//
//    public static Client fetchClientByCifFromRegCom(String cif) throws MalformedURLException, IOException {
//        final Client client = new Client();
//        cif = cif.toLowerCase().replace("ro", "").trim();
////        try {
//            URL url = new URL("http://recom1-ssl.onrc.ro/cgi-bin/intguest.cgi");
//            URLConnection conn = url.openConnection();
//            conn.setReadTimeout(URLCONNECTION_TIMEOUT);
//            conn.setRequestProperty("Authorization", "Basic " + Base64.encodeBytes("guest:guest".getBytes()));
//
//            conn.setDoOutput(true);
//            String data =
//                    URLEncoder.encode("1", "UTF-8") + "=" + URLEncoder.encode("R", "UTF-8")
//                    + "&" + URLEncoder.encode("o", "UTF-8") + "=" + URLEncoder.encode("7", "UTF-8")
//                    + "&" + URLEncoder.encode("cfiscalf", "UTF-8") + "=" + URLEncoder.encode(cif, "UTF-8")
//                    + "&" + URLEncoder.encode("jud", "UTF-8") + "=" + URLEncoder.encode("99", "UTF-8");
//
//            OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
//            wr.write(data);
//            wr.flush();
//            wr.close();
//            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream(), "ISO-8859-1"));
//            String line;
//            String html = "";
//
//            HTMLEditorKit.ParserCallback callback =
//                    new HTMLEditorKit.ParserCallback() {
//
//                        boolean inFunctiune = false;
//                        boolean foundNew = false;
//
//                        @Override
//                        public void handleText(char[] data, int pos) {
//                            String ds = new String(data);
////                    try {
////                        ds = new String(ds.getBytes(), "UTF-8");
////                    } catch (UnsupportedEncodingException ex) {
////                        ex.printStackTrace();
////                    }
////                    System.out.println(pos+":"+ds);
//
//                            //ds = ds.replace('???', 's').replace('???', 'S').replace('???', 'a').replace('???', 'A').replace('???', 'A').replace('???', 'a').replace('???', 't').replace('???', 'T').replace('???', 'i').replace('???', 'i'); (andrei)
//
//                            if (pos < 3080) {
//                                return;
//                            }
//                            if (pos > 3330 && pos < 3370) {
//                                if (!inFunctiune && client.getDenumire() != null && !client.getDenumire().isEmpty()) {
//                                    if (ds.contains("2.")) {
//                                        foundNew = true;
//                                    }
//                                }
//                                if (!inFunctiune && foundNew && pos > 3340) {
//                                    client.setDenumire("");
//                                    client.setLocalitate("");
//                                    client.setJudet("");
//                                    client.setReg_com("");
//                                }
//                            }
//                            if (client.getDenumire() == null || client.getDenumire().isEmpty()) {
//                                ds = title(ds);
//                                client.setDenumire(ds.trim());
//                            } else if (client.getJudet() == null || client.getJudet().isEmpty()) {
//                                ds = title(ds);
//                                if (ds.indexOf("Judet") < 0) {
//                                    System.err.println("no judet found");
//                                    return;
//                                }
//                                String judet = ds.substring(ds.indexOf(":") + 1, ds.indexOf(","));
//                                String localitate = ds.substring(ds.lastIndexOf(":") + 1, ds.length());
//                                if (localitate.toLowerCase().contains("bucuresti") || localitate.toLowerCase().contains("sector")) {
//                                    localitate = "Bucuresti";
//                                }
//                                if (judet.toLowerCase().contains("bucuresti")) {
//                                    judet = "Bucuresti";
//                                }
//                                client.setJudet(judet.trim());
//                                client.setLocalitate(localitate.trim());
//                            } else if (client.getReg_com() == null || client.getReg_com().isEmpty()) {
//                                client.setReg_com(ds.trim());
//                            } else if (!inFunctiune) {
//                                if (ds.contains("functiune")) {
//                                    inFunctiune = true;
//                                }
//                            }
//                        }
//                    };
//
//            new ParserDelegator().parse(rd, callback, false);
//            rd.close();
//
////        } catch (MalformedURLException ex) {
////            ex.printStackTrace();
////        } catch (IOException ex) {
////            ex.printStackTrace();
////        } catch (Exception e) {
////            e.printStackTrace();
////        }
//
//        return client;
//    }
//    
//    public static Client fetchClientByCifFromOpenAPI(String cif) throws MalformedURLException, IOException {
//
//        Client client = null;
//        StringBuilder cifCurat = new StringBuilder();
//        //curatare cif
//        for (char c : cif.toCharArray()) {
//            if (Character.isDigit(c)) {
//                cifCurat.append(c);
//            }
//        }              
//
//        URL oracle = new URL("http://openapi.ro/api/companies/" + cifCurat + ".json");
//        BufferedReader in = new BufferedReader(new InputStreamReader(oracle.openStream()));
//
//        try {
//            JSONObject jsonObject = new JSONObject(in.readLine());
//            
//            client = new Client();
//            client.setDenumire(jsonObject.getString("name").contains("null")?"":jsonObject.getString("name").toUpperCase());
//            client.setCif(jsonObject.getString("cif").contains("null")?"":CapitalizeFirstLetter(jsonObject.getString("cif")));
//            client.setAdresa(jsonObject.getString("address").contains("null")?"":CapitalizeFirstLetter(jsonObject.getString("address")));
//            client.setJudet(jsonObject.getString("state").contains("null")?"":CapitalizeFirstLetter(jsonObject.getString("state")));
//            client.setLocalitate(jsonObject.getString("city").contains("null")?"":CapitalizeFirstLetter(jsonObject.getString("city")));
//            client.setReg_com(jsonObject.getString("registration_id").contains("null")?"":CapitalizeFirstLetter(jsonObject.getString("registration_id")));
//            client.setPlatitorTVA(jsonObject.getString("vat").contains("0") ? 'n' : 'y');
//        } catch (Exception ex) {
//            client = null;
//        }
//
//        return client;
//    }
//    
//    private static String CapitalizeFirstLetter(String input) {
//
//        input = input.toLowerCase();
//        
//        final StringTokenizer st = new StringTokenizer(input, " ", true);
//        final StringBuilder sb = new StringBuilder();
//
//        while (st.hasMoreTokens()) {
//            String token = st.nextToken();
//            token = String.format("%s%s",
//                    Character.toUpperCase(token.charAt(0)),
//                    token.substring(1));
//            sb.append(token);
//        }
//
//        return sb.toString();
//    }
//
//  
//
//     public static Client fetchClientByCifFromMinisterulFinantelor(String cif) throws MalformedURLException, IOException{
//
//        client = new Client();
//        cif = cif.toLowerCase().replace("ro", "").trim();
//
////        try {
//            URL url = new URL("http://voes.mfinante.ro/codfiscal/pjuridice.html");
//            URLConnection conn = url.openConnection();
//            conn.setReadTimeout(10000);
//            conn.setDoOutput(true);
//            conn.setRequestProperty("User-Agent", "Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.4; en-US; rv:1.9.2.2) Gecko/20100316 Firefox/3.6.2");
//
//            String valoareCookie = "";
//
//            // Get all cookies from the server.
//            // Note: The first call to getHeaderFieldKey() will implicit send
//            // the HTTP request to the server.
//            for (int i = 0;; i++) {
//                String headerName = conn.getHeaderFieldKey(i);
//                String headerValue = conn.getHeaderField(i);
//
//                if (headerName == null && headerValue == null) {
//                    // No more headers
//                    break;
//                }
//                if ("Set-Cookie".equalsIgnoreCase(headerName)) {
//                    // Parse cookie
//                    String[] fields = headerValue.split(";\\s*");
//
//                    String cookieValue = fields[0];
//                    String expires = null;
//                    String path = null;
//                    String domain = null;
//                    boolean secure = false;
//
//                    // Parse each field
//                    for (int j = 1; j < fields.length; j++) {
//                        if ("secure".equalsIgnoreCase(fields[j])) {
//                            secure = true;
//                        } else if (fields[j].indexOf('=') > 0) {
//                            String[] f = fields[j].split("=");
//                            if ("expires".equalsIgnoreCase(f[0])) {
//                                expires = f[1];
//                            } else if ("domain".equalsIgnoreCase(f[0])) {
//                                domain = f[1];
//                            } else if ("path".equalsIgnoreCase(f[0])) {
//                                path = f[1];
//                            }
//                        }
//                    }
//                    valoareCookie = cookieValue;
//                    break;
//                }
//            }            
//
//            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream(), "ISO-8859-1"));
//            String cap = "";
//            String theLine="";
//            while ((theLine = rd.readLine()) != null) {
//                if(theLine.contains("cod unic de identificare")){
//                   cap = theLine.substring(theLine.indexOf('?')+1, theLine.indexOf("class")-2);
//                   break;
//               }
//            }
//            System.out.println(cap);
//            rd.close();
//
//            //Pagina cu informatiile generale
//            URL urlNou = new URL("http://voes.mfinante.ro/codfiscal/codfiscal.html");
//            URLConnection connection = urlNou.openConnection();
//            connection.setReadTimeout(10000);
//            connection.setDoOutput(true);
//            connection.setRequestProperty("Cookie", valoareCookie);
//            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.4; en-US; rv:1.9.2.2) Gecko/20100316 Firefox/3.6.2");
//
//            String data = URLEncoder.encode("cod", "UTF-8") + "=" + URLEncoder.encode(cif, "UTF-8") + "&" + cap;
//            OutputStreamWriter wr = new OutputStreamWriter(connection.getOutputStream());                                  
//            wr.write(data);
//            wr.flush();
//            wr.close();
//
//            BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream(), "UTF-8"));
//
//            EditorKit callback = new EditorKit();
//            new ParserDelegator().parse(reader, callback, true);
//            String anSelectat = callback.getAnSelectat();
//            reader.close();
//
//            //Pagina cu INDICATORII FINANCIARI
//            URL urlCifre = new URL("http://voes.mfinante.ro/codfiscal/codfiscal.html");
//            URLConnection c = urlCifre.openConnection();
//            c.setReadTimeout(10000);
//            c.setDoOutput(true);
//            c.setRequestProperty("Cookie", valoareCookie);
//            c.setRequestProperty("User-Agent", "Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.4; en-US; rv:1.9.2.2) Gecko/20100316 Firefox/3.6.2");
//   
//            String date = URLEncoder.encode("an", "UTF-8") + "=" + URLEncoder.encode(anSelectat, "UTF-8") +
//                    "&" + URLEncoder.encode("cod", "UTF-8") + "=" + URLEncoder.encode(cif, "UTF-8")+
//                    "&" + cap +
//                    "&" + URLEncoder.encode("method.bilant", "UTF-8") + "=" + URLEncoder.encode("VIZUALIZARE", "UTF-8");
//            
//            OutputStreamWriter writer = new OutputStreamWriter(c.getOutputStream());
//            writer.write(date);
//            writer.flush();
//            writer.close();
//
//            BufferedReader read = new BufferedReader(new InputStreamReader(c.getInputStream(), "ISO-8859-1"));
//
//            HTMLEditorKit.ParserCallback callbackCifre =
//                new HTMLEditorKit.ParserCallback() {
//
//                boolean cifraAfaceriNext = false;
//                boolean nrAngajatiNext = false;
//                boolean tipActivitateNext = false;
//
//                @Override
//                public void handleText(char[] data, int pos) {
//                    String ds = new String(data);
//                    if (pos < 9000) {
//                        return;
//                    }
//
//                    if (cifraAfaceriNext) {
//                        ds = ds.replaceAll(" ", "");
//                        if(!ds.isEmpty() && !ds.equalsIgnoreCase("-"))
//                            client.setCifraAfaceriNeta(ds);
//                        else client.setCifraAfaceriNeta("");
//                        cifraAfaceriNext = false;
//                    }
//                    cifraAfaceriNext = ds.contains("Cifra de afaceri neta") ? true : false;
//
//                    if (nrAngajatiNext) {
//                        ds = ds.replaceAll(" ","");
//                        if(!ds.isEmpty() && !ds.equalsIgnoreCase("-"))
//                            client.setNrAngajati(Integer.parseInt(ds));                        
//                        nrAngajatiNext = false;
//                    }
//                    nrAngajatiNext = ds.contains("salariati") ? true : false;
//
//                    if (tipActivitateNext) {
//                        if(!ds.isEmpty() && !ds.equalsIgnoreCase("-"))
//                            client.setTipActivitate(ds);
//                        else client.setTipActivitate("");
//                        tipActivitateNext = false;
//                    }
//                    tipActivitateNext = ds.contains("CAEN") ? true : false;
//                }
//            };
//
//            new ParserDelegator().parse(read, callbackCifre, true);
//            read.close();
//
////        } catch (MalformedURLException ex) {
////            ex.printStackTrace();
////        } catch (IOException ex) {
////            ex.printStackTrace();
////			String message =
////					"<html><body><div style=\"font-family:Verdana;font-size:12;margin:5px;\"><p style=''text-decoration:none;'' align=''center''>"
////					+ "Datele clientului nu pot fi preluate deoarece Sleek Bill nu este conectat la Internet!"
////					+ "</p> "
////					+ "<p style=''text-decoration:none;'' align=''center''>"
////					+ "Recomandam sa va conectati la Internet sau sa setati din Firewall sau Antivirus acest lucru "
////					+ "pentru a beneficia de numeroase facilitati! "
////					+ "</p></body></html>";
////			new JDialogTips(Common.getMainFrame(), message).setVisible(true);
////        } catch (Exception e) {
////            e.printStackTrace();
////        }
//        return client;
//    }
//
//    public static class EditorKit extends HTMLEditorKit.ParserCallback{
//        boolean inFunctiune = false;
//        boolean foundNew = false;
//        boolean denumireNext = false;
//        boolean adresaNext = false;
//        boolean judetNext = false;
//        boolean regComNext = false;
//        boolean codPostalNext = false;
//        boolean telefonNext = false;
//        boolean platitorTVANext = false;
//        boolean stareSocietateNext = false;
//        String anSelectat = "";
//
//        public EditorKit() {
//        }
//
//        @Override
//        public void handleText(char[] data, int pos) {
//            String ds = new String(data);
//
//            if (pos < 6360) {
//                return;
//            }
//
//            ds = ds.replace((char)350, 'S').replace((char)351, 's').replace((char)350, 'S').replace((char)354, 'T').replace((char)355, 't').replace((char)206, 'I').replace((char)238, 'i');
//            ds  = ds.replace((char)258, 'A').replace((char)259, 'a').replace((char)194, 'A').replace((char)2, 'a');
//
//            ds = ds.replaceAll("null", "");
//            ds = ds.replaceAll((char)160+"","");    //caracter 'surpriza'
//
//            if (denumireNext) {
//                ds = eliminaSpatiileDuble(ds);
//                client.setDenumire(ds);
//                denumireNext = false;
//            }
//            denumireNext = ds.contains("Denumire platitor:") ? true : false;
//
//
//            if (adresaNext) {
//                ds = eliminaSpatiileDuble(ds);
//                ds = aranjeazaString(ds);
//                int ultimaPoz = -1;
//                for (int i = 0; i < ds.length(); i++) {
//                    if ((int) ds.charAt(i) <= 57 && (int) ds.charAt(i) >= 48) //ultima pozitie pe care apare o cifra
//                    {
//                        ultimaPoz = i;
//                    }
//                }
//                if (ultimaPoz != -1) {
//                    if (ds.charAt(ultimaPoz+2) == (char)32) {               //ex: str X 2A Sibiu
//                        client.setAdresa(ds.substring(0, ultimaPoz + 3));
//                        client.setLocalitate(eliminaSpatiileDuble(ds.substring(ultimaPoz + 3, ds.length())));
//                    } else {
//                        client.setAdresa(ds.substring(0, ultimaPoz + 1));
//                        client.setLocalitate(eliminaSpatiileDuble(ds.substring(ultimaPoz + 2, ds.length())));
//                    }
//                } else {
//                    client.setAdresa(ds);
//                    client.setLocalitate("");
//                }
//                adresaNext = false;
//            }
//            adresaNext = ds.contains("Adresa:") ? true : false;
//
//
//            if (judetNext) {
//                ds = ds.toUpperCase().contains("MUNICIPIUL") ? "Bucuresti" : ds;
//                client.setJudet(aranjeazaString(ds).trim());
//                judetNext = false;
//            }
//            judetNext = ds.contains("Judetul:") ? true : false;
//
//
//            if (regComNext) {
//                client.setReg_com(ds.replaceAll(" ", ""));
//                regComNext = false;
//            }
//            regComNext = ds.contains("Numar de inmatriculare la Registrul Comertului:") ? true : false;
//
//
//            if (telefonNext) {
//                client.setTelefon((ds.length() < 6 || ds.isEmpty()) ? "" : ds.trim());
//                telefonNext = false;
//            }
//            telefonNext = ds.contains("Telefon:") ? true : false;
//
//            if (codPostalNext) {
//                ds = ds.replaceAll(" ", "");
//                client.setCodPostal((ds.isEmpty() || ds.equals("-")) ? "" : ds);
//                codPostalNext = false;
//            }
//            codPostalNext = ds.contains("Codul postal:") ? true : false;
//
//            if (platitorTVANext) {
//                client.setPlatitorTVA(ds.contains("NU") ? 'n' : 'y');
//                platitorTVANext = false;
//            }
//            platitorTVANext = ds.contains("Taxa pe valoarea adaugata") ? true : false;
//
//            if (stareSocietateNext) {
//                client.setStareSocietate((ds.isEmpty() || ds.equals("-")) ? "" : ds);
//                stareSocietateNext = false;
//            }
//            stareSocietateNext = ds.contains("Stare societate:") ? true : false;
//
//        }
//
//        @Override
//        public void handleStartTag(HTML.Tag t, MutableAttributeSet a, int pos) {
//            if (t == HTML.Tag.HTML.OPTION) {
//                this.listAttributes(a);
//            }
//        }
//
//        private void listAttributes(AttributeSet attributes) {
//            Enumeration e = attributes.getAttributeNames();
//            while (e.hasMoreElements()) {
//                Object name = e.nextElement();
//                Object value = attributes.getAttribute(name);
//                anSelectat = value.toString();
//                System.out.println(name + "=" + value);
//            }
//        }
//
//        public String getAnSelectat() {
//            return anSelectat;
//        }
//    }
//
//    public static Client fetchClientByCifFromMinFin(String cif) {
//        final Client client = new Client();
//        cif = cif.toLowerCase().replace("ro", "").trim();
//        try {
//            URL url = new URL("http://apt1.mfinante.ro/site/contribuabili/link.jsp?body=/cod.do");
//            URLConnection conn = url.openConnection();
//            conn.setReadTimeout(URLCONNECTION_TIMEOUT);
//            conn.setDoOutput(true);
//            String data = URLEncoder.encode("cod", "UTF-8") + "=" + URLEncoder.encode(cif, "UTF-8");
//
//            OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
//
//            wr.write(data);
//            wr.flush();
//            wr.close();
//            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
//            String line;
//            String html = "";
//            final String c = cif;
//
//            HTMLEditorKit.ParserCallback callback =
//                    new HTMLEditorKit.ParserCallback() {
//
//                        boolean inFunctiune = false;
//                        boolean foundNew = false;
//
//                        @Override
//                        public void handleText(char[] data, int pos) {
//                            String ds = new String(data);
////                    try {
////                        ds = new String(ds.getBytes(), "UTF-8");
////                    } catch (UnsupportedEncodingException ex) {
////                        ex.printStackTrace();
////                    }
//                            System.out.println(pos + ":" + ds);
//
//                            //ds = ds.replace('???', 's').replace('???', 'S').replace('???', 'a').replace('???', 'A').replace('???', 'A').replace('???', 'a').replace('???', 't').replace('???', 'T').replace('???', 'i').replace('???', 'i'); (andrei)
//
//                            if (pos == 1889) {
//                                if (ds.contains(c)) {
//                                    System.out.println("ok found");
//                                }
//                            }
//                            if (pos == 2262) {
//                                client.setDenumire(ds);
//                                for (char c : ds.toCharArray()) {
//                                    System.out.println(c + ":" + (int) c);
//                                }
//                            }
//                            if (pos == 2539) {
//                                Pattern p = Pattern.compile("\\d+\\s.+$");
//                                Matcher m = p.matcher(ds);
//                                String localitate = "";
//                                if (m.find()) {
//                                    Pattern pd = Pattern.compile("\\d+");
//                                    Matcher md = pd.matcher(m.group());
//                                    if (md.find()) {
//                                        localitate = m.group().replace(md.group(), "");
//                                    }
//                                }
//                                client.setLocalitate(localitate.trim());
//                                for (char c : localitate.toCharArray()) {
//                                    System.out.println(c + ":" + (int) c);
//                                }
//
//                            }
////                    else if(pos==)
//                        }
//                    };
//
//            new ParserDelegator().parse(rd, callback, true);
//            rd.close();
//
//        } catch (MalformedURLException ex) {
//            ex.printStackTrace();
//        } catch (IOException ex) {
//            ex.printStackTrace();
//        } catch (Exception e) {
//            e.printStackTrace();
//        }
//
//        return client;
//    }
//
//    public static String eliminaSpatiileDuble(String s){
//        for(int i=0; i<s.length(); i++){
//            if(s.charAt(i) == (char)32 && i!=0 && s.charAt(i-1) == (char)32){
//                s = s.substring(0, i-1).concat(s.substring(i));
//            }
//        }
//        if (s.charAt(0) == (char)32)            //elimina primul caracter daca e spatiu
//            s = s.substring(1);
//
//        if (s.charAt(s.length()-1)==(char)32)   //elimina ultimul caracter daca e spatiu
//            s = s.substring(0, s.length()-1);
//
//        return s;
//    }
//
//    public static String aranjeazaString(String s){
//        String str[] = s.split(" ");
//        s = "";
//        int keep = -1;
//        for(String cuv: str){
//            cuv = cuv.toUpperCase();
//            if(cuv.indexOf('-')!=-1){
//                keep = cuv.indexOf('-');
//                cuv = cuv.substring(0, 1) + cuv.substring(1, keep+1).toLowerCase() + cuv.charAt(keep+1) + cuv.substring(keep+2, cuv.length()).toLowerCase() ;
//            } else {
//                cuv = cuv.substring(0, 1) + cuv.substring(1, cuv.length()).toLowerCase();
//            }
//            s += cuv + " ";
//        }
//        return s;
//    }
//
//    public static String title(String s) {
//        BreakIterator wordBreaker = BreakIterator.getWordInstance();
//        String res = null;
//        wordBreaker.setText(s);
//        int end = 0;
//        for (int start = wordBreaker.first(); (end = wordBreaker.next()) != BreakIterator.DONE; start = end) {
//            String word = s.substring(start, end);
//            word = word.trim().toLowerCase();
//            if (word.isEmpty()) {
//                continue;
//            }
//            if (word.length() > 0) {
//                word = word.substring(0, 1).toUpperCase() + word.substring(1).toLowerCase();
//            }
//            res = res == null ? word : res + " " + word;
//        }
//        return res;
//    }
//
//    public static boolean ultimiiDoiClientiNoi(char tipDocument) {
//        String table = null;
//        switch (tipDocument) {
//            case 'n':
//            case 'a':
//                table = "facturi";
//                break;
//            case 'z':
//                table = "avize";
//                break;
//            case 'p':
//                table = "proforme";
//                break;
//            default:
//                return false;
//        }
//        return (Integer) DBAccess.getRows("select case when count(rowid)>=2 then (select sum(client_nou) from (select client_nou from " + table
//                + " order by rowid desc limit 2)) else 2 end from " + table, null, new ResultSetHandler() {
//
//            @Override
//            public Object handle(ResultSet rs) throws SQLException {
//                if (rs.next()) {
//                    return rs.getInt(1);
//                }
//                return 0;
//            }
//        }) > 1;
//    }
//
//    public static boolean nuAEmisAreClienti(char tipDocument) {
//		try {
//			String table = null;
//			switch (tipDocument) {
//				case 'n':
//				case 'a':
//					table = "facturi";
//					break;
//				case 'z':
//					table = "avize";
//					break;
//				case 'p':
//					table = "proforme";
//					break;
//				default:
//					return false;
//			}
//			String s = 
//				"SELECT sum(c) AS clienti, sum(f) AS facturi " +
//				"FROM ( " +
//					"SELECT count(*) AS c, 0 AS f FROM clienti " +
//					"UNION ALL " +
//					"SELECT 0 AS c, count(*) AS f FROM " + table +
//				")";
//			ResultSet rs = DBAccess.getRows(s);
//			if(rs.next()){
//				if(rs.getInt("clienti") > 0 && rs.getInt("facturi") <= 0){
//					return true;
//				}
//			}
//			rs.close();
//		} catch (SQLException ex) {
//			Logger.getLogger(Common.class.getName()).log(Level.SEVERE, null, ex);
//		}
//		return false;
//    }
//	
//    public static void addEnterToFocusTraversalKeys(Container container) {
////        Set forwardKeys = java.awt.KeyboardFocusManager.getCurrentKeyboardFocusManager().getDefaultFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS);
////        newForwardKeys.clear();
////        java.awt.KeyboardFocusManager.getCurrentKeyboardFocusManager().setDefaultFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS, newForwardKeys);
//        Set newForwardKeys = new HashSet(container.getFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS));
//        newForwardKeys.add(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0));
//        container.setFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS, newForwardKeys);
//        for (Component c : container.getComponents()) {
//            if (c instanceof Container) {
//                addEnterToFocusTraversalKeys((Container) c);
//            }
//        }
//
//    }
//
//    public static boolean isFirmaTest() {
//        return DBAccess.getFirmakey().equals(FIRMA_TEST_KEY);
//    }
//
//    public static String getClient(String cif, String denumire, String adresa) {
//        String den = null;
//        cif = cif == null ? "" : cif;
//        String cleanCif = "";
//        if (cif.startsWith("RO")) {
//            cleanCif = cif.substring(2, cif.length());
//        }
//        cleanCif = cif.replace(" ", "");
//
//        String roCif = "RO" + cleanCif;
//
//        try {
//            ResultSet rs;
//            if (cif != null && !cif.isEmpty() && !"-".equals(cif)) {
//                rs = DBAccess.getRows("select * from clienti where (cif=" + Common.prepareString(cif) + " or cif=" + Common.prepareString(cleanCif) + " or cif=" + Common.prepareString(roCif) + ") and deleted!='y'");
//            } else {
//                rs = DBAccess.getRows("select * from clienti where (denumire like " + Common.prepareString(denumire) + " and adresa like " + Common.prepareString(adresa) + ") and deleted!='y'");
//            }
//            if (rs.next()) {
//                den = rs.getString("denumire");
//                rs.close();
//            }
//        } catch (SQLException ex) {
//            ex.printStackTrace();
//        }
//        return den;
//    }
//
//    public static boolean isConectedOnline(){
//        return connectedOnline;
//    }
//
//        public static boolean existaHelpOffline() {
//        if (new File("./ajutor").exists()) {
//            return true;
//        } else {
//            return false;
//        }
//    }
//
//    public static String generateCdKey() {
//        int firstPart[] = new int[4];
//        int lastPart[] = new int[4];
//        firstPart[0] = (int) (Math.random() * 100 % 26);
//        firstPart[1] = (int) (Math.random() * 100 % 26);
//        firstPart[2] = (int) (Math.random() * 100 % 26);
//        firstPart[3] = (int) (Math.random() * 100 % 26);
//        lastPart[0] = (int) (Math.random() * 100 % 26);
//        lastPart[1] = (int) (Math.random() * 100 % 26);
//        lastPart[2] = (int) (firstPart[0] * firstPart[1] + firstPart[2] * firstPart[3] * NR_VERSION) % 26;
//        lastPart[3] = (int) (Math.abs(firstPart[0] * firstPart[3] * NR_VERSION - firstPart[1] * firstPart[2])) % 26;
//        String p1 = "", p2 = "";
//        for (int i = 0; i < 4; i++) {
//            p1 = p1 + (char) ('A' + firstPart[i]);
//            p2 = p2 + (char) ('A' + lastPart[i]);
//        }
//        System.out.println(p1 + "-" + p2);
//        return p1 + "-" + p2;
//    }
//
//    public static boolean checkCdKey(String key) {
//        try {
//            if (key == null) {
//                return false;
//            }
//            key = key.trim();
//            key = key.replace("-", "");
//            if (key.length() != 8) {
//                return false;
//            }
//            char[] chKey = key.toCharArray();
//            return (chKey[6] == ((chKey[0] - 'A') * (chKey[1] - 'A') + (chKey[2] - 'A') * (chKey[3] - 'A') * NR_VERSION) % 26 + 'A')
//                    && (chKey[7] == Math.abs((chKey[0] - 'A') * (chKey[3] - 'A') * NR_VERSION - (chKey[1] - 'A') * (chKey[2] - 'A')) % 26 + 'A');
//        } catch (Exception e) {
//            e.printStackTrace();
//            return false;
//        }
//    }
//
//
//
////    public static String getInstallPath(String version) {
////        try {
////			StringBuilder sb = new StringBuilder(Common.REGISTRY_KEY);
////			sb.setLength(sb.length() -6);
////			sb.append(version.isEmpty() ? "" : " ");
////			sb.append(version);
////			sb.append("\"");
////
////            Process process = Runtime.getRuntime().exec("reg query " + sb.toString() + " /v InstallPath");
////            BufferedReader br = new BufferedReader(new InputStreamReader(process.getInputStream()));
////            String line = "";
////            while ((line = br.readLine()) != null) {
////                if (line.indexOf("InstallPath") < 0) {
////                    continue;
////                }
////                line = line.replace("InstallPath", "").replace("REG_SZ", "");
////                line = line.trim();
////                try {
////                    br.close();
////                } catch (IOException ex) {
////                    ex.printStackTrace();
////                }
////                return line;
////            }
////        } catch (Exception ex) {
////            ex.printStackTrace();
////        }
////        return null;
////    }
//
//
//    public static boolean isIbanValid(String iban) {
//        if (null == iban) {
//            return false;
//        }
//
//        int validIBANLength = 24;  //pentru RO
//        if (validIBANLength < 4) {
//            return false;
//        }
//        if (iban.length() != validIBANLength) {
//            return false;
//        }
//
//        BigInteger numericIBAN = getNumericIBAN(iban, false);
//
//        int checkDigit = numericIBAN.mod(new BigInteger("97")).intValue();
//        return checkDigit == 1;
//    }
//
//    private static BigInteger getNumericIBAN(String iban, boolean isCheckDigitAtEnd) {
//        String endCheckDigitIBAN = iban;
//        if (!isCheckDigitAtEnd) {
//            //Move first four characters to end of string to put check digit at end
//            endCheckDigitIBAN = iban.substring(4) + iban.substring(0, 4);
//        }
//        StringBuffer numericIBAN = new StringBuffer();
//        for (int i = 0; i < endCheckDigitIBAN.length(); i++) {
//            if (Character.isDigit(endCheckDigitIBAN.charAt(i))) {
//                numericIBAN.append(endCheckDigitIBAN.charAt(i));
//            } else {
//                numericIBAN.append(10 + getAlphabetPosition(endCheckDigitIBAN.charAt(i)));
//            }
//        }
//
//        return new BigInteger(numericIBAN.toString());
//    }
//
//    private static int getAlphabetPosition(char letter) {
//        return Character.valueOf(Character.toUpperCase(letter)).compareTo(Character.valueOf('A'));
//    }
//
//    public static void main(String[] args) {
//        System.out.println("----------");
////        fetchClientByCif("21390860");
////        fetchClientByCif("20809120");
////        for(int i=0;i<1000;i++)
////            generateCdKey();
////        System.out.println("cheie buna?:"+checkCdKey("XMJC-JDSE"));
//    }
//
//    public static boolean getEraPlatitor(int config_id) {
//        String query = "SELECT platitor_tva FROM date_firma where configuratie_id=?";
//        char configuratie_id = 'y';
//        try {
//            ResultSet rs = DBAccess.getRows(query, new Object[]{config_id});
//            if (rs.next()) {
//                configuratie_id = rs.getString("platitor_tva").charAt(0);
//            }
//            rs.close();
//            return configuratie_id == 'y';
//        } catch (SQLException e) {
//            e.printStackTrace();
//        }
//        return true;
//    }
//
//    public static int getConfiguratieId(int document_id, char tip_document) {
//        String id = "";
//        String table = "";
//        switch (tip_document) {
//            case 'f':
//            case 'a':
//            case 's':
//                id = "factura_id";
//                table = "facturi";
//                break;
//            case 'z':
//                id = "aviz_id";
//                table = "avize";
//                break;
//            case 'p':
//                id = "proforma_id";
//                table = "proforme";
//                break;
//        }
//        String query = "SELECT configuratie_id FROM " + table + " where " + id + "=?";
//        int configuratie_id = 0;
//        try {
//            ResultSet rs = DBAccess.getRows(query, new Object[]{document_id});
//            if (rs.next()) {
//                configuratie_id = rs.getInt("configuratie_id");
//            }
//            rs.close();
//            return configuratie_id;
//        } catch (SQLException e) {
//            e.printStackTrace();
//        }
//        return 0;
//    }
//
//    public static JSONArray getSalvariServer() {
//        JSONArray listaJSON = null;
//        DataOutputStream dos;
//        String lineEnd = "\r\n";        // header??
//        String twoHyphens = "--";
//        String boundary = "***232404jkg4220957934FW**";
//        HttpURLConnection connection = Common.createHttpsConnection( SBConstants.PREMIUM + "info/company/");
//
//        try {
//
//            dos = new DataOutputStream(connection.getOutputStream());
//
//            dos.writeBytes(twoHyphens + boundary + lineEnd);
//
//            Object[] obj = Common.getDateContPremium();
//            String username = obj[0].toString();
//            String pass = obj[1].toString();
//
//            dos.writeBytes("content-disposition: form-data; name=username" + lineEnd);
//            dos.writeBytes(lineEnd);
//            dos.writeBytes(username);
//            dos.writeBytes(lineEnd);
//            dos.writeBytes(twoHyphens + boundary + lineEnd);
//
//            dos.writeBytes("content-disposition: form-data; name=password" + lineEnd);
//            dos.writeBytes(lineEnd);
//            dos.writeBytes(pass);
//            dos.writeBytes(lineEnd);
//            dos.writeBytes(twoHyphens + boundary + lineEnd);
//
//            dos.writeBytes(lineEnd);
//            dos.writeBytes(twoHyphens + boundary + twoHyphens + lineEnd);
//
//            // close streams
//            dos.flush();
//            dos.close();
//
//            BufferedReader rdx = new BufferedReader(new InputStreamReader(connection.getInputStream()));
//            String ax = rdx.readLine();
//            try {
//                //todo test user:parola
//                listaJSON = new JSONArray(ax);
//            } catch (JSONException ex) {
//                ex.printStackTrace();
//                try {       //pt cazul in care returneaza eroare necunoscuta; nu mai e JSONArray, e JSONObject
//                    JSONObject o = new JSONObject(ax);
//                    if(o.getInt("id")==11) Messages.showErrorMessage(null, o.getString("error_msg"), "Atentie!");
//                } catch (JSONException ex1) {
//                    ex1.printStackTrace();
//                    Messages.showErrorMessage(null, "Fisierul transmis de server nu a putut fi citit!", "Eroare serviciu Backup si Rapoarte Online!");
//                }
//                return null;
//            }
//        } catch (IOException ex) {
//            ex.printStackTrace();
//            Messages.showErrorMessage(null, "Legatura cu serverul nu a reusit!", "Atentie!");
//            return null;
//        }
//        return listaJSON;
//    }
//
//    public static JSONArray getOperatiiSalvare(int salvareId, String workstation) {
//        JSONArray listaJSON = null;
//        HttpsURLConnection connection = Common.createHttpsConnection(SBConstants.PREMIUM + "info/activity/");
//        DataOutputStream dos;
//        String lineEnd = "\r\n";        // header??
//        String twoHyphens = "--";
//        String boundary = "***232404jkg4220957934FW**";
//        try {
//
//            dos = new DataOutputStream(connection.getOutputStream());
//
//            dos.writeBytes(twoHyphens + boundary + lineEnd);
//
//            Object[] obj = Common.getDateContPremium();
//            String username = obj[0].toString();
//            String pass = obj[1].toString();
//
//            dos.writeBytes("content-disposition: form-data; name=username" + lineEnd);
//            dos.writeBytes(lineEnd);
//            dos.writeBytes(username);
//            dos.writeBytes(lineEnd);
//            dos.writeBytes(twoHyphens + boundary + lineEnd);
//
//            dos.writeBytes("content-disposition: form-data; name=password" + lineEnd);
//            dos.writeBytes(lineEnd);
//            dos.writeBytes(pass);
//            dos.writeBytes(lineEnd);
//            dos.writeBytes(twoHyphens + boundary + lineEnd);
//
//            dos.writeBytes("content-disposition: form-data; name=workstation_identifier" + lineEnd);
//            dos.writeBytes(lineEnd);
//            dos.writeBytes(workstation);
//            dos.writeBytes(lineEnd);
//            dos.writeBytes(twoHyphens + boundary + lineEnd);
//
//            dos.writeBytes("content-disposition: form-data; name=db_file_id" + lineEnd);
//            dos.writeBytes(lineEnd);
//            dos.writeBytes(salvareId + "");
//            dos.writeBytes(lineEnd);
//            dos.writeBytes(twoHyphens + boundary + lineEnd);
//
//            dos.writeBytes(lineEnd);
//            dos.writeBytes(twoHyphens + boundary + twoHyphens + lineEnd);
//
//            // close streams
//            dos.flush();
//            dos.close();
//
//            BufferedReader rdx = new BufferedReader(new InputStreamReader(connection.getInputStream()));
//            String ax = rdx.readLine();
//            try {
//                listaJSON = new JSONArray(ax);
//            } catch (JSONException ex) {
//                ex.printStackTrace();
//                try {       //pt cazul in care returneaza eroare necunoscuta; nu mai e JSONArray, e JSONObject
//                    JSONObject o = new JSONObject(ax);
//              //      if (o.getInt("id") == 11) {
//                        Messages.showErrorMessage(null, o.getString("error_msg"), "Atentie!");
//             //       }
//                } catch (JSONException ex1) {
//                    ex1.printStackTrace();
//                    Messages.showErrorMessage(null, "Fisierul transmis de server nu a putut fi citit!", "Eroare serviciu Backup si Rapoarte Online!");
//                }
//                return null;
//            }
//        } catch (IOException ex) {
//            ex.printStackTrace();
//            Messages.showErrorMessage(null, "Legatura cu serverul nu a reusit!", "Eroare!");
//        }
//        return listaJSON;
//    }
//
//    public static JSONObject verificareDateContPremium(String utilizator, String parola, String statieLucru) {
//        JSONObject obj = null;
//        String lineEnd = "\r\n";       
//        String twoHyphens = "--";
//        String boundary = "***232404jkg4220957934FW**";
//        HttpsURLConnection connection = Common.createHttpsConnection(SBConstants.PREMIUM + "verify/company/");
//        //sta prea mult altfel
//        connection.setConnectTimeout(3000);
//
//        DataOutputStream dos;
//        try {
//            dos = new DataOutputStream(connection.getOutputStream());
//            dos.writeBytes(twoHyphens + boundary + lineEnd);
//
//            dos.writeBytes("content-disposition: form-data; name=username" + lineEnd);
//            dos.writeBytes(lineEnd);
//            dos.writeBytes(utilizator);
//            dos.writeBytes(lineEnd);
//            dos.writeBytes(twoHyphens + boundary + lineEnd);
//
//            dos.writeBytes("content-disposition: form-data; name=password" + lineEnd);
//            dos.writeBytes(lineEnd);
//            dos.writeBytes(parola);
//            dos.writeBytes(lineEnd);
//            dos.writeBytes(twoHyphens + boundary + lineEnd);
//
//            dos.writeBytes("content-disposition: form-data; name=workstation_identifier" + lineEnd);
//            dos.writeBytes(lineEnd);
//            dos.writeBytes(statieLucru);
//            dos.writeBytes(lineEnd);
//            dos.writeBytes(twoHyphens + boundary + lineEnd);
//
//            dos.writeBytes(lineEnd);
//            dos.writeBytes(twoHyphens + boundary + twoHyphens + lineEnd);
//
//            // close streams
//            dos.flush();
//            dos.close();
//
//            BufferedReader rdx = new BufferedReader(new InputStreamReader(connection.getInputStream()));
//            String ax = rdx.readLine();
//            try {
//                obj = new JSONObject(ax);
//            } catch (JSONException ex) {
//                ex.printStackTrace();
//                Messages.showErrorMessage(null, "Fisierul transmis de server nu a putut fi citit.", "Eroare serviciu Backup si Rapoarte Online!");
//                return null;
//            }
//        } catch (IOException ex) {
//            ex.printStackTrace();
//            Messages.showErrorMessage(null, "Legatura cu serverul nu s-a putut realiza. Verificarea\ndatelor dumneavoastra nu s-a putut realiza acum.", "Eroare serviciu Backup si Rapoarte Online!");
//        }        
//        return obj;
//    }
//
//    public static void salveazaLocalDateContPremium(String utilizator, String parola, String statieLucru, String dataExp, String companie) {
//        String q = "UPDATE date_cont_premium SET deleted = 'y'";
//        try {
//            DBAccess.uidRow(q);
//        } catch (SQLException ex) {
//            ex.printStackTrace();
//        }
//        String query = "INSERT INTO date_cont_premium (utilizator, parola, statie_lucru, companie, data_expirarii, deleted) VALUES (?,?,?,?,?,?)";
//        try {
//            DBAccess.uidRow(query, new Object[]{utilizator, parola, statieLucru, companie, dataExp, 'n'});
//        } catch (SQLException ex) {
//            ex.printStackTrace();
//        }
//
//    }
//
//    public static Object[] getDateContPremium() {
//        if (DBAccess.getFirmakey().equals(DBConnection.DEFAULT_DBKEY) && dateContDefault!=null) {
//            return new Object[]{
//                dateContDefault.get(0),
//                dateContDefault.get(1),
//                dateContDefault.get(2),
//                dateContDefault.get(3),
//                dateContDefault.get(4)
//            };
//        } else {
//            String query = "SELECT * FROM date_cont_premium WHERE deleted!='y'";
//            try {
//                ResultSet rs = DBAccess.getRows(query);
//                if (rs.next()) {
//                    return new Object[]{rs.getString("utilizator"),
//                                rs.getString("parola"),
//                                rs.getString("statie_lucru"),
//                                rs.getString("companie"),
//                                rs.getString("data_expirarii")
//                            };
//                }
//            } catch (SQLException ex) {
//                ex.printStackTrace();
//            }
//        }
//        return null;
//    }
//
//    public static boolean isContPremiumExpirat(String dataCont){
//        Calendar calendar = Calendar.getInstance();
//        String expectedPattern = "dd.MM.yy HH:mm:ss";
//        SimpleDateFormat dateFormat = new SimpleDateFormat(expectedPattern);
//        try {
//            Date dExp = dateFormat.parse(dataCont);
//            Date dToday = dateFormat.parse(dateFormat.format(calendar.getTime()));
//            if(dExp.before(dToday))
//                return true;
//            else return false;
//        } catch (ParseException e) {
//            e.printStackTrace();
//        }
//        return true;
//    }
//
//    public static boolean isContPremiumExpirat() {
//        Object[] obj = Common.getDateContPremium();
//        String dataExp = obj[4].toString();
//        Calendar calendar = Calendar.getInstance();
//        String expectedPattern = "dd.MM.yy HH:mm:ss";
//        SimpleDateFormat dateFormat = new SimpleDateFormat(expectedPattern);
//        try {
//            Date dExp = dateFormat.parse(dataExp);
//            Date dToday = dateFormat.parse(dateFormat.format(calendar.getTime()));
//            if(dExp.before(dToday))
//                return true;
//            else return false;
//        } catch (ParseException e) {
//            e.printStackTrace();
//        }
//        return true;
//    }
//
//    // returneaza   1 - e totul ok
//    //              0 - difera configurarile
//    //              -1 - verificarea nu s-a facut
//    public static int isUserContOk(){
//        Object[] obj = getDateContPremium();
//        if(obj==null) return 0;
//        JSONObject o = verificareDateContPremium(obj[0]+"", obj[1]+"", obj[2]+"");
//        if(o == null) return -1;
//        try {
//            if (o.getInt("id") == 16) {
//                return 1;
//            }
//        } catch (JSONException ex) {
//            ex.printStackTrace();
//            Messages.showErrorMessage(null, "Fisierul transmis de server nu a putut fi citit.", "Eroare!");
//        }
//        return 0;
//    }
//
//    public static HttpsURLConnection createHttpsConnection(String u){
//        
//        // Create a trust manager that does not validate certificate chains
//        TrustManager[] trustAllCerts = new TrustManager[]{
//            new X509TrustManager() {
//
//                public java.security.cert.X509Certificate[] getAcceptedIssuers() {
//                    return null;
//                }
//
//                public void checkClientTrusted(
//                        java.security.cert.X509Certificate[] certs, String authType) {
//                }
//
//                public void checkServerTrusted(
//                        java.security.cert.X509Certificate[] certs, String authType) {
//                }
//            }
//        };
////// Install the all-trusting trust manager
//        try {
//            SSLContext sc = SSLContext.getInstance("SSL");
//            sc.init(null, trustAllCerts, new java.security.SecureRandom());
//            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
//        } catch (Exception e) {
//        }
//
//        URL url;
//        try {
//            url = new URL(u);
//            HttpsURLConnection connection;
//
//            HttpsURLConnection.setDefaultHostnameVerifier(new javax.net.ssl.HostnameVerifier() {
//
//                public boolean verify(String urlHostname, String certHostname) {
//                    return true;
//                }
//
//                public boolean verify(String urlHostname, javax.net.ssl.SSLSession session) {
//                    return true;
//                }
//            });
//
//            connection = (HttpsURLConnection) url.openConnection();
//            String boundary = "***232404jkg4220957934FW**";
//
//            connection.setDoInput(true);
//            connection.setDoOutput(true);
//            connection.setRequestMethod("POST");
//
//            connection.setRequestProperty("Connection", "Keep-Alive");
//            connection.setRequestProperty("Content-Type", "multipart/form-data;boundary=" + boundary);
//            return connection;
//
//        } catch (MalformedURLException ex) {
//            ex.printStackTrace();
//        } catch (ProtocolException ex) {
//            ex.printStackTrace();
//        } catch (IOException ex) {
//            ex.printStackTrace();
//        }
//        return null;
//    }
//
//    public static BigDecimal[] getValoareStornata(int facturaId){
//        String query =
//            "select total(valoare_storno) val_storno,total(valoare_tva_storno) val_tva_storno from "+
//            "(select sum(fa.valoare) as valoare_storno, sum(fa.tva) as valoare_tva_storno from facturi_articole fa  left " +
//            "join facturi f on fa.factura_id = f.factura_id where fa.storno_pt_factura_id = ? and f.anulata!='y'" +
//            " UNION " +
//            "SELECT SUM(valoare_stornata)*-1 AS valoare_storno,SUM(tva_stornat)*-1 AS valoare_tva_storno " +
//            "FROM stornari WHERE factura_id=?)";
//        return (BigDecimal[])DBAccess.getRows(query,new Object[]{facturaId,facturaId},new ResultSetHandler() {
//            @Override
//            public Object handle(ResultSet rs) throws SQLException {
//                if(rs.next()){
//                    return new BigDecimal[] {rs.getBigDecimal(1),rs.getBigDecimal(2)};
//                }
//                return new BigDecimal[] {BigDecimal.ZERO,BigDecimal.ZERO};
//            }
//        });
//    }
//
//    public static void uploadSbf(){
//        Calendar date = new GregorianCalendar();
//        String s = DBAccess.getFirmakey() + "_" + date.get(Calendar.DAY_OF_MONTH) + "_"
//            + (date.get(Calendar.MONTH) + 1) + "_"
//            + date.get(Calendar.YEAR)
//            + ".sbf";
//        final File file = new File(s);
//        try {
//            Ziper.zipFolder(Common.USERDATA_FOLDER_PATH, file);
//        } catch (Exception ex) {
//            ex.printStackTrace();
//            return;
//        }
//        SwingWorker<Void,Void> job = new SwingWorker<Void, Void> (){
//
//            @Override
//            protected Void doInBackground() throws Exception {
//                DataOutputStream dos;
//                String lineEnd = "\r\n";        // header??
//                String twoHyphens = "--";
//                String boundary = "***232404jkg4220957934FW**";
//                URLConnection connection = new URL("http://program-facturi.ro/uploadsbf/").openConnection();
//                try {
//
//                    FileInputStream fileInputStream = new FileInputStream(file);
//                    int bytesRead, bytesAvailable, bufferSize;
//                    byte[] buffer;
//                    int maxBufferSize = 1 * 1024 * 1024;
//
//                    dos = new DataOutputStream(connection.getOutputStream());
//                    dos.writeBytes(twoHyphens + boundary + lineEnd);
//
//                    Object[] obj = Common.getDateContPremium();
//                    String username = obj[0].toString();
//                    String pass = obj[1].toString();
//                    String workstation = obj[2].toString();
//
//                    dos.writeBytes("content-disposition: form-data; name=username" + lineEnd);
//                    dos.writeBytes(lineEnd);
//                    dos.writeBytes(username);
//                    dos.writeBytes(lineEnd);
//                    dos.writeBytes(twoHyphens + boundary + lineEnd);
//
//                    dos.writeBytes("content-disposition: form-data; name=password" + lineEnd);
//                    dos.writeBytes(lineEnd);
//                    dos.writeBytes(pass);
//                    dos.writeBytes(lineEnd);
//                    dos.writeBytes(twoHyphens + boundary + lineEnd);
//
//                    dos.writeBytes("content-disposition: form-data; name=workstation_identifier" + lineEnd);
//                    dos.writeBytes(lineEnd);
//                    dos.writeBytes(workstation);
//                    dos.writeBytes(lineEnd);
//                    dos.writeBytes(twoHyphens + boundary + lineEnd);
//
//                    dos.writeBytes("content-disposition: form-data; name=\"file\";"
//                        + " filename=\"" + file.getName() + "\"" + lineEnd);
//                    dos.writeBytes(lineEnd);
//
//                    // create a buffer of maximum size
//
//                    bytesAvailable = fileInputStream.available();
//                    bufferSize = Math.min(bytesAvailable, maxBufferSize);
//                    buffer = new byte[bufferSize];
//
//                    // read file and write it into form...
//
//                    long size = file.length();
////                    if (size < 1) {
////                        error();
////                        return null;
////                    }
////                    jLInform.setText(jLInform.getText() + " " + size / 1024 + "KB");
//
//                    bytesRead = fileInputStream.read(buffer, 0, bufferSize);
//                    setProgress(0);
//                    int bread = 0;
//                    int uploaded = 0;
//                    while ((bread = bytesRead) > 0) {
//                        dos.write(buffer, 0, bufferSize);
//                        bytesAvailable = fileInputStream.available();
//                        bufferSize = Math.min(bytesAvailable, maxBufferSize);
//                        bytesRead = fileInputStream.read(buffer, 0, bufferSize);
//                        uploaded += bread;
//                        setProgress(uploaded * 100 / (int) size);
//                        if (isCancelled()) {
//                            return null;
//                        }
//                    }
//
//                    // send multipart form data necesssary after file data...
//
//                    dos.writeBytes(lineEnd);
//                    dos.writeBytes(twoHyphens + boundary + twoHyphens + lineEnd);
//
//                    // close streams
//
//                    fileInputStream.close();
//                    dos.flush();
//                    dos.close();
//
////                    BufferedReader rdx = new BufferedReader(new InputStreamReader(connection.getInputStream()));
////                    String ax = rdx.readLine();
////                    JSONObject response = new JSONObject(ax);
//                    return null;
//                } catch (IOException ex) {
//                    ex.printStackTrace();
//                    return null;
//                }
//            }
//        };
//        job.execute();
//    }
//
//    public static BigDecimal [] getTotals(String table, Object [] ids){
//        String qq = "?";
//        for(int i=1;i<ids.length;i++)
//            qq+=",?";
//        BigDecimal [] res = (BigDecimal []) DBAccess.getRows("select * from "+table+" where rowid in ("+qq+")",ids,new ResultSetHandler() {
//            @Override
//            public Object handle(ResultSet rs) throws SQLException {
//                BigDecimal [] res = new BigDecimal[3];
//                res[0]=res[1]=res[2]=BigDecimal.ZERO;
//                while(rs.next()){
//                    res[0] = res[0].add(rs.getBigDecimal("valoare"));
//                    res[1] = res[1].add(rs.getBigDecimal("valoare_tva"));
//                    res[2] = res[2].add(rs.getBigDecimal("valoare_totala"));
//                }
//                return res;
//            }
//        });
//        return res;
//    }
//
//    public static String slashify(String path, boolean isDirectory) {
//        String p = path;
//        if (File.separatorChar != '/')
//            p = p.replace(File.separatorChar, '/');
//        if (!p.startsWith("/"))
//            p = "/" + p;
//        if (!p.endsWith("/") && isDirectory)
//            p = p + "/";
//        return p;
//    }
//
//    public static URI toURI(File origf, String fragment){
//        try {
//            File f = origf.getAbsoluteFile();
//            String sp = slashify(f.getPath(), f.isDirectory());
//            if (sp.startsWith("//"))
//                sp = "//" + sp;
//            return new URI("file", null, sp, fragment);
//        } catch (URISyntaxException x) {
//            throw new Error(x);		// Can't happen
//        }
//
//    }
//
//    public static char isPlatitorTVA(String cif) {
//        cif = cif.trim();
//        if(cif.length()<2)
//            return 'n';
//        return cif.substring(0, 2).equalsIgnoreCase("RO") ? 'y' : 'n';
//    }
//
//    public static boolean existaAlias(int client_id, String alias) throws SQLException{
//       ResultSet rs = DBAccess.getRows("SELECT email FROM alias_email WHERE client_id = ? AND alias = ?", new Object[]{client_id, alias});
//       if(rs.next()){
//           String email = rs.getString("email");
//           if (email!= null && !email.isEmpty()){
//               rs.close();
//               return true;
//           }
//       }
//       rs.close();  
//       return false;
//    }
//
//    public static boolean existaEmail(String email, String alias) throws SQLException{
//       ResultSet rs = DBAccess.getRows("SELECT count(*) as nr FROM alias_email WHERE email = ? AND alias=?", new Object[]{email,alias});
//       if(rs.next()){
//           int r = rs.getInt("nr");
//           if (r>0){
//               rs.close();
//               return true;
//           }
//       }
//       rs.close();
//       return false;
//    }
//
//    public static HashMap<String,String> getEmailClient(int clientId){
//        HashMap<String, String> map = new HashMap<String, String>();
//        ResultSet rs = DBAccess.getRows("SELECT alias, email FROM alias_email WHERE client_id=?", new Object[]{clientId});
//        try {
//            if (rs.next()) {
//                map.put(rs.getString("alias"), rs.getString("email"));
//            }
//        } catch (SQLException ex) {
//            ex.printStackTrace();
//        }
//        return map;
//    }
//
//    public static LinkedList<String> getTipuriIncasari() {
//        return getTipuriIncasari("");
//    }
//
//    public static LinkedList<String> getTipuriIncasari(String whereClause) {
//        try {           
//            int nrZile = vKCheck(); 
//            if (nrZile != -1 || Common.isFirmaTest()) whereClause = whereClause.isEmpty() ? " where default_visible = 'y' " : (whereClause + " and default_visible = 'y' ");
//            return (LinkedList) DBAccess.getRows("select distinct nume from tipuri_incasari " + whereClause + " order by ordine asc", null, new ResultSetHandler() {
//
//                @Override
//                public Object handle(ResultSet rs) throws SQLException {
//                    LinkedList<String> list = new LinkedList<String>();
//                    while (rs.next()) {
//                        list.add(rs.getString("nume"));
//                    }
//                    return list;
//                }
//            });
//        } catch (Exception ex) {
//            ex.printStackTrace();
//        }
//        return null;
//    }
//
//    public static void addTimeStampToTable(String tableName, String UPDATE_USER, String fkey) {
//        try {
//            String query = "", type = "";
//            ResultSet rs = DBAccess.getRows("SELECT * FROM sqlite_master WHERE tbl_name= ? AND sql IS NOT NULL", new Object[]{tableName}, UPDATE_USER, fkey);
//            while (rs.next()) {
//                type = rs.getString("type");
//                query = rs.getString("sql");
//
//                if (type.equals("table")) {
//                    DBAccess.uidRow("CREATE TEMPORARY TABLE tmp AS SELECT * FROM '" + tableName + "'", UPDATE_USER, fkey);
//                    DBAccess.uidRow("DROP TABLE '" + tableName + "'", UPDATE_USER, fkey);
//                    query = query.substring(0, query.lastIndexOf(")")) + ", timestamp DATE DEFAULT CURRENT_TIMESTAMP )";
//                    DBAccess.uidRow(query, UPDATE_USER, fkey);
//                    DBAccess.uidRow("INSERT INTO '" + tableName + "' select *, datetime('now') from tmp", UPDATE_USER, fkey);
//                    DBAccess.uidRow("DROP TABLE tmp", UPDATE_USER, fkey);
//                } else if (type.equals("index")) {
//                    DBAccess.uidRow(query, UPDATE_USER, fkey);
//                }
//            }
//            rs.close();
//        } catch (SQLException ex) {
//            ex.printStackTrace();
//        }
//    }
//
//    public static Client getLastClientUsed() {
//        try {
//            ResultSet rs = DBAccess.getRows("select document, tip_document "
//                + "from jurnal "
//                + "where (tip_document = 'factura' or tip_document = 'proforma' or tip_document = 'aviz' or tip_document = 'chitanta') and descriere NOT LIKE 'Stergere%' "
//                + "order by rowid desc limit 1");
//            String tipDocument = "", document = "";
//            String q = "";
//            if (rs.next()) {
//                document = rs.getString("document");
//                tipDocument = rs.getString("tip_document");
//                if (tipDocument.equalsIgnoreCase("factura")) {
//                    q = "select client_denumire as denumire, client_cif as cif, client_adresa as adresa from facturi where serie||numar = ?";
//                } else if (tipDocument.equalsIgnoreCase("proforma")) {
//                    q = "select client_denumire as denumire, client_cif as cif, client_adresa as adresa from proforme where serie||numar = ?";
//                } else if (tipDocument.equalsIgnoreCase("aviz")) {
//                    q = "select client_denumire as denumire, client_cif as cif, client_adresa as adresa from avize where serie||numar = ?";
//                } else if (tipDocument.equalsIgnoreCase("chitanta")) {
//                    q = "select denumire_client as denumire, cif_client as cif, adresa_client as adresa from incasari where serie||numar = ?";
//                }
//            } else {
//                return null;
//            }
//            rs.close();
//            ResultSet r = DBAccess.getRows(q, new Object[]{document});
//            if (r.next()) {
//                return Client.getClient(r.getString("cif"), r.getString("denumire"), r.getString("adresa"));
//            }
//            r.close();
//        } catch (SQLException ex) {
//            ex.printStackTrace();
//        }
//        return null;
//    }
//
//
//    public static boolean isExplicatieDefault(String text){
//        if ( text.startsWith("contravaloarea partiala a facturii nr") ||
//             text.startsWith("contravaloarea partiala a facturii seria") ||
//             text.startsWith("contravaloarea facturii nr") ||
//             text.startsWith("contravaloarea facturii seria") ){
////        itelegem ca nu sa schimbat explicatie.
//          return true;
//        }else{
//            return false;
//        }
//    }
//    public static boolean isExplicatieDefaultRCasa(String text){
//        if ( text.startsWith("fact.") || text.startsWith("partial fact.") ){
////        itelegem ca nu sa schimbat explicatie.
//          return true;
//        }else{
//            return false;
//        }
//    }
//    public static String getExplicatieChitantaRegCasa(Incasare chit){
//        String explicatie = "";
//        try {
//            explicatie = chit.getCod_limba().equals("RO")? chit.getText(): chit.getSerie_numar_factura();
//// Trebuie contemplat facturii incasate partial si in alte limba si multi facturi de data diferite , o chitanta pt multe facturi, multe chitante la o singura factura
//
//             explicatie = explicatie.replace("\n", " "); //incasam multe facturi cu o singura quitanta.
//             explicatie = explicatie.replaceAll("contravaloarea partiala a facturii nr", "partial fact. ") ;
//             explicatie = explicatie.replaceAll("contravaloarea partiala a facturii seria", "partial fact. ");
//             explicatie = explicatie.replaceAll("contravaloarea facturii nr", "fact. ");
//             explicatie = explicatie.replaceAll("contravaloarea facturii seria", "fact. ");
//             explicatie = explicatie.replaceAll(" nr ", "");
//             explicatie = explicatie.replaceAll(" numarul ", "");
////                            explicatie = chit.getText().replaceAll("contravaloarea facturii", "cv. fac.");
////                            explicatie = explicatie.replaceAll("din data de", "din");
//            explicatie = explicatie.replaceAll("din data de", "din");
//
//
//        } catch (Exception e) {
//            return explicatie;
//        }
//        return /*chit.getClient().getDenumire()+" - "+*/explicatie;//exista posibilitate in raportul de operatiune de arata sau nu denumirea clientului
//
//    }
//
//    public static void updataValFacturiIncasate(int incasareId, BigDecimal valIncasare, ArrayList<Integer> facturiId, String UPDATE_USER, String fkey) {
//        try {
//            ResultSet rs;
//            BigDecimal valoareRamasaIncasare = valIncasare;
//            int index = 0;
//            while (index < facturiId.size() && valoareRamasaIncasare.compareTo(BigDecimal.ZERO) == 1) {
//                rs = DBAccess.getRows("SELECT "
//                    + "(SELECT valoare_totala FROM facturi WHERE factura_id = ?) - "
//                    + "(SELECT ifnull(sum(val_factura), 0) FROM incasari_facturi WHERE factura_id = ? AND incasare_id != ?) as diferenta", new Object[]{facturiId.get(index), facturiId.get(index), incasareId}, UPDATE_USER, fkey);
//                if (rs.next()) {
//                    BigDecimal dif = rs.getBigDecimal("diferenta");
//                    if (dif.compareTo(valoareRamasaIncasare) < 1) {
//                        valoareRamasaIncasare = valoareRamasaIncasare.subtract(dif);
//                        DBAccess.uidRow("UPDATE incasari_facturi SET val_factura = ? WHERE factura_id= ? AND incasare_id = ?", new Object[]{dif, facturiId.get(index), incasareId}, UPDATE_USER, fkey);
//                    } else {
//                        DBAccess.uidRow("UPDATE incasari_facturi SET val_factura = ? WHERE factura_id= ? AND incasare_id = ?", new Object[]{valoareRamasaIncasare, facturiId.get(index), incasareId}, UPDATE_USER, fkey);
//                        valoareRamasaIncasare = BigDecimal.ZERO;
//                    }
//                }
//                rs.close();
//                index++;
//            }
//            for(int i = index; i<facturiId.size(); i++){
//                DBAccess.uidRow("DELETE FROM incasari_facturi WHERE incasare_id = ? AND factura_id = ?", new Object[]{incasareId, facturiId.get(i)}, UPDATE_USER, fkey);
//            }
//        } catch (Exception e) {
//            e.printStackTrace();
//        }
//    }
//
//    public static void updataValFacturiIncasate(int incasareId, BigDecimal valIncasare, ArrayList<Integer> facturiId) {
//        try {
//            ResultSet rs;
//            BigDecimal valoareRamasaIncasare = valIncasare;
//            int index = 0;
//            while (index < facturiId.size() && valoareRamasaIncasare.compareTo(BigDecimal.ZERO) == 1) {
//                rs = DBAccess.getRows("SELECT "
//                    + "(SELECT valoare_totala FROM facturi WHERE factura_id = ?) - "
//                    + "(SELECT ifnull(sum(val_factura), 0) FROM incasari_facturi WHERE factura_id = ? AND incasare_id != ?) as diferenta", new Object[]{facturiId.get(index), facturiId.get(index), incasareId});
//                if (rs.next()) {
//                    BigDecimal dif = rs.getBigDecimal("diferenta");
//                    if (dif.compareTo(valoareRamasaIncasare) < 1) {
//                        valoareRamasaIncasare = valoareRamasaIncasare.subtract(dif);
//                        DBAccess.uidRow("UPDATE incasari_facturi SET val_factura = ? WHERE factura_id= ? AND incasare_id = ?", new Object[]{dif, facturiId.get(index), incasareId});
//                    } else {
//                        DBAccess.uidRow("UPDATE incasari_facturi SET val_factura = ? WHERE factura_id= ? AND incasare_id = ?", new Object[]{valoareRamasaIncasare, facturiId.get(index), incasareId});
//                        valoareRamasaIncasare = BigDecimal.ZERO;
//                    }
//                }
//                rs.close();
//                index++;
//            }
//            for (int i = index; i < facturiId.size(); i++) {
//                DBAccess.uidRow("DELETE FROM incasari_facturi WHERE incasare_id = ? AND factura_id = ?", new Object[]{incasareId, facturiId.get(i)});
//            }
//        } catch (Exception e) {
//            e.printStackTrace();
//        }
//    }
//
///**
// * se foloseste la prima rulare doar pt completarea val_factura pt documentele din trecut
// */
//    public static void updataValFacturiIncasate(String UPDATE_USER, String fkey){
//        try {            
//            ResultSet rs = DBAccess.getRows("select distinct(inc.incasare_id) as incasareId, i.valoare as valoare from incasari_facturi inc "
//                + "left join incasari i on (inc.incasare_id = i.incasare_id) "
//                + "where inc.val_factura = ?", new Object[]{0}, UPDATE_USER, fkey);
//            while (rs.next()) {
//                int incasareId = rs.getInt("incasareId");
//                BigDecimal valoare = rs.getBigDecimal("valoare");
//                ResultSet r = DBAccess.getRows("select factura_id from incasari_facturi where incasare_id=? order by factura_id asc", new Object[]{incasareId}, UPDATE_USER, fkey);
//                ArrayList<Integer> lista = new ArrayList<Integer>();
//                while(r.next()){
//                    lista.add(r.getInt("factura_id"));
//                }
//                r.close();
//                updataValFacturiIncasate(incasareId, valoare, lista, UPDATE_USER, fkey);
//            }
//            rs.close();
//        } catch (SQLException ex) {
//            ex.printStackTrace();
//        }
//    }
//
//    public static boolean isChitPtMaiMulteFacturi(int incasareId) {
//        try {
//            ResultSet rs = DBAccess.getRows("SELECT count(*) count_facturi FROM incasari_facturi inc " + "LEFT JOIN facturi f ON (inc.factura_id = f.factura_id) " + "WHERE incasare_id = ? and f.anulata = 'n'", new Object[]{incasareId});
//            if (rs.next()) {
//                return rs.getInt("count_facturi") > 1 ? true : false;
//            }
//            rs.close();
//        } catch (SQLException ex) {
//            ex.printStackTrace();
//        }
//        return false;
//    }
//
//    /**
//     * Seteaza clientul pt anumite bonuri fiscale (in tabela de incasari) - situatie care apare in cazul facturilor pe baza de bon fiscal
//     */
//    public static void setClientPtBonFiscal(String UPDATE_USER, String fkey){
//        try {
//            String denumire="", cif="";
//            int incasareId=-1;
//            ResultSet rs = DBAccess.getRows("SELECT f.client_cif cif, f.client_denumire denumire, i.incasare_id incasareId FROM incasari i " +
//                "LEFT JOIN incasari_facturi inc on (i.incasare_id = inc.incasare_id) " +
//                "LEFT JOIN facturi f ON (inc.factura_id = f.factura_id) " +
//                "LEFT JOIN bonuri b ON (i.incasare_id = b.incasare_id) " +
//                "WHERE i.denumire_client = '' and i.cif_client = '' and f.factura_id is not null and b.bon_id is not null ", UPDATE_USER, fkey);
//           while(rs.next()){
//               denumire = rs.getString("denumire");
//               cif = rs.getString("cif");
//               incasareId = rs.getInt("incasareId");
//               DBAccess.uidRow("UPDATE incasari SET denumire_client = ?, cif_client = ? WHERE incasare_id = ? ", new Object[]{denumire, cif, incasareId}, UPDATE_USER, fkey);
//           }
//            rs.close();
//        } catch (SQLException ex) {
//            ex.printStackTrace();
//        }
//    }
//
//    public static String getYesterdayDate(String d) {
//        java.util.Date yesterday = null;
//        try {
//            GregorianCalendar gc = new GregorianCalendar();
//            gc.setTime(SBConstants.ROMANIAN_DATE_FORMAT.parse(d));
//
//            int dayBefore = gc.get(Calendar.DAY_OF_YEAR);
//            gc.roll(Calendar.DAY_OF_YEAR, -1);
//            int dayAfter = gc.get(Calendar.DAY_OF_YEAR);
//            if (dayAfter > dayBefore) {
//                gc.roll(Calendar.YEAR, -1);
//            }
//            gc.get(Calendar.DATE);
//            yesterday = gc.getTime();
//        } catch (ParseException ex) {
//            ex.printStackTrace();
//            yesterday = new Date();
//        }
//        return SBConstants.ROMANIAN_DATE_FORMAT.format(yesterday);
//    }
//
//    public static Date getTomorrowDate() {
//        java.util.Date tomorrow = null;
//        GregorianCalendar gc = new GregorianCalendar();
//        gc.setTime(new Date());
//        gc.add(Calendar.DATE, 1);
//        tomorrow = gc.getTime();
//        return tomorrow;
//    }
//    
//    /**
//     * Returneaza un map cu facturile si valoarea incasarii corespunzatoare fiecarei facturi
//     */
//    public static LinkedHashMap<Integer, BigDecimal> getFacturiIncasateByChit(int chitantaId, String order) {
//        LinkedHashMap<Integer, BigDecimal> list = new LinkedHashMap<Integer, BigDecimal>();
//        try {
//            String query = "SELECT val_factura, factura_id FROM incasari_facturi " + "WHERE incasare_id = ? " + order;
//            ResultSet rs = DBAccess.getRows(query, new Object[]{chitantaId});
//            while (rs.next()) {
//                list.put(rs.getInt("factura_id"), rs.getBigDecimal("val_factura"));
//            }
//        } catch (SQLException ex) {
//            ex.printStackTrace();
//        }
//        return list;
//    }
//
//    public static void setIncasariValChitMicsorata(int idChitanta, BigDecimal diferenta) {
//        try {
//            int precizie = diferenta.scale();
//            LinkedHashMap<Integer, BigDecimal> map = Common.getFacturiIncasateByChit(idChitanta, " order by factura_id desc");
//            for (Integer facturaId : map.keySet()) {
//                if (diferenta.compareTo(BigDecimal.ZERO) == 1) {
//                    BigDecimal valCurentaIncasata = map.get(facturaId);
//                    if (valCurentaIncasata.compareTo(diferenta) > 0) {
//                        DBAccess.uidRow("UPDATE incasari_facturi SET val_factura = ? WHERE factura_id = ? AND incasare_id = ?",
//                            new Object[]{valCurentaIncasata.subtract(diferenta).setScale(precizie, RoundingMode.HALF_UP), facturaId, idChitanta});
//                        break;
//                    } else {
//                        DBAccess.uidRow("DELETE FROM incasari_facturi WHERE factura_id = ? AND incasare_id = ?",
//                            new Object[]{facturaId, idChitanta});
//                        diferenta = diferenta.subtract(valCurentaIncasata).setScale(precizie, RoundingMode.HALF_UP);
//                    }
//                } else {
//                    break;
//                }
//            }
//        } catch (Exception e) {
//            e.printStackTrace();
//        }
//    }
//
//    public static void updateDataDocs() {
//    	
//		String user = "__UPDATE_DATA_TEST__";
//		String firma = DBAccess.getFirmakey();
//
//		try {
//			DBAccess.beginTransaction(user, firma);
//
//			Date maxDate = null;
//			ResultSet rs = DBAccess.getRows("SELECT MAX(data_emiterii) AS min_date FROM facturi", user, firma);
//			if(rs.next()){
//				maxDate = Common.SQLITE_DATE_FORMAT.parse(rs.getString("min_date"));
//			}
//			Calendar cMaxDate = Calendar.getInstance();
//			cMaxDate.setTime(maxDate);
//			
//	    	Calendar c = Calendar.getInstance();
//	    	c.setTimeInMillis(System.currentTimeMillis());
//			//aici se face -1 luna in urma
////	    	int months = 0;
////	    	if(c.get(Calendar.DAY_OF_MONTH) < cMaxDate.get(Calendar.DAY_OF_MONTH)) {
////	    		months = 1;
////	    	}
////			String addPeriod = "-" + months + " month";
//			String addPeriod = "-" + 1 + " day";
//			
//			if(maxDate != null) {
//				c.set(Calendar.DAY_OF_MONTH, cMaxDate.get(Calendar.DAY_OF_MONTH));
//				c.set(Calendar.HOUR_OF_DAY, cMaxDate.get(Calendar.HOUR_OF_DAY));
//				c.set(Calendar.MINUTE, cMaxDate.get(Calendar.MINUTE));
//				c.set(Calendar.SECOND, cMaxDate.get(Calendar.SECOND));
//				c.set(Calendar.MILLISECOND, cMaxDate.get(Calendar.MILLISECOND));
//				//secunde pentru siftare cu 1 luna
////				long seconds = (c.getTimeInMillis() - cMaxDate.getTimeInMillis()) / 1000;
//				//secunde pentru in urma cu 1 zi
//				long seconds = (System.currentTimeMillis() - cMaxDate.getTimeInMillis()) / 1000;
//	
//				String query = "UPDATE avize SET "
//						+ "data_emiterii = ifnull(strftime('%Y-%m-%d', strftime('%s', data_emiterii) + ?, 'unixepoch', ?), ''), "
//						+ "data_expedierii = ifnull(strftime('%Y-%m-%d %H:%M:%S', strftime('%s', data_expedierii) + ?, 'unixepoch', ?), ''), "
//						+ "data_scadentei = ifnull(strftime('%Y-%m-%d', strftime('%s', data_scadentei) + ?, 'unixepoch', ?), '') ";
//				DBAccess.uidRow(query, new Object[] { seconds, addPeriod, seconds, addPeriod, seconds, addPeriod }, user, firma);
//	
//				query = "UPDATE bonuri SET "
//						+ "data_emitere = ifnull(strftime('%Y-%m-%d', strftime('%s', data_emitere) + ?, 'unixepoch', ?), '') ";
//				DBAccess.uidRow(query, new Object[] { seconds, addPeriod }, user, firma);
//				
//				query = "UPDATE facturi SET "
//						+ "data_emiterii = ifnull(strftime('%Y-%m-%d', strftime('%s', data_emiterii) + ?, 'unixepoch', ?), ''), "
//						+ "data_expedierii = ifnull(strftime('%Y-%m-%d %H:%M:%S', strftime('%s', data_expedierii) + ?, 'unixepoch', ?), ''), "
//						+ "data_scadentei = ifnull(strftime('%Y-%m-%d', strftime('%s', data_scadentei) + ?, 'unixepoch', ?), '') ";
//				DBAccess.uidRow(query, new Object[] { seconds, addPeriod, seconds, addPeriod, seconds, addPeriod }, user, firma);
//		
//				query = "UPDATE incasari SET "
//						+ "data_incasare = ifnull(strftime('%Y-%m-%d', strftime('%s', data_incasare) + ?, 'unixepoch', ?), '') ";
//				DBAccess.uidRow(query, new Object[] { seconds, addPeriod }, user, firma);
//
//				query = "UPDATE incasari_proforme SET "
//						+ "data_incasarii = ifnull(strftime('%Y-%m-%d', strftime('%s', data_incasarii) + ?, 'unixepoch', ?), '') ";
//				DBAccess.uidRow(query, new Object[] { seconds, addPeriod }, user, firma);
//
//				query = "UPDATE jurnal SET "
//						+ "data = ifnull(strftime('%Y-%m-%d %H:%M:%S', strftime('%s', data) + ?, 'unixepoch', ?), '') ";
//				DBAccess.uidRow(query, new Object[] { seconds, addPeriod }, user, firma);
//
//				query = "UPDATE operatiuni_casa SET "
//						+ "data = ifnull(strftime('%Y-%m-%d', strftime('%s', data) + ?, 'unixepoch', ?), '') ";
//				DBAccess.uidRow(query, new Object[] { seconds, addPeriod }, user, firma);
//	
//				query = "UPDATE proforme SET "
//						+ "data_emiterii = ifnull(strftime('%Y-%m-%d', strftime('%s', data_emiterii) + ?, 'unixepoch', ?), ''), "
//						+ "data_expedierii = ifnull(strftime('%Y-%m-%d %H:%M:%S', strftime('%s', data_expedierii) + ?, 'unixepoch', ?), ''), "
//						+ "data_scadentei = ifnull(strftime('%Y-%m-%d', strftime('%s', data_scadentei) + ?, 'unixepoch', ?), '') ";
//				DBAccess.uidRow(query, new Object[] { seconds, addPeriod, seconds, addPeriod, seconds, addPeriod }, user, firma);
//				
////				String query = "UPDATE avize SET "
////						+ "data_emiterii = strftime('%Y-%m', 'now', ?) || strftime('-%d', data_emiterii), "
////						+ "data_expedierii = strftime('%Y-%m', 'now', ?) || strftime('-%d %H:%M:%S', data_expedierii), "
////						+ "data_scadentei = strftime('%Y-%m', 'now', ?) || strftime('-%d', data_scadentei) ";
////				DBAccess.uidRow(query, new Object[] { addPeriod, addPeriod, addPeriod }, user, firma);
////	
////				query = "UPDATE bonuri SET "
////						+ "data_emitere = strftime('%Y-%m', 'now', ?) || strftime('-%d %H:%M:%S', data_emitere) ";
////				DBAccess.uidRow(query, new Object[] { addPeriod }, user, firma);
////	
////				query = "UPDATE facturi SET "
////						+ "data_emiterii = strftime('%Y-%m', 'now', ?) || strftime('-%d', data_emiterii), "
////						+ "data_expedierii = strftime('%Y-%m', 'now', ?) || strftime('-%d %H:%M:%S', data_expedierii), "
////						+ "data_scadentei = strftime('%Y-%m', 'now', ?) || strftime('-%d', data_scadentei) ";
////				DBAccess.uidRow(query, new Object[] { addPeriod, addPeriod, addPeriod }, user, firma);
////	
////				query = "UPDATE incasari SET "
////						+ "data_incasare = strftime('%Y-%m', 'now', ?) || strftime('-%d', data_incasare) ";
////				DBAccess.uidRow(query, new Object[] { addPeriod }, user, firma);
////	
////				query = "UPDATE incasari_proforme SET "
////						+ "data_incasarii = strftime('%Y-%m', 'now', ?) || strftime('-%d', data_incasarii) ";
////				DBAccess.uidRow(query, new Object[] { addPeriod }, user, firma);
////	
////				query = "UPDATE jurnal SET "
////						+ "data = strftime('%Y-%m', 'now', ?) || strftime('-%d %H:%M:%S', data)";
////				DBAccess.uidRow(query, new Object[] { addPeriod }, user, firma);
////	
////				query = "UPDATE operatiuni_casa SET "
////						+ "data = strftime('%Y-%m', 'now', ?) || strftime('-%d', data) ";
////				DBAccess.uidRow(query, new Object[] { addPeriod }, user, firma);
////			
////				query = "UPDATE proforme SET "
////						+ "data_emiterii = strftime('%Y-%m', 'now', ?) || strftime('-%d', data_emiterii), "
////						+ "data_expedierii = strftime('%Y-%m', 'now', ?) || strftime('-%d %H:%M:%S', data_expedierii), "
////						+ "data_scadentei = strftime('%Y-%m', 'now', ?) || strftime('-%d', data_scadentei) ";
////				DBAccess.uidRow(query, new Object[] { addPeriod, addPeriod, addPeriod }, user, firma);
//			}
//
//			DBAccess.commitTr(user, firma);
//		} catch (Exception e) {
//			DBAccess.rollbackTr(user, firma);
//			e.printStackTrace();
//		} finally {
//
//		}
//
//    }
//    
//   public static void isAuthorizedClient() {
//		if (Common.isClient()) {
//			ClientFactory factory = sleekbill.xmlrpc.Client.getFactory();
//            Handlers hs = (Handlers) factory.newInstance(Handlers.class);
//            boolean error = true;
//            while(error) {
//            	try {
//					hs.checkAuthorization(DBAccess.getFirmakey());
//					error = false;
//				} catch (NotAuthorizedException e) {
//					e.printStackTrace();
//					error = true;
//				}
//            }
//		}
//    }
//
//    public static class Oferta {
//        String cif;
//        String imageLocalName;
//		String imageName;
//        String imageLink;
//        String tagName;
//        boolean sendClientData;
//
//        public Oferta(String cif, String imageLocalName, String imageName,
//				String imageLink, String tagName, boolean sendClientData) {
//            this.cif = cif;
//            this.imageLocalName = imageLocalName;
//			this.imageName = imageName;
//            this.imageLink = imageLink;
//            this.tagName = tagName;
//            this.sendClientData = sendClientData;
//        }
//
//        public String getCif() {
//            return cif;
//        }
//
//        public String getImageLocalName() {
//            return imageLocalName;
//        }
//
//        public String getImageLink() {
//            return imageLink;
//        }
//
//        public String getTagName() {
//            return tagName;
//        }
//
//        public boolean isSendClientData() {
//            return sendClientData;
//        }
//
//        public void setSendClientData(boolean sendClientData) {
//            this.sendClientData = sendClientData;
//        }
//
//		public String getImageName() {
//			return imageName;
//		}
//		
//    }
//
//    /**
//     * Un fel de regula de 3 simpla.
//     * x1...y1
//     * x2...y2    
//     * @param x1
//     * @param y1
//     * @param x2
//     * @param precizie
//     * @return y2 = ??
//     */
//    public static BigDecimal convertValues(BigDecimal x1, BigDecimal y1, BigDecimal x2, int precizie) {
//        BigDecimal y2 = BigDecimal.ZERO;
//        y2 = (x2.multiply(y1)).divide(x1, MathContext.DECIMAL32);
//        y2 = y2.setScale(precizie, RoundingMode.HALF_UP);
//        return y2;
//    }
//
////	public static String getLastVersionRegistry(String version) throws Exception {
////
////		int ver = Integer.parseInt(version);
////		String newVer = "";
////
////		int i = 1;
////		while(ver-i >= 2011) {
////			StringBuilder sb = new StringBuilder(Common.REGISTRY_KEY);
////			if(ver-i == 2011) {
////				newVer = "";
////				sb.setLength(sb.length() -6);
////				sb.append("\"");
////			} else {
////				newVer = String.valueOf(ver-i);
////				sb.setLength(sb.length() -6);
////				sb.append(" ");
////				sb.append(newVer);
////				sb.append("\"");
////			}
////
////			Process process = Runtime.getRuntime().exec("reg query " + sb.toString());
////			BufferedReader br = new BufferedReader(new InputStreamReader(process.getInputStream()));
////			String line = "";
////			while ((line = br.readLine()) != null) {
////				if (line.indexOf(newVer) < 0 || line.isEmpty()) {
////					continue;
////				}
////				return newVer;
////			}
////			i++;
////		}
////
////		throw new Exception("Nu am gasit versiune instalata!");
////
////	}
//    
//	public static String getInstallPathLastVersionRegistry(String version) throws Exception {
//
//		int ver = Integer.parseInt(version);
//		String newVer = "";
//		ArrayList<String> versions = new ArrayList<String>();
//		versions.add(Common.REGISTRY_KEY);//crt version
//		for (String regKey : Common.allRegistryKey) {
//			if(!regKey.equals(Common.REGISTRY_KEY)) {
//				versions.add(regKey); 
//			}
//		}
//
//		int i = 1;
//		while(ver-i >= 2011) {
//			for (String v : versions) {
//				StringBuilder sb = new StringBuilder(v);
//				if(ver-i == 2011) {
//					newVer = "";
//					sb.setLength(sb.length() -6);
//					sb.append("\"");
//				} else {
//					newVer = String.valueOf(ver-i);
//					sb.setLength(sb.length() -6);
//					sb.append(" ");
//					sb.append(newVer);
//					sb.append("\"");
//				}
//	
//				Process process = Runtime.getRuntime().exec("reg query " + sb.toString());
//				BufferedReader br = new BufferedReader(new InputStreamReader(process.getInputStream()));
//				String line = "";
//				boolean foundVer = false;
//				while ((line = br.readLine()) != null) {
//					if(!foundVer) {
//						if (line.indexOf(newVer) < 0 || line.isEmpty()) {
//							continue;
//						}
//					}
//					foundVer = true;
//					
//	                if (line.indexOf("InstallPath") < 0) {
//	                    continue;
//	                }
//	                line = line.replace("InstallPath", "").replace("REG_SZ", "");
//	                line = line.trim();
//	                try {
//	                    br.close();
//	                } catch (IOException ex) {
//	                    ex.printStackTrace();
//	                }
//	                return line;
//					
//				}
//			}
//			i++;
//		}
//
//		throw new Exception("Nu am gasit versiune instalata!");
//
//	}
//	
//
//	public static boolean isPFA(String numeFirma) {
//
//		numeFirma = numeFirma.trim().toUpperCase();
//		
//		//daca este SC sau SRL nu este pfa
//		Pattern p = Pattern.compile("^(\\bSC\\b|\\bS\\.C\\.\\b|\\bS\\.C\\b).*");
//		Matcher m = p.matcher(numeFirma);
//		if (m.matches()) {
//			return false;
//		}
//		p = Pattern.compile(".*(\\bsrl\\b|\\bs\\.r\\.l\\b\\.|\\bs\\.r\\.l\\b|\\bSRL\\b|\\bS\\.R\\.L\\b\\.|\\bS\\.R\\.L\\b)$");
//		m = p.matcher(numeFirma);
//		if (m.matches()) {
//			return false;
//		}
//		
//		p = Pattern.compile(".*(\\bpfa\\b|\\bPFA\\b|\\bp\\.f\\.a\\.\\b|\\bP\\.F\\.A.\\b|\\bp\\.f\\.a\\b|\\bP\\.F\\.A\\b|\\bpersoana fizica\\b|\\bPERSOANA FIZICA\\b).*");
//		m = p.matcher(numeFirma);
//		if (m.matches()) { 
//			return true;
//		}
//		return false;
//	}
//
//
//	public static String getSBUtilsVersion() throws ClassNotFoundException, InstantiationException, IllegalAccessException {
//		sleekbill.utils.jar.JarClassLoader jarLoader = new sleekbill.utils.jar.JarClassLoader ("lib/" + UTILS_JAR_NAME);
//		@SuppressWarnings("rawtypes")
//		Class c = jarLoader.loadClass ("sleekbill.utils.Utils", true); 
//		Object o = c.newInstance(); 
//		if (o instanceof SBUtils) {
//			SBUtils utils = (SBUtils) o;
//			return utils.getVersion();
//		}
//		return "0.0.0";
//	}
//    
//    public static boolean existaMentiune(String mentiune, char tipDoc) {
//        String query = "SELECT count(*) ct FROM mentiuni WHERE mentiune = ? AND tip_document = ? AND deleted = 'n'";
//        ResultSet rs = DBAccess.getRows(query, new Object[]{mentiune, tipDoc});
//        try {
//            if (rs.next()) {
//                if (rs.getInt("ct") > 0) {
//                    return true;
//                }
//            }
//            rs.close();
//        } catch (SQLException ex) {
//            ex.printStackTrace();
//        }
//        return false;
//    }	
//    public static void askAboutTVAIncasare(JFrame parent) {
//        if (Common.platitorTva() && "true".equals(new Config().get(Config.ASK_SISTEM_TVA_INCASARE))) {
//            if (Messages.showQuestionMessage(parent, 
//                    "<html><br>Sleek Bill s-a actualizat conform ultimelor <b>modificari legislative</b> referitoare la <b>plata TVA la incasarea facturilor</b>!<br><br>"
//                    + "Daca va incadrati in categoria firmelor care trebuie sa adopte acest sistem, alegand <b>'DA'</b>, programul va face automat setarile <br>"
//                    + "corespunzatoare. Pentru modificari puteti reveni asupra acestei alegeri din meniu <b>Configurare > Date firma > Generale</b>.<br><br>"
//                    + "                                      Aplicati plata TVA la incasare acum?</html>", 
//                    "Atentie!") == JOptionPane.YES_OPTION) {
//                try {
//                    DBAccess.uidRow("UPDATE date_firma SET tva_la_incasare = 'y' WHERE configuratie_id = (SELECT max(configuratie_id) from date_firma)");
//                } catch (SQLException ex) {
//                    ex.printStackTrace();
//                }
//            }
//           new Config().set(Config.ASK_SISTEM_TVA_INCASARE, "false");
//        }
//    }    
}
