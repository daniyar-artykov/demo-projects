package sleekbill.swingutils;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.GradientPaint;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.LayoutManager;
import java.awt.Paint;
import java.awt.RenderingHints;

import javax.swing.JPanel;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;

public class JGradientPanel extends JPanel {
    // ------------------------------ FIELDS ------------------------------

    public final static int HORIZONTAL = 0;
    public final static int VERTICAL = 1;
    public final static int DIAGONAL_LEFT = 2;
    public final static int DIAGONAL_RIGHT = 3;
    private int direction = HORIZONTAL;
    private boolean cyclic;
    private int maxLength;
    Color startColor = getForeground();
    Color endColor = getBackground();
    // --------------------------- CONSTRUCTORS ---------------------------

    public JGradientPanel(int direction, Color start, Color end) {
        super(new BorderLayout());
        setOpaque(false);
        this.direction = direction;
        startColor = start;
        endColor = end;
    }

    public JGradientPanel(LayoutManager layoutManager) {
        super(layoutManager);
        setOpaque(false);
        this.direction = HORIZONTAL;
    }

    // -------------------------- OTHER METHODS --------------------------
    public void paintComponent(Graphics g) {
        if (isOpaque()) {
            super.paintComponent(g);
            return;
        }

        int width = getWidth();
        int height = getHeight();
		Border border = this.getBorder();
        if(border instanceof TitledBorder && !((TitledBorder)border).getTitle().isEmpty()){
            width -= 4;
            height -= 4;
        }

        // Create the gradient paint
        GradientPaint paint = null;

        switch (direction) {
            case HORIZONTAL: {
                paint = new GradientPaint(0, height / 2, startColor, width, height / 2, endColor, cyclic);
                break;
            }
            case VERTICAL: {
                paint = new GradientPaint(width / 2, 0, startColor, width / 2, maxLength > 0 ? maxLength : height, endColor, cyclic);
                break;
            }
            case DIAGONAL_LEFT: {
                paint = new GradientPaint(0, 0, startColor, width, height, endColor, cyclic);
                break;
            }
            case DIAGONAL_RIGHT: {
                paint = new GradientPaint(width, 0, startColor, 0, height, endColor, cyclic);
                break;
            }
        }

        if (paint == null) {
            throw new RuntimeException("Invalid direction specified in GradientPanel");
        }

        // we need to cast to Graphics2D for this operation
        Graphics2D g2d = (Graphics2D) g;
		g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
		g2d.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);

        // save the old paint
        Paint oldPaint = g2d.getPaint();

        // set the paint to use for this operation
        g2d.setPaint(paint);

        // fill the background using the paint
        g2d.fillRect(0, 0, width, height);

        // restore the original paint
        g2d.setPaint(oldPaint);

        super.paintComponent(g);
    }

    // --------------------- GETTER / SETTER METHODS ---------------------
    public int getDirection() {
        return direction;
    }

    public void setDirection(int direction) {
        this.direction = direction;
    }

    public boolean isCyclic() {
        return cyclic;
    }

    public void setCyclic(boolean cyclic) {
        this.cyclic = cyclic;
    }

    public void setMaxLength(int maxLength) {
        this.maxLength = maxLength;
    }
}
