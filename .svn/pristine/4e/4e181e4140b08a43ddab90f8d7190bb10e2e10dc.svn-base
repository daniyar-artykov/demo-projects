/*
 * SortButtonRenderer.java
 *
 * Created on November 19, 2007, 2:37 PM
 */

package sleekbill.swingutils;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.LinearGradientPaint;
import java.awt.Paint;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.util.LinkedHashMap;

import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.UIManager;
import javax.swing.plaf.basic.BasicButtonUI;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableCellRenderer;

public class SortButtonRenderer extends DefaultTableCellRenderer implements TableCellRenderer {
        public static final int NONE = 0;
        
        public static final int DOWN = 1;
        
        public static final int UP = 2;
        
        int pushedColumn;
        
        LinkedHashMap<Integer,Integer> state;
        
        DefaultTableCellRenderer downButton, upButton;
        
        JTable table;
        
        int column;

	//gradient
	Color color1 = new Color(73, 161, 215);
	Color color2 = new Color(71, 152, 207);
	Color color3 = new Color(46, 130, 184);
	Color color4 = new Color(63, 145, 206);
	Color color5 = new Color(88, 165, 218);
	float[] fractions = {0.0f, 0.1f, 0.5f, 0.9f, 1.0f};
	
        public SortButtonRenderer() {
            pushedColumn = -1;
            state = new LinkedHashMap<Integer,Integer>();
            
            setHorizontalTextPosition(LEFT);
//            setIcon(new BlankIcon());
            setBorder(null);
            //setUI(new HeaderButtonUI());
           
            downButton = new DefaultTableCellRenderer(){
                public void paintComponent(Graphics g){
					int w = getWidth();
					int h = getHeight();

                    Graphics2D g2 = (Graphics2D)g;
					Paint oldPaint = g2.getPaint();
					LinearGradientPaint paint = new LinearGradientPaint(0, 0, 0, h,
							fractions, new Color[]{color1, color2, color3, color4, color5});
					g2.setPaint(paint);

                    g2.setPaintMode();
					g2.fillRect( 0, 0, w, h);
					g2.setPaint(oldPaint);

                    super.paintComponent(g);
                }
            };

            downButton.setHorizontalTextPosition(LEFT);
//            downButton.setIcon(new BevelArrowIcon(BevelArrowIcon.DOWN,false));
            downButton.setIcon(new BevelArrowIcon(BevelArrowIcon.DOWN,true));
            
            upButton = new DefaultTableCellRenderer(){
                public void paintComponent(Graphics g){
					int w = getWidth();
					int h = getHeight();

                    Graphics2D g2 = (Graphics2D)g;
					Paint oldPaint = g2.getPaint();
					LinearGradientPaint paint = new LinearGradientPaint(0, 0, 0, h,
							fractions, new Color[]{color1, color2, color3, color4, color5});
					g2.setPaint(paint);
					 g2.setPaintMode();
					g2.fillRect( 0, 0, w, h);
					g2.setPaint(oldPaint);

                    super.paintComponent(g);
                }
            };
            upButton.setHorizontalTextPosition(LEFT);
            upButton.setIcon(new BevelArrowIcon(BevelArrowIcon.UP,true));
            
        }
        
        public Component getTableCellRendererComponent(JTable table, Object value,boolean isSelected, boolean hasFocus, int row, int column) {
            this.table= table;
            this.column= column;
            DefaultTableCellRenderer cell = this;
            Object obj = state.get(new Integer(column));
            if (obj != null) {
                if (((Integer) obj).intValue() == DOWN) {
                    cell = downButton;
                } else {
                    cell = upButton;
                }
            }

           JTableHeader header = table.getTableHeader();
           if (header != null) {
              cell.setForeground(header.getForeground());
              cell.setBackground(header.getBackground());
              cell.setFont(header.getFont());
           }
           cell.setHorizontalAlignment(JLabel.CENTER);
           cell.setBorder(UIManager.getBorder("TableHeader.cellBorder"));                        
           cell.setText((value == null) ? "" : value.toString());
//           boolean isPressed = (column == pushedColumn);
            //cell.getModel().setPressed(isPressed);
            //button.getModel().setArmed(isPressed);
           return cell;
        }
        
        public void setPressedColumn(int col) {
            pushedColumn = col;
        }
        
        public void setSelectedColumn(int col) {
            if (col < 0){
                state.clear();
                return;
            }
            Integer value = null;
            Object obj = state.get(new Integer(col));
            if (obj == null) {
                value = new Integer(DOWN);
            } else {
                if (((Integer) obj).intValue() == DOWN) {
                    value = new Integer(UP);
                } else {
                    value = new Integer(DOWN);
//                	state.remove(col);
//                	return;
                }
            }
            state.clear();
            state.put(new Integer(col), value);
        }
        
        public int getState(int col) {
            int retValue;
            Object obj = state.get(new Integer(col));
            if (obj == null) {
                retValue = NONE;
            } else {
                if (((Integer) obj).intValue() == DOWN) {
                    retValue = DOWN;
                } else {
                    retValue = UP;
                }
            }
            return retValue;
        }
        
        public class HeaderButtonUI extends BasicButtonUI {
             Color c = UIManager.getColor("TableHeader.foreground");
             public void paint(Graphics g, JComponent c){
                Rectangle clipBounds = g.getClipBounds();
                Dimension size = getSize();
                Rectangle cellRect  = new Rectangle(0, 0, size.width, size.height);
                cellRect.height = size.height;
                paintCell(g, clipBounds);
            }       
    
            private void paintCell(Graphics g, Rectangle cellRect) {
//                JTableHeader header = table.getTableHeader();
//                TableCellRenderer renderer = table.getTableHeader().getDefaultRenderer();
//                TableColumn aColumn = table.getColumnModel().getColumn(column);
//                Component component = renderer.getTableCellRendererComponent(header.getTable(), aColumn.getHeaderValue(),false, false, -1, column);                
                paintComponent(g);
            }               
        }
        
    @Override
    public void paint(Graphics g){
        super.paint(g);
    }


    @Override
    public void paintComponent(Graphics g) {
		int w = getWidth();
		int h = getHeight();

        Graphics2D g2 = (Graphics2D)g;
		g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
		g2.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);

		Paint oldPaint = g2.getPaint();
		LinearGradientPaint paint = new LinearGradientPaint(0, 0, 0, h,
				fractions, new Color[]{color1, color2, color3, color4, color5});
		g2.setPaint(paint);
        
        g2.setPaintMode();
		g2.fillRect( 0, 0, w, h);
		g2.setPaint(oldPaint);

//        FontMetrics fm = g.getFontMetrics();
//        int strWidth = fm.stringWidth( getText() );

        /*if(currentCol == clickedCol) {
            if( sortOrder == SortOrder.ASCENDING )
                new ArrowIcon( ArrowIcon.UP ).paintIcon(this, g, strWidth + 15, 8);
            else if(sortOrder == SortOrder.DESCENDING )
                new ArrowIcon( ArrowIcon.DOWN ).paintIcon(this, g, strWidth + 15, 8);
        }*/




        super.paintComponent(g);
    }

	public LinkedHashMap<Integer, Integer> getState() {
		return state;
	}

    public void setDefaultSortedColumn(int column, boolean asc){
          state.put(new Integer(column), asc ? (new Integer(UP)) : new Integer(DOWN));
    }
    
}