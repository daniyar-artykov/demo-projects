/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package sleekbill.excel;

import java.io.File;
import java.math.BigDecimal;
import java.util.concurrent.Callable;

import jxl.Cell;
import jxl.Sheet;
import jxl.Workbook;
import sleekbill.Common;
import sleekbill.beans.Client;
import sleekbill.beans.Product;
import sleekbill.beans.State;
import sleekbill.beans.Tax;
import sleekbill.entities.ClientEntity;
import sleekbill.entities.ProductEntity;
import sleekbill.entities.StateEntity;
import sleekbill.entities.TaxEntity;

import com.j256.ormlite.misc.TransactionManager;
import sleekbill.Config;
import sleekbill.beans.Stock;

/**
 *
 * @author Andrei
 */
public class Import {

    public static void readClients(final File file) throws Exception {

        Workbook workbook = Workbook.getWorkbook(file);
        final Sheet sheet = workbook.getSheet(0);

        if (sheet.getColumns() != 19) {
            throw new Exception("The number of columns does not match!");
        }

        TransactionManager.callInTransaction(Common.connection.getConnection(), new Callable<Void>() {
            @Override
            public Void call() throws Exception {

                for (int i = 1; i < sheet.getRows(); i++) {

                    String name = sheet.getCell(0, i).getContents();
                    String contact = sheet.getCell(1, i).getContents();
					String tin = sheet.getCell(2, i).getContents();
                    String email = sheet.getCell(3, i).getContents();
                    String phone = sheet.getCell(4, i).getContents();
                    String billingAddress = sheet.getCell(5, i).getContents();
                    String billingZip = sheet.getCell(6, i).getContents();
                    String billingCity = sheet.getCell(7, i).getContents();
                    String billingState = sheet.getCell(8, i).getContents();
                    String billingCounty = sheet.getCell(9, i).getContents();
                    String billingCountry = sheet.getCell(10, i).getContents();
                    String shippingAddress = sheet.getCell(11, i).getContents();
                    String shippingZip = sheet.getCell(12, i).getContents();
                    String shippingCity = sheet.getCell(13, i).getContents();
                    String shippingState = sheet.getCell(14, i).getContents();
                    String shippingCounty = sheet.getCell(15, i).getContents();
                    String shippingCountry = sheet.getCell(16, i).getContents();
                    String details = sheet.getCell(17, i).getContents();
                    String detailsPublic = sheet.getCell(18, i).getContents();

                    if (name == null || name.trim().isEmpty()) {
                        continue;
                    }

                    ClientEntity aux = Client.get(Common.connection.getConnection(), name);
                    boolean bIsNull = (aux == null);

                    Client client;
                    if (bIsNull) {
                        client = new Client();
                    } else {
                        client = new Client(aux);
                    }



                    State billingSB = null;

                    StateEntity billingSE = State.get(Common.connection.getConnection(), billingState.trim(), billingCounty.trim(), billingCity.trim());
                    if (billingSE == null) {
                        State bState = new State();
                        bState.setState(billingState.trim());
                        bState.setCity(billingCity.trim());
                        bState.setCounty(billingCounty.trim());
                        bState.setCountry(billingCountry);
                        bState.create();
                        billingSB = bState;
                    } else {
                        billingSB = new State(billingSE);
                    }

                    State shippingSB = null;
//                    if (shippingState.trim().isEmpty() && shippingCounty.trim().isEmpty() && shippingCity.trim().isEmpty()) {
//                        shippingSB = billingSB;
//                        shippingAddress = billingAddress;
//                        shippingZip = billingZip;
//                        shippingCity = billingCity;
//                    } else {
                    StateEntity shippingSE = State.get(Common.connection.getConnection(), shippingState.trim(), shippingCounty.trim(), shippingCity.trim());
                    if (shippingSE == null) {
                        State sState = new State();
                        sState.setState(shippingState.trim());
                        sState.setCity(shippingCity.trim());
                        sState.setCounty(shippingCounty.trim());
                        sState.setCountry(shippingCountry);
                        sState.create();
                        shippingSB = sState;
                    } else {
                        shippingSB = new State(shippingSE);
                    }
//                    }

                    client.setName(name);
                    client.setContact(contact);
                    client.setEmail(email);
                    client.setTelephone(phone);
                    client.setBillingAddress(billingAddress);
                    client.setBillingZip(billingZip);
                    client.setBillingCity(billingCity);
                    client.setBillingState(billingSB);
                    client.setShippingAddress(shippingAddress);
                    client.setShippingZip(shippingZip);
                    client.setShippingCity(shippingCity);
                    client.setShippingState(shippingSB);
                    client.setDetails(details);
                    client.setDetailsPublic(detailsPublic);
					client.setTin(tin);

                    if (bIsNull) {
                        client.create();
                    } else {
                        client.update();
                    }
                }
                return null;
            }
        });
    }

    public static void readProducts(final File file) throws Exception {
        Workbook workbook = Workbook.getWorkbook(file);
        final Sheet sheet = workbook.getSheet(0);
        
        final boolean stocks = Common.keepStocks();
        
        int columns = 6;
        if(!stocks){
            columns = 5;
        }

        if (sheet.getColumns() != columns) {
            throw new Exception("The number of columns does not match!");
        }

        TransactionManager.callInTransaction(Common.connection.getConnection(), new Callable<Void>() {
            @Override
            public Void call() throws Exception {

                for (int i = 1; i < sheet.getRows(); i++) {

                    String name = sheet.getCell(0, i).getContents();
                    String price = sheet.getCell(1, i).getContents();
					String uom = sheet.getCell(2, i).getContents();
                    String tax = sheet.getCell(3, i).getContents();
                    String description = sheet.getCell(4, i).getContents();
                    String quantity = "";
                    if (stocks) {
                        quantity = sheet.getCell(5, i).getContents();
                    }

                    if (name == null || name.trim().isEmpty()) {
                        continue;
                    }

                    Tax taxBean;
                    TaxEntity taxEntity = Tax.get(Common.connection.getConnection(), new BigDecimal((tax == null || tax.isEmpty()) ? "0" : tax));
                    if (taxEntity == null) {
                        taxBean = new Tax();
                        taxBean.setTaxName("Imported Tax");
                        taxBean.setTaxPercentage(new BigDecimal((tax == null || tax.isEmpty()) ? "0" : tax));
                        taxBean.create();
                    } else {
                        taxBean = new Tax(taxEntity);
                    }

                    ProductEntity aux = Product.getUndeletedByName(Common.connection.getConnection(), name);
                    boolean bIsNull = (aux == null);

                    Product product;
                    if (bIsNull) {
                        product = new Product();
                    } else {
                        product = new Product(aux);
                    }

                    try {

                        product.setName(name);
                        product.setPrice(new BigDecimal((price == null || price.isEmpty()) ? "0" : price.replace(",", ".")));
						product.setMeasuringUnit(uom);
                        product.setTax(taxBean);
                        product.setDescription(description);
                    } catch (Exception ex) {
                        continue;
                    }

                    if (bIsNull) {
                        product.create();
                    } else {
                        product.update();
                    }
                    
                    if (stocks) {
                        Stock stock = Stock.getByProductId(Common.connection.getConnection(), product.getId());
                        if (stock == null) {
                            stock = new Stock();
                            stock.setProduct(product);
                            stock.setQuantity((quantity == null || quantity.trim().isEmpty()) ? null : new BigDecimal(quantity));
                            stock.create();
                        } else {
                            stock.setProduct(product);
                            stock.setQuantity((quantity == null || quantity.trim().isEmpty()) ? null : new BigDecimal(quantity));
                            stock.update();
                        }
                    }               
                }
                return null;
            }
        });
    }

    private boolean isRowEmpty(Cell[] cells) {
        for (Cell cell : cells) {
            String contents = cell.getContents();
            if (contents != null && contents.trim().length() == 0) {
                return false;
            }
        }
        return true;
    }
}
