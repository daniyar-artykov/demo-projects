/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package sleekbill.frames;

import com.j256.ormlite.dao.Dao;
import com.j256.ormlite.dao.DaoManager;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.sql.SQLException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import sleekbill.Common;
import sleekbill.Messages;
import sleekbill.beans.InvoicePayment;
import sleekbill.beans.SBDaoException;
import sleekbill.beans.Tax;
import sleekbill.beans.TaxCombo;
import sleekbill.entities.TaxEntity;
import sleekbill.frames.autosuggesterdata.SBACTaxes;
import sleekbill.swingutils.autosuggesters.AutosuggesterItem;
import sleekbill.util.SBSwingUtils;

/**
 *
 * @author Andrei
 */
public class JDialogMultiTax extends javax.swing.JDialog implements DocumentListener{

     SBACTaxes asData = new SBACTaxes(true);
	 public Tax lastTax = null;
	 private Tax tax = null;

    /**
     * Creates new form JDialogCityData
     */
	 
	public JDialogMultiTax(java.awt.Dialog parent, boolean modal, String name, String percentage) {
		super(parent, modal);
		initComponents();
		setLocationRelativeTo(parent);
		
		jTextFieldName.setText(name);
		jTextFieldPercentage.setText(percentage);
		
		String note = jLabelNote.getText();
		jLabelNote.setText(note.replace("#name1#", Common.educationCess.getTaxName()).replace("#name2#", Common.sheCess.getTaxName()));
		
		String educationCessText = jCheckBoxEducationCess.getText();
		jCheckBoxEducationCess.setText(educationCessText.replace("#name#", Common.educationCess.getTaxName()).replace("#percentage#", Common.educationCess.getTaxPercentage().toString()));
		jCheckBoxEducationCess.setSelected(true);
		
		String sheCessText = jCheckBoxSheCess.getText();
		jCheckBoxSheCess.setText(sheCessText.replace("#name#", Common.sheCess.getTaxName()).replace("#percentage#", Common.sheCess.getTaxPercentage().toString()));
		jCheckBoxSheCess.setSelected(true);
		
		String sbCessText = jCheckBoxSBCess.getText();
		jCheckBoxSBCess.setText(sbCessText.replace("#name#", Common.sbCess.getTaxName()).replace("#percentage#", Common.sbCess.getTaxPercentage().toString()));
		jCheckBoxSBCess.setSelected(false);
		jCheckBoxSBCess.setVisible(false);
		
		
		SBSwingUtils.addContextMenuToChildren(this);
		SBSwingUtils.applyFocusBorder(this);
		SBSwingUtils.setDecimalField(jTextFieldPercentage, Common.PRECISION);

		setMandatory();
		checkMandatory();
	}
	 
	public JDialogMultiTax(java.awt.Dialog parent, boolean modal, Tax tax) {
		this(parent, modal, tax.getTaxName(), tax.getTaxPercentage().toString());
		this.tax = tax;
		setTitle("Edit Tax With Cess");
		jCheckBoxSheCess.setSelected(false);
		jCheckBoxEducationCess.setSelected(false);
		jCheckBoxSBCess.setSelected(false);
		 try {
			List<TaxEntity> multi = Tax.getMulti(Common.connection.getConnection(), tax.getId());
			for(TaxEntity t : multi){
				if(t.getId() == Common.sheCess.getId()){
					jCheckBoxSheCess.setSelected(true);
				}
				if(t.getId() == Common.educationCess.getId()){
					jCheckBoxEducationCess.setSelected(true);
				}
				if(t.getId() == Common.sbCess.getId()){
					jCheckBoxSBCess.setSelected(true);
				}
			}
			jTextFieldPercentage.setText(multi.get(0).getTaxPercentage().toString());
			
		 } catch (Exception ex) {
			 ex.printStackTrace();
		 }
	}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanelSuper = new javax.swing.JPanel();
        jPanelSuperContent = new javax.swing.JPanel();
        jPanelContent = new javax.swing.JPanel();
        jPanelFields = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jTextFieldName = new javax.swing.JTextField();
        jTextFieldPercentage = new javax.swing.JTextField();
        jPanelButtons = new javax.swing.JPanel();
        jButtonSave = new javax.swing.JButton();
        jPanelFields2 = new javax.swing.JPanel();
        jLabelNote = new javax.swing.JLabel();
        jPanelTitle = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanelFields1 = new javax.swing.JPanel();
        jCheckBoxEducationCess = new javax.swing.JCheckBox();
        jCheckBoxSheCess = new javax.swing.JCheckBox();
        jCheckBoxSBCess = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Create Tax With Cess");
        setMaximumSize(new java.awt.Dimension(400, 300));
        setMinimumSize(new java.awt.Dimension(400, 300));
        setPreferredSize(new java.awt.Dimension(400, 300));
        setResizable(false);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanelSuper.setBackground(new java.awt.Color(229, 235, 242));
        jPanelSuper.setLayout(new java.awt.GridBagLayout());

        jPanelSuperContent.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(195, 210, 219), 1, true));
        jPanelSuperContent.setLayout(new java.awt.GridBagLayout());

        jPanelContent.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(203, 209, 213)));
        jPanelContent.setLayout(new java.awt.GridBagLayout());

        jPanelFields.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 0, 0, 0, new java.awt.Color(203, 209, 213)));
        jPanelFields.setLayout(new java.awt.GridBagLayout());

        jLabel5.setText("Multi Tax Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanelFields.add(jLabel5, gridBagConstraints);

        jLabel6.setText("Primary Tax Percentage");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanelFields.add(jLabel6, gridBagConstraints);

        jTextFieldName.setMaximumSize(new java.awt.Dimension(160, 20));
        jTextFieldName.setMinimumSize(new java.awt.Dimension(160, 20));
        jTextFieldName.setPreferredSize(new java.awt.Dimension(160, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanelFields.add(jTextFieldName, gridBagConstraints);

        jTextFieldPercentage.setMaximumSize(new java.awt.Dimension(160, 20));
        jTextFieldPercentage.setMinimumSize(new java.awt.Dimension(160, 20));
        jTextFieldPercentage.setPreferredSize(new java.awt.Dimension(160, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanelFields.add(jTextFieldPercentage, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        jPanelContent.add(jPanelFields, gridBagConstraints);

        jPanelButtons.setBackground(new java.awt.Color(246, 246, 246));
        jPanelButtons.setLayout(new java.awt.GridBagLayout());

        jButtonSave.setIcon(new ImageIcon("./images/buttons/ico_check.png"));
        jButtonSave.setText("Save");
        jButtonSave.setName("bSave"); // NOI18N
        jButtonSave.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonSaveMouseClicked(evt);
            }
        });
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanelButtons.add(jButtonSave, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanelContent.add(jPanelButtons, gridBagConstraints);

        jPanelFields2.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 0, 1, 0, new java.awt.Color(203, 209, 213)));
        jPanelFields2.setLayout(new java.awt.GridBagLayout());

        jLabelNote.setText("<html>Note: #name1# and #name2# will be added to the amount of the Primary Tax (just like the service Tax)</html>");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanelFields2.add(jLabelNote, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        jPanelContent.add(jPanelFields2, gridBagConstraints);

        jPanelTitle.setBackground(new java.awt.Color(253, 253, 253));
        jPanelTitle.setLayout(new java.awt.GridBagLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("Create Tax With Cess");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanelTitle.add(jLabel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanelContent.add(jPanelTitle, gridBagConstraints);

        jPanelFields1.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 0, 1, 0, new java.awt.Color(203, 209, 213)));
        jPanelFields1.setLayout(new java.awt.GridBagLayout());

        jCheckBoxEducationCess.setText("Add \"#name#\" (#percentage#%)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanelFields1.add(jCheckBoxEducationCess, gridBagConstraints);

        jCheckBoxSheCess.setText("Add \"#name#\" (#percentage#%)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanelFields1.add(jCheckBoxSheCess, gridBagConstraints);

        jCheckBoxSBCess.setText("Add \"#name#\" (#percentage#%)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanelFields1.add(jCheckBoxSBCess, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        jPanelContent.add(jPanelFields1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        jPanelSuperContent.add(jPanelContent, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(15, 15, 15, 15);
        jPanelSuper.add(jPanelSuperContent, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        getContentPane().add(jPanelSuper, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
		lastTax = null;
		if (jTextFieldName.getText().isEmpty() || jTextFieldPercentage.getText().isEmpty()) {
			Messages.showErrorMessage(this, "<html>The fields \"Multi Tax Name\" and \"Primary Tax Percentage\" are mandatory!</html>", "Error");
			return;
		}

		if (hasLettersOrNonNumbers(jTextFieldPercentage.getText())) {
			Messages.showErrorMessage(this, "<html>Please supply a number between 0 and 100!</html>", "Error");
			jTextFieldPercentage.requestFocus();
			jTextFieldPercentage.selectAll();
			return;
		}

		BigDecimal percentage = new BigDecimal(jTextFieldPercentage.getText());

		if (!(percentage.compareTo(BigDecimal.ZERO) >= 0 && percentage.compareTo(new BigDecimal(100)) <= 0)) {
			Messages.showErrorMessage(this, "<html>The percentage must be between 1 and 100!</html>", "Error");
			jTextFieldPercentage.requestFocus();
			jTextFieldPercentage.selectAll();
			return;
		}
		try {
			if (null != Tax.get(Common.connection.getConnection(), jTextFieldName.getText()) && null == this.tax) {
				if (Messages.showQuestionMessage(this, "<html><center>A tax with this name already exists.<br>Would you like to add another one with the same name?</center></html>", "Warning") != JOptionPane.YES_OPTION) {
					return;
				}
			}
		} catch (Exception ex) {
			ex.printStackTrace();
		}

		try {//to add a combo
			TaxEntity educationCess = new TaxEntity();
			educationCess.setId(Common.educationCess.getId());

			TaxEntity sheCess = new TaxEntity();
			sheCess.setId(Common.sheCess.getId());
			
			TaxEntity sbCess = new TaxEntity();
			sbCess.setId(Common.sbCess.getId());

			Dao<TaxEntity, Integer> dao = DaoManager.createDao(Common.connection.getConnection(), TaxEntity.class);

			dao.refresh(educationCess);
			dao.refresh(sheCess);
			
			BigDecimal sb = BigDecimal.ZERO;
			if(jCheckBoxSBCess.isSelected()){
				sb = Common.sbCess.getTaxPercentage();
			}
			percentage = percentage.add(sb);
			
			BigDecimal she = BigDecimal.ZERO;
			if(jCheckBoxSheCess.isSelected()){
				she = percentage.divide(new BigDecimal(100)).multiply(sheCess.getTaxPercentage());
			}
			
			BigDecimal education = BigDecimal.ZERO;
			if(jCheckBoxEducationCess.isSelected()){
				education = percentage.divide(new BigDecimal(100)).multiply(educationCess.getTaxPercentage());
			}

			TaxEntity tax = new TaxEntity();
			tax.setTaxName(jTextFieldName.getText());
			tax.setTaxPercentage(percentage.add(she).add(education).setScale(2, RoundingMode.HALF_UP));
			tax.setType(Tax.TYPE_MULTI);
			tax.setExplicitOrder(false);
			if (this.tax != null) {
				tax.setIsDefaultTax(this.tax.isDefaultTax());
			}
			if (0 == Tax.getCountWithoutCess(Common.connection.getConnection())) {
				tax.setIsDefaultTax(true);
			}
			dao.create(tax);
			lastTax = new Tax(tax.getId());

			TaxEntity taxEntity = new TaxEntity();
			taxEntity.setTaxName(jTextFieldName.getText());
			taxEntity.setTaxPercentage(percentage.subtract(sb).setScale(2, RoundingMode.HALF_UP));
			taxEntity.setDeleted("y");
			dao.create(taxEntity);

			TaxCombo tc0 = new TaxCombo();
			tc0.setComponentTax(taxEntity);
			tc0.setMainTax(tax);
			tc0.create();

			if (jCheckBoxEducationCess.isSelected()) {
				TaxCombo tc1 = new TaxCombo();
				tc1.setComponentTax(educationCess);
				tc1.setMainTax(tax);
				tc1.create();
			}

			if (jCheckBoxSheCess.isSelected()) {
				TaxCombo tc2 = new TaxCombo();
				tc2.setComponentTax(sheCess);
				tc2.setMainTax(tax);
				tc2.create();
			}
			
			if (jCheckBoxSBCess.isSelected()) {
				TaxCombo tc3 = new TaxCombo();
				tc3.setComponentTax(sbCess);
				tc3.setMainTax(tax);
				tc3.create();
			}

			if (this.tax != null) {
				this.tax.setDeleted("y");
				this.tax.update();
			}

		} catch (Exception ex) {
			Messages.showErrorMessage(this, ex.getMessage(), "Error");
			ex.printStackTrace();
			return;
		}
		dispose();
    }//GEN-LAST:event_jButtonSaveActionPerformed

    private void jButtonSaveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonSaveMouseClicked

		if(jTextFieldPercentage.getText().isEmpty() || jTextFieldName.getText().isEmpty()){
			Messages.showErrorMessage(this, "<html>The fields \"Multi Tax Name\" and \"Primary Tax Percentage\" are mandatory!</html>", "Error");
		}
    }//GEN-LAST:event_jButtonSaveMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JDialogMultiTax.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JDialogMultiTax.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JDialogMultiTax.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JDialogMultiTax.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JDialogMultiTax dialog = new JDialogMultiTax(new javax.swing.JDialog(), true, "xxx", "yyy");
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonSave;
    private javax.swing.JCheckBox jCheckBoxEducationCess;
    private javax.swing.JCheckBox jCheckBoxSBCess;
    private javax.swing.JCheckBox jCheckBoxSheCess;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabelNote;
    private javax.swing.JPanel jPanelButtons;
    private javax.swing.JPanel jPanelContent;
    private javax.swing.JPanel jPanelFields;
    private javax.swing.JPanel jPanelFields1;
    private javax.swing.JPanel jPanelFields2;
    private javax.swing.JPanel jPanelSuper;
    private javax.swing.JPanel jPanelSuperContent;
    private javax.swing.JPanel jPanelTitle;
    private javax.swing.JTextField jTextFieldName;
    private javax.swing.JTextField jTextFieldPercentage;
    // End of variables declaration//GEN-END:variables

    private void setMandatory() {
		jTextFieldName.getDocument().addDocumentListener(this);
		jTextFieldPercentage.getDocument().addDocumentListener(this);
    }

    private void checkMandatory() {
		jButtonSave.setEnabled(!jTextFieldPercentage.getText().isEmpty() && !jTextFieldName.getText().isEmpty());
	}

    public boolean hasLettersOrNonNumbers(String s) {
        if (s == null) {
            return false;
        }
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            boolean bResult = false;
            if (Character.isLetter(c)) {
                bResult = true;
            }
            if (!Character.isDigit(c)) {
                bResult = true;
            }
            if (bResult && c != '.') {
                return true;
            }
        }
        return false;
	}

	@Override
	public void insertUpdate(DocumentEvent e) {
		checkMandatory();
	}

	@Override
	public void removeUpdate(DocumentEvent e) {
		checkMandatory();
	}

	@Override
	public void changedUpdate(DocumentEvent e) {
		checkMandatory();
	}
}
