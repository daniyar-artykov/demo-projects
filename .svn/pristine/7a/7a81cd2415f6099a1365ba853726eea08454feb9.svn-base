/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package sleekbill.frames;

import java.awt.Color;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.math.BigDecimal;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JRootPane;
import javax.swing.SwingUtilities;
import javax.swing.ToolTipManager;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;

import sleekbill.Common;
import sleekbill.Messages;
import sleekbill.beans.Tax;
import sleekbill.entities.TaxEntity;
import sleekbill.frames.records.Record;
import sleekbill.frames.records.TaxRecord;
import sleekbill.swingutils.CellLabel;
import sleekbill.swingutils.LabelGlassPane;
import sleekbill.swingutils.RadioButtonCellEditor;
import sleekbill.swingutils.RadioButtonCellRenderer;
import sleekbill.swingutils.SBAbstractTableModel;
import sleekbill.swingutils.SBJTable;
import sleekbill.util.SBSwingUtils;

import com.j256.ormlite.dao.Dao;
import com.j256.ormlite.dao.DaoManager;
import com.j256.ormlite.stmt.PreparedQuery;
import com.j256.ormlite.stmt.UpdateBuilder;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import sleekbill.swingutils.EditDeleteButtonCell;

/**
 *
 * @author Andrei
 */
public class JDialogTaxes extends javax.swing.JDialog {

    LabelGlassPane glassPane = new LabelGlassPane();
    public Tax lastTax = null;

    /**
     * Creates new form JDialogTaxesGrid
     */
    public JDialogTaxes(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(parent);

        JRootPane pane = SwingUtilities.getRootPane(this);
        pane.setGlassPane(glassPane);
        
        SBSwingUtils.applyFocusBorder(pane);
        SBSwingUtils.addContextMenuToChildren(pane);
        SBSwingUtils.setDecimalField(jTextFieldPercentage, 3);
        
        setupMandatory();
        checkMandatory();
		refreshFieldsByCount();
    }
    
     public JDialogTaxes(java.awt.Dialog parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(parent);

        JRootPane pane = SwingUtilities.getRootPane(this);
        pane.setGlassPane(glassPane);
        
        SBSwingUtils.applyFocusBorder(pane);
        SBSwingUtils.addContextMenuToChildren(pane);
        SBSwingUtils.setDecimalField(jTextFieldPercentage, 3);
        
        setupMandatory();
        checkMandatory();
		refreshFieldsByCount();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPTVAAll = new javax.swing.JPanel();
        jPanelUpperBorder = new javax.swing.JPanel();
        jPanelButtons = new javax.swing.JPanel();
        jPanelSearchFields = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldPercentage = new javax.swing.JTextField();
        jButtonAdd = new javax.swing.JButton();
        jTextFieldName = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jPanelUpperTitle = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jPanelLowerBorder = new javax.swing.JPanel();
        jPanelTable = new javax.swing.JPanel();
        jSPTaxes = new javax.swing.JScrollPane();
        jTableTaxes = new TaxesTable();
        jTableTaxes.setModel(new TaxesTableModel());
        new EditDeleteButtonCell((SBJTable) jTableTaxes, jTableTaxes.getColumnCount()-1,EditDeleteButtonCell.HORIZONTAL_ALIGNMENT, true);
        jLabelLegend = new javax.swing.JLabel();
        jLabelLegend2 = new javax.swing.JLabel();
        jButtonAddCombined = new javax.swing.JButton();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 40), new java.awt.Dimension(0, 40), new java.awt.Dimension(0, 40));
        jPanelLowerTitle = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Taxes");
        setMinimumSize(new java.awt.Dimension(800, 600));
        setPreferredSize(new java.awt.Dimension(800, 600));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPTVAAll.setBackground(new java.awt.Color(229, 235, 242));
        jPTVAAll.setLayout(new java.awt.GridBagLayout());

        jPanelUpperBorder.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(195, 210, 219), 1, true));
        jPanelUpperBorder.setLayout(new java.awt.GridBagLayout());

        jPanelButtons.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(203, 209, 213)));
        jPanelButtons.setOpaque(false);
        jPanelButtons.setLayout(new java.awt.GridBagLayout());

        jPanelSearchFields.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Tax Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanelSearchFields.add(jLabel1, gridBagConstraints);

        jLabel2.setText("Tax Percentage");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanelSearchFields.add(jLabel2, gridBagConstraints);

        jTextFieldPercentage.setName("tfPercentage"); // NOI18N
        jTextFieldPercentage.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanelSearchFields.add(jTextFieldPercentage, gridBagConstraints);

        jButtonAdd.setIcon(new ImageIcon("./images/buttons/nav_ico_new.png"));
        jButtonAdd.setText("Add Tax");
        jButtonAdd.setName("bAdd"); // NOI18N
        jButtonAdd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButtonAddMousePressed(evt);
            }
        });
        jButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanelSearchFields.add(jButtonAdd, gridBagConstraints);

        jTextFieldName.setName("tfName"); // NOI18N
        jTextFieldName.setPreferredSize(new java.awt.Dimension(150, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanelSearchFields.add(jTextFieldName, gridBagConstraints);

        jLabel5.setText("%");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 5);
        jPanelSearchFields.add(jLabel5, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelButtons.add(jPanelSearchFields, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        jPanelUpperBorder.add(jPanelButtons, gridBagConstraints);

        jPanelUpperTitle.setBackground(new java.awt.Color(253, 253, 253));
        jPanelUpperTitle.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 0, 1, new java.awt.Color(203, 209, 213)));
        jPanelUpperTitle.setLayout(new java.awt.GridBagLayout());

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setText("Add Single Tax");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanelUpperTitle.add(jLabel3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        jPanelUpperBorder.add(jPanelUpperTitle, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(15, 15, 15, 15);
        jPTVAAll.add(jPanelUpperBorder, gridBagConstraints);

        jPanelLowerBorder.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(195, 210, 219), 1, true));
        jPanelLowerBorder.setLayout(new java.awt.GridBagLayout());

        jPanelTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(203, 209, 213)));
        jPanelTable.setLayout(new java.awt.GridBagLayout());

        jSPTaxes.setPreferredSize(new java.awt.Dimension(600, 300));
        jSPTaxes.getViewport().setBackground(new Color(249,249,249));

        jTableTaxes.setName("tTableTaxes"); // NOI18N
        jSPTaxes.setViewportView(jTableTaxes);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanelTable.add(jSPTaxes, gridBagConstraints);

        jLabelLegend.setText("<html><b>(Tax 1, Tax 2)</b> - taxes applied to value</html>");
        jLabelLegend.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabelLegend.setPreferredSize(new java.awt.Dimension(300, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 1, 5);
        jPanelTable.add(jLabelLegend, gridBagConstraints);

        jLabelLegend2.setText("<html><b>(Tax 1, Tax 2)*</b> - Tax 2 applied after Tax 1</html>");
        jLabelLegend2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabelLegend2.setPreferredSize(new java.awt.Dimension(300, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 5, 5, 5);
        jPanelTable.add(jLabelLegend2, gridBagConstraints);

        jButtonAddCombined.setIcon(new ImageIcon("./images/buttons/nav_ico_new.png"));
        jButtonAddCombined.setText("Add Tax Group");
        jButtonAddCombined.setPreferredSize(new java.awt.Dimension(160, 23));
        jButtonAddCombined.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButtonAddCombinedMousePressed(evt);
            }
        });
        jButtonAddCombined.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddCombinedActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        jPanelTable.add(jButtonAddCombined, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridheight = 2;
        jPanelTable.add(filler1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        jPanelLowerBorder.add(jPanelTable, gridBagConstraints);

        jPanelLowerTitle.setBackground(new java.awt.Color(253, 253, 253));
        jPanelLowerTitle.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 0, 1, new java.awt.Color(203, 209, 213)));
        jPanelLowerTitle.setLayout(new java.awt.GridBagLayout());

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel4.setText("Taxes");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanelLowerTitle.add(jLabel4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        jPanelLowerBorder.add(jPanelLowerTitle, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(0, 15, 15, 15);
        jPTVAAll.add(jPanelLowerBorder, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        getContentPane().add(jPTVAAll, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddActionPerformed
        try {

            if (jTextFieldName.getText().isEmpty() || jTextFieldPercentage.getText().isEmpty()) {
                glassPane.showError("The fields \"Tax Name\" and \"Tax Percentage\" are mandatory.");
                return;
            }
			
			 if (jTextFieldName.getText().length() > 20) {
                glassPane.showError("The \"Tax Name\" cannot be longer than 20 characters.");
                return;
            }

            if (hasLettersOrNonNumbers(jTextFieldPercentage.getText())) {
                glassPane.showError("Please supply a number between 0 and 100.");
                jTextFieldPercentage.requestFocus();
                jTextFieldPercentage.selectAll();
                return;
            }

            BigDecimal percentage = new BigDecimal(jTextFieldPercentage.getText());

			if (percentage.compareTo(BigDecimal.ZERO) <= 0 || percentage.compareTo(new BigDecimal(100)) > 0) {
				glassPane.showError("The percentage must be between 1 and 100.");
				jTextFieldPercentage.requestFocus();
				jTextFieldPercentage.selectAll();
				return;
			}

			if (null != Tax.get(Common.connection.getConnection(), jTextFieldName.getText())) {
				if (Messages.showQuestionMessage(this, "<html><center>A tax with this name already exists.<br>Would you like to add another one with the same name?</center></html>", "Warning") != JOptionPane.YES_OPTION) {
					return;
				}
			}
			
			if (Messages.showQuestionMessage(this, "Are Education Cess and SHE Cess applicable to this tax?", "Confirmation") == JOptionPane.YES_OPTION) {
				JDialogMultiTax jdmt = new JDialogMultiTax(this, rootPaneCheckingEnabled, jTextFieldName.getText(), jTextFieldPercentage.getText());
				jdmt.setVisible(true);
				Tax tax = jdmt.lastTax;

				if (tax != null) {
					TaxesTableModel ttm = (TaxesTableModel) jTableTaxes.getModel();
					addRowSoft((SBJTable) jTableTaxes, ttm);
					glassPane.showOK("You have successfully added the tax \"" + tax.getTaxName() + "\"!");
					lastTax = tax;
					jTextFieldName.setText("");
					jTextFieldPercentage.setText("");
				}
				return;
			}

			Tax tax = new Tax();

			if (0 == Tax.getCountWithoutCess(Common.connection.getConnection())) {
				tax.setIsDefaultTax(true);
			}

            tax.setTaxName(jTextFieldName.getText());
            tax.setTaxPercentage(percentage);

            tax.create();
            lastTax = tax;
            TaxesTableModel ttm = (TaxesTableModel) jTableTaxes.getModel();
            addRowSoft((SBJTable) jTableTaxes, ttm);
            glassPane.showOK("You have successfully added the tax \"" + jTextFieldName.getText() + "\"!");

            jTextFieldName.setText("");
            jTextFieldPercentage.setText("");
        } catch (Exception ex) {
            glassPane.showError("Error adding tax: " + ex.getMessage());
            ex.printStackTrace();
        }
		refreshFieldsByCount();
    }//GEN-LAST:event_jButtonAddActionPerformed

    private void jButtonAddMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonAddMousePressed
        if (!jButtonAdd.isEnabled()) {
            if (jTextFieldName.getText().isEmpty() || jTextFieldPercentage.getText().isEmpty()) {
                glassPane.showError("The fields \"Tax Name\" and \"Tax Percentage\" are mandatory!");
                return;
            }

            if (hasLettersOrNonNumbers(jTextFieldPercentage.getText())) {
                glassPane.showError("Please supply a number between 0 and 100!");
                jTextFieldPercentage.requestFocus();
                jTextFieldPercentage.selectAll();
                return;
            }

            BigDecimal percentage = new BigDecimal(jTextFieldPercentage.getText());

            if (!(percentage.compareTo(BigDecimal.ZERO) >= 0 && percentage.compareTo(new BigDecimal(100)) <= 0)) {
                glassPane.showError("The percentage must be between 1 and 100!");
                jTextFieldPercentage.requestFocus();
                jTextFieldPercentage.selectAll();
                return;
            }
        }
    }//GEN-LAST:event_jButtonAddMousePressed

    private void jButtonAddCombinedMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonAddCombinedMousePressed
        if(!jButtonAddCombined.isEnabled()){
			glassPane.showError("You need at least two single taxes to define a Combined Tax");
		}
    }//GEN-LAST:event_jButtonAddCombinedMousePressed

    private void jButtonAddCombinedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddCombinedActionPerformed
        JDialogCombinedTax jDialogCombinedTax = new JDialogCombinedTax(this, true, jTextFieldName.getText());
        jDialogCombinedTax.setVisible(true);
        Tax tax = jDialogCombinedTax.lastTax;

        if(tax != null){
            TaxesTableModel ttm = (TaxesTableModel) jTableTaxes.getModel();
            addRowSoft((SBJTable) jTableTaxes, ttm);
            glassPane.showOK("You have successfully added the tax \"" + tax.getTaxName() + "\"!");
            lastTax = tax;
        }
		refreshFieldsByCount();
    }//GEN-LAST:event_jButtonAddCombinedActionPerformed

    public boolean hasLettersOrNonNumbers(String s) {
        if (s == null) {
            return false;
        }
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            boolean bResult = false;
            if (Character.isLetter(c)) {
                bResult = true;
            }
            if (!Character.isDigit(c)) {
                bResult = true;
            }
            if (bResult && c != '.') {
                return true;
            }
        }
        return false;
    }

    public static void addRowSoft(SBJTable table, SBAbstractTableModel tableModel) {
        tableModel.refreshDataNoFire();
        tableModel.fireTableRowsInserted(tableModel.getRowCount() - 1, tableModel.getRowCount() - 1);
        if (tableModel.getRowCount() == 1) {
            table.setPreferredColumnWidths();
        }
        table.getSelectionModel().setSelectionInterval(tableModel.getRowCount() - 1, tableModel.getRowCount() - 1);
        /* kind-of-bug fix*/
        SwingUtilities.invokeLater(table);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JDialogTaxes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JDialogTaxes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JDialogTaxes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JDialogTaxes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JDialogTaxes dialog = new JDialogTaxes(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    private void setupMandatory() {
        jTextFieldName.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                checkMandatory();
            }
            
            @Override
            public void removeUpdate(DocumentEvent e) {
                checkMandatory();
            }
            
            @Override
            public void changedUpdate(DocumentEvent e) {
                checkMandatory();
            }
        });
        
        jTextFieldPercentage.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                checkMandatory();
            }
            
            @Override
            public void removeUpdate(DocumentEvent e) {
                checkMandatory();
            }
            
            @Override
            public void changedUpdate(DocumentEvent e) {
                checkMandatory();
            }
        });
    }

    private void checkMandatory() {
        if (jTextFieldName.getText().isEmpty() || jTextFieldPercentage.getText().isEmpty()) {
            jButtonAdd.setEnabled(false);
            return;
        }

        if (hasLettersOrNonNumbers(jTextFieldPercentage.getText())) {
            jButtonAdd.setEnabled(false);
            return;
        }

        BigDecimal percentage = new BigDecimal(jTextFieldPercentage.getText());

        if (!(percentage.compareTo(BigDecimal.ZERO) >= 0 && percentage.compareTo(new BigDecimal(100)) <= 0)) {
            jButtonAdd.setEnabled(false);
            return;
        }
        jButtonAdd.setEnabled(true);
    }

    public class TaxesTableModel extends SBAbstractTableModel {

        boolean casaMarcat = false;

        public TaxesTableModel() {
            columnNames = new String[]{"No.", "Tax Name", "Tax Percentage", "Is default?", "Action"};
            preferredColumnWidths = new int[]{5, 400, 70, 40, 40};
            refreshDataNoFire();
        }

        public boolean isCellEditable(int row, int col) {
            if (col >= 3) {
                return true;
            } else {
                return false;
            }
        }

        public void setValueAt(Object value, int row, int col) {
            if (col == 3) {
                boolean bOld = ((Boolean) data.get(row).data[3]).booleanValue();
                boolean bNew = ((Boolean) value).booleanValue();
                if (!bOld && bNew) { //if another radio has been selected
                    for (int i = 0; i < getRowCount(); i++) {
                        if (i == row) {
                            data.get(row).data[3] = Boolean.TRUE;
                            updateTVA(getId(row), true);
                        } else {
                            data.get(i).data[3] = Boolean.FALSE;
                        }
                        fireTableCellUpdated(i, col);
                        fireTableCellUpdated(i, col + 1);
                    }
                }
            }
        }

        @Override
		public ArrayList<Record> getData() {
			ArrayList<Record> results = new ArrayList<Record>();
			try {
				Dao<TaxEntity, Integer> taxesDao = DaoManager.createDao(
						Common.connection.getConnection(), TaxEntity.class);

				PreparedQuery<TaxEntity> pq = taxesDao.queryBuilder().where().eq(Tax.DELETED, "n").prepare();
				List<TaxEntity> list = taxesDao.query(pq);

				for (TaxEntity tax : list) {
					String taxName = tax.getTaxName();
					if (tax.getType().equals(Tax.TYPE_COMBINED)) {
						taxName = Tax.getCombinedName(Common.connection.getConnection(), taxName, tax.getId(), tax.isExplicitOrder());
					}
					results.add(new TaxRecord(tax.getId(), taxName, tax.getTaxPercentage().toString() + " %", tax.isDefaultTax()));
				}
			} catch (Exception ex) {
				ex.printStackTrace();
			}

			return results;
		}

        private void updateTVA(final int id, boolean b) {
			String taxName = new Tax(id).getTaxName();
			if(taxName.equals(Tax.EDUCATION_CESS) || taxName.equals(Tax.SHE_CESS) || taxName.equals(Tax.SB_CESS)){
				Messages.showWarningMessage(JDialogTaxes.this, "This tax cannot be set as the default tax!", "Warning");
				TaxesTableModel ttm = (TaxesTableModel) jTableTaxes.getModel();
				ttm.refreshDataFire();
			} else{
				try {
					Dao<TaxEntity, Integer> clientsDao = DaoManager.createDao(Common.connection.getConnection(), TaxEntity.class);
					UpdateBuilder<TaxEntity, Integer> updateBuilder = clientsDao.updateBuilder();
					updateBuilder.updateColumnValue(Tax.IS_DEFAULT_TAX, false);
					updateBuilder.where().eq(Tax.IS_DEFAULT_TAX, true);
					updateBuilder.update();

					updateBuilder = clientsDao.updateBuilder();
					updateBuilder.updateColumnValue(Tax.IS_DEFAULT_TAX, true);
					updateBuilder.where().eq("id", id);
					updateBuilder.update();
				} catch (SQLException ex) {
					ex.printStackTrace();
				}
			}
        }
    }
	
	private void refreshFieldsByCount() {
		jButtonAddCombined.setEnabled(Tax.getSimpleCountWithoutCess(Common.connection.getConnection()) > 1);
		boolean visible = Tax.getCombinedCount(Common.connection.getConnection()) > 0;
		jLabelLegend.setVisible(visible);
		jLabelLegend2.setVisible(visible);
	}

    private class TaxesTable extends SBJTable {

        int toolTipDelay;

        public TaxesTable() {
            this.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    getComponentAt(e.getPoint());
                }

                @Override
                public void mouseEntered(MouseEvent e) {
                    toolTipDelay = ToolTipManager.sharedInstance().getInitialDelay() > 0 ? ToolTipManager.sharedInstance().getInitialDelay() : toolTipDelay;
                    ToolTipManager.sharedInstance().setInitialDelay(0);
                }

                @Override
                public void mouseExited(MouseEvent e) {
                    if (toolTipDelay > 0) {
                        ToolTipManager.sharedInstance().setInitialDelay(toolTipDelay);
                    }
                }
            });
        }

        public TableCellRenderer getCellRenderer(int row, int column) {
			TaxesTableModel ttm = (TaxesTableModel) getModel();
			boolean special = ttm.getValueAt(row, 1).equals(Tax.EDUCATION_CESS) || ttm.getValueAt(row, 1).equals(Tax.SHE_CESS)|| ttm.getValueAt(row, 1).equals(Tax.SB_CESS);

            if (column == 3) {
                return new RadioButtonCellRenderer(special);
            }

            if (column == 4) {
                return new EditDeleteButtonCell(this, column, special);
            }
			
			String tooltip = "";
			if (ttm.getValueAt(row, 1).equals("Service Tax") && ttm.getValueAt(row, 2).equals("14 %")) {
				tooltip = "Valid from June 1st to November 15th, this tax was inclusive of Ed. Cess and SHE Cess.";
			}
			if (ttm.getValueAt(row, 1).equals("Service Tax (Swachh Bharat Cess, Service Tax)") && ttm.getValueAt(row, 2).equals("14.5 %")) {
				tooltip = "<html>Valid from November 15th, this new tax no longer needs to list Ed. Cess and<br>SHE Cess but adds and lists the new Swachh Bharat cess of 0.5%.</html>";
			}
			if (ttm.getValueAt(row, 1).equals("Service Tax") && ttm.getValueAt(row, 2).equals("12.36 %")) {
				tooltip = "Original Service Tax - valid till June 1st 2015 - composed of 12% plus Ed. Cess and SHE Cess.";
			}
			
            return new CellLabel(special, tooltip);
        }

        public TableCellEditor getCellEditor(int row, int column) {
            if ((column == 3)) {
				TaxesTableModel ttm = (TaxesTableModel) getModel();
				boolean special = ttm.getValueAt(row, 1).equals(Tax.EDUCATION_CESS) || ttm.getValueAt(row, 1).equals(Tax.SHE_CESS)|| ttm.getValueAt(row, 1).equals(Tax.SB_CESS);
                return new RadioButtonCellEditor(special);
            }
            return super.getCellEditor(row, column);

        }

        @Override
        public void actionDelete() {
            try {
                TaxesTableModel ttm = (TaxesTableModel) getModel();
                Tax tax = new Tax(ttm.getId(getSelectedRow()));
				

				if (tax.isDefaultTax()) {
					Messages.showWarningMessage(this, "You may not delete the default tax.", "Warning");
					return;
				}
				
				if (tax.getId() == Common.educationCess.getId() || tax.getId() == Common.sheCess.getId() || tax.getId() == Common.sbCess.getId()) {
					Messages.showWarningMessage(this, "You may not delete the \"" + tax.getTaxName() + "\" tax.", "Warning");
					return;
				}
				
				String deleteMessage = "Are you sure you want to delete this tax?";
				if(Tax.isCombined(Common.connection.getConnection(), tax.getId())){
					deleteMessage = "<html><center>Are you sure you want to delete this tax?<br>This tax is used in a Combined Tax.<br>Please reselect it in the Combined Tax.</center></html>";
				}
                if (Messages.showQuestionMessage(this, deleteMessage, "Confirmation") == JOptionPane.YES_OPTION) {
                    try {

                        Dao<TaxEntity, Integer> taxDao = DaoManager.createDao(Common.connection.getConnection(), TaxEntity.class);
                        UpdateBuilder<TaxEntity, Integer> updateBuilder = taxDao.updateBuilder();
                        updateBuilder.updateColumnValue(Tax.DELETED, "y");
                        updateBuilder.where().eq("id", tax.getId());
                        updateBuilder.update();
                        glassPane.showOK("You have successfully deleted the tax \"" + new Tax(tax.getId()).getTaxName() + "\"!");
                        ttm.refreshDataNoFire();
                        ttm.fireTableRowsDeleted(getSelectedRow(), getSelectedRow());
                    } catch (SQLException ex) {
                        glassPane.showError("Error on deleting tax: " + ex.getMessage());
                        ex.printStackTrace();
                    }
                }
            } catch (Exception ex) {
            }
			refreshFieldsByCount();
        }

		@Override
		public void actionEdit() {
			try {
				TaxesTableModel ttm = (TaxesTableModel) getModel();
				int tid = ttm.getId(getSelectedRow());
				Tax tax = new Tax(tid);

				if(Tax.isCombined(Common.connection.getConnection(), tid)){
					Messages.showWarningMessage(JDialogTaxes.this, "<html><center>This tax is used in a combination with other taxes.<br>If it belongs to a Tax Group, you may need to reselect it.</center></html>", "Warning");
				}
				
				if (tax.getType().equals(Tax.TYPE_NORMAL)) {
					JDialogEditTax jDialogEditTax = new JDialogEditTax(JDialogTaxes.this, true, tax);
					jDialogEditTax.setVisible(true);
					lastTax = jDialogEditTax.getTax();
					if (jDialogEditTax.savedTax != null) {
						glassPane.showOK("You have successfully updated the tax \"" + lastTax.getTaxName() + "\"!");
						ttm.refreshData();
					}
				} else if(tax.getType().equals(Tax.TYPE_COMBINED)) {
					JDialogCombinedTax jDialogCombinedTax = new JDialogCombinedTax(JDialogTaxes.this, true, tax);
					jDialogCombinedTax.setVisible(true);
					lastTax = jDialogCombinedTax.lastTax;

					if (lastTax != null) {
						glassPane.showOK("You have successfully updated tax \"" + lastTax.getTaxName() + "\"!");
						ttm.refreshData();
					}
				} else {
					JDialogMultiTax jdmt = new JDialogMultiTax(JDialogTaxes.this, true, tax);
					jdmt.setVisible(true);
					lastTax = jdmt.lastTax;

					if (lastTax != null) {
						glassPane.showOK("You have successfully updated tax \"" + lastTax.getTaxName() + "\"!");
						ttm.refreshData();
					}
				}
			} catch (Exception e) {
				glassPane.showError("Error on updating tax: " + e.getMessage());
				e.printStackTrace();
			}
		}
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.Box.Filler filler1;
    private javax.swing.JButton jButtonAdd;
    private javax.swing.JButton jButtonAddCombined;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabelLegend;
    private javax.swing.JLabel jLabelLegend2;
    private javax.swing.JPanel jPTVAAll;
    private javax.swing.JPanel jPanelButtons;
    private javax.swing.JPanel jPanelLowerBorder;
    private javax.swing.JPanel jPanelLowerTitle;
    private javax.swing.JPanel jPanelSearchFields;
    private javax.swing.JPanel jPanelTable;
    private javax.swing.JPanel jPanelUpperBorder;
    private javax.swing.JPanel jPanelUpperTitle;
    private javax.swing.JScrollPane jSPTaxes;
    private javax.swing.JTable jTableTaxes;
    private javax.swing.JTextField jTextFieldName;
    private javax.swing.JTextField jTextFieldPercentage;
    // End of variables declaration//GEN-END:variables
}
