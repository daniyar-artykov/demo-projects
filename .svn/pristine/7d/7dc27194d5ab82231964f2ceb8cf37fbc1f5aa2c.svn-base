/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package sleekbill.frames;

import com.j256.ormlite.dao.Dao;
import com.j256.ormlite.dao.DaoManager;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import sleekbill.Common;
import sleekbill.Messages;
import sleekbill.beans.Tax;
import sleekbill.beans.TaxCombo;
import sleekbill.entities.TaxEntity;
import sleekbill.frames.autosuggesterdata.SBACTaxes;
import sleekbill.swingutils.autosuggesters.AutosuggesterItem;
import sleekbill.swingutils.autosuggesters.SBACPanelTextField;
import sleekbill.util.SBSwingUtils;

/**
 *
 * @author Andrei
 */
public class JDialogCombinedTax extends javax.swing.JDialog implements DocumentListener{

     SBACTaxes asData = new SBACTaxes(true);
	 public Tax lastTax = null;
	 private Tax tax = null;
	 
	 ArrayList<sleekbill.swingutils.autosuggesters.SBACPanelTextField> sbacs = new ArrayList<SBACPanelTextField>();

    /**
     * Creates new form JDialogCityData
     */
    public JDialogCombinedTax(java.awt.Dialog parent, boolean modal, Tax tax) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(parent);
		jLabel1.setText("Edit Tax Group");
		
		sbacs.add(sBACPanelTax1);
		sbacs.add(sBACPanelTax2);

        SBSwingUtils.addContextMenuToChildren(this);
        SBSwingUtils.applyFocusBorder(this);
		
		this.tax = tax;
		//fill fields
		jTextFieldTaxName.setText(tax.getTaxName());
		jCheckBox1.setSelected(tax.isExplicitOrder());
		
		try {
			List<TaxEntity> combined = Tax.getCombined(Common.connection.getConnection(), tax.getId());
			TaxEntity tax1 = combined.get(0);
			TaxEntity tax2 = combined.get(1);

			if (tax1 != null) {
				sBACPanelTax1.setSelectedItem(
						new AutosuggesterItem(tax1.getId(), tax1.getTaxName() + " %", tax1.getTaxPercentage() + "", tax1),
						tax1.getTaxPercentage() + "");
			}
			
			if (tax2 != null) {
				sBACPanelTax2.setSelectedItem(
						new AutosuggesterItem(tax2.getId(), tax2.getTaxName() + " %", tax2.getTaxPercentage() + "", tax2),
						tax2.getTaxPercentage() + "");
			}
			
			for(int i = 2; i < combined.size(); i++){
				jButtonAddCombinedActionPerformed(null);
				TaxEntity taxEntity = combined.get(i);
				sbacs.get(i).setSelectedItem(
						new AutosuggesterItem(taxEntity.getId(), taxEntity.getTaxName() + " %", taxEntity.getTaxPercentage() + "", taxEntity),
						taxEntity.getTaxPercentage() + "");
			}
		} catch (Exception ex) {
			ex.printStackTrace();
		}

		refreshTaxName();
		setDocumentListeners();
        setMandatory();
        checkMandatory();
    }

    public JDialogCombinedTax(java.awt.Dialog parent, boolean modal, String taxName) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(parent);
		
		sbacs.add(sBACPanelTax1);
		sbacs.add(sBACPanelTax2);

		jTextFieldTaxName.setText(taxName);
		
        SBSwingUtils.addContextMenuToChildren(this);
        SBSwingUtils.applyFocusBorder(this);

		setDocumentListeners();
        setMandatory();
        checkMandatory();
    }
	
	private void setDocumentListeners() {
		jTextFieldTaxName.getDocument().addDocumentListener(new DocumentListener() {

			@Override
			public void insertUpdate(DocumentEvent e) {
				refreshTaxName();
			}

			@Override
			public void removeUpdate(DocumentEvent e) {
				refreshTaxName();
			}

			@Override
			public void changedUpdate(DocumentEvent e) {
				refreshTaxName();
			}
		});
	}
	
	private void refreshTaxName() {
		String taxes = " (";
		BigDecimal sum = BigDecimal.ZERO;
		int ct = 0;
		for(SBACPanelTextField sbacptf : sbacs){
			if(sbacptf.getSbTextField().getSelectedItem() != null){
				TaxEntity tax = (TaxEntity) sbacptf.getSbTextField().getSelectedItem().getObj();
				sum = sum.add(tax.getTaxPercentage());
				taxes += tax.getTaxName() + ", ";
				ct++;
			}
		}
		taxes = taxes.substring(0, taxes.length()-2);
		taxes += "): ";
		if (ct >1 && !jTextFieldTaxName.getText().isEmpty()) {
			String combinedTax = jTextFieldTaxName.getText() + taxes + sum.toString() + " %";
			jLabelCombinedTaxName.setText(combinedTax);
		}
		pack();
	}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanelSuper = new javax.swing.JPanel();
        jPanelSuperContent = new javax.swing.JPanel();
        jPanelContent = new javax.swing.JPanel();
        jPanelFields = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        sBACPanelTax1 = new sleekbill.swingutils.autosuggesters.SBACPanelTextField(asData, false, false, false);
        jLabel4 = new javax.swing.JLabel();
        sBACPanelTax2 = new sleekbill.swingutils.autosuggesters.SBACPanelTextField(asData, false, false, false);
        jLabel2 = new javax.swing.JLabel();
        jTextFieldTaxName = new javax.swing.JTextField();
        jPanelFields2 = new javax.swing.JPanel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jLabelCombinedTaxName = new javax.swing.JLabel();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 25), new java.awt.Dimension(0, 25), new java.awt.Dimension(0, 25));
        jButtonAddCombined = new javax.swing.JButton();
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 35), new java.awt.Dimension(0, 35), new java.awt.Dimension(0, 35));
        jPanelButtons = new javax.swing.JPanel();
        jButtonSave = new javax.swing.JButton();
        jPanelTitle = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Tax Group");
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanelSuper.setBackground(new java.awt.Color(229, 235, 242));
        jPanelSuper.setLayout(new java.awt.GridBagLayout());

        jPanelSuperContent.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(195, 210, 219), 1, true));
        jPanelSuperContent.setLayout(new java.awt.GridBagLayout());

        jPanelContent.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(203, 209, 213)));
        jPanelContent.setLayout(new java.awt.GridBagLayout());

        jPanelFields.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 0, 0, 0, new java.awt.Color(203, 209, 213)));
        jPanelFields.setLayout(new java.awt.GridBagLayout());

        jLabel3.setText("Tax 1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanelFields.add(jLabel3, gridBagConstraints);

        sBACPanelTax1.setMaximumSize(new java.awt.Dimension(200, 20));
        sBACPanelTax1.setMinimumSize(new java.awt.Dimension(200, 20));
        sBACPanelTax1.setName("tfTax"); // NOI18N
        sBACPanelTax1.setPreferredSize(new java.awt.Dimension(200, 20));
        sBACPanelTax1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                sBACPanelTax1FocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanelFields.add(sBACPanelTax1, gridBagConstraints);

        jLabel4.setText("Tax 2");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanelFields.add(jLabel4, gridBagConstraints);

        sBACPanelTax2.setMaximumSize(new java.awt.Dimension(200, 20));
        sBACPanelTax2.setMinimumSize(new java.awt.Dimension(200, 20));
        sBACPanelTax2.setName("tfTax"); // NOI18N
        sBACPanelTax2.setPreferredSize(new java.awt.Dimension(200, 20));
        sBACPanelTax2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                sBACPanelTax2FocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanelFields.add(sBACPanelTax2, gridBagConstraints);

        jLabel2.setText("Combined Tax Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanelFields.add(jLabel2, gridBagConstraints);

        jTextFieldTaxName.setMaximumSize(new java.awt.Dimension(200, 20));
        jTextFieldTaxName.setMinimumSize(new java.awt.Dimension(200, 20));
        jTextFieldTaxName.setPreferredSize(new java.awt.Dimension(200, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanelFields.add(jTextFieldTaxName, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        jPanelContent.add(jPanelFields, gridBagConstraints);

        jPanelFields2.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(203, 209, 213)));
        jPanelFields2.setLayout(new java.awt.GridBagLayout());

        jCheckBox1.setText("<html>Apply <b>Tax 2</b> after <b>Tax 1</b></html>");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 1, 5, 5);
        jPanelFields2.add(jCheckBox1, gridBagConstraints);

        jLabelCombinedTaxName.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabelCombinedTaxName.setForeground(new java.awt.Color(102, 102, 102));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jPanelFields2.add(jLabelCombinedTaxName, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        jPanelFields2.add(filler1, gridBagConstraints);

        jButtonAddCombined.setIcon(new ImageIcon("./images/buttons/nav_ico_new.png"));
        jButtonAddCombined.setText("Add another tax");
        jButtonAddCombined.setPreferredSize(new java.awt.Dimension(160, 23));
        jButtonAddCombined.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButtonAddCombinedMousePressed(evt);
            }
        });
        jButtonAddCombined.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddCombinedActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(15, 5, 5, 5);
        jPanelFields2.add(jButtonAddCombined, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        jPanelFields2.add(filler2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanelContent.add(jPanelFields2, gridBagConstraints);

        jPanelButtons.setBackground(new java.awt.Color(246, 246, 246));
        jPanelButtons.setLayout(new java.awt.GridBagLayout());

        jButtonSave.setIcon(new ImageIcon("./images/buttons/ico_check.png"));
        jButtonSave.setText("Save");
        jButtonSave.setName("bSave"); // NOI18N
        jButtonSave.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonSaveMouseClicked(evt);
            }
        });
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanelButtons.add(jButtonSave, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanelContent.add(jPanelButtons, gridBagConstraints);

        jPanelTitle.setBackground(new java.awt.Color(253, 253, 253));
        jPanelTitle.setLayout(new java.awt.GridBagLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("Add Combined Tax");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanelTitle.add(jLabel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanelContent.add(jPanelTitle, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        jPanelSuperContent.add(jPanelContent, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(15, 15, 15, 15);
        jPanelSuper.add(jPanelSuperContent, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        getContentPane().add(jPanelSuper, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
        lastTax = null;
		int ct = 0;
		for(SBACPanelTextField sbacptf : sbacs){
			if(sbacptf.getSbTextField().getSelectedItem() != null){
				ct++;
			}
		}
		if(ct < 2 || jTextFieldTaxName.getText().isEmpty()){
			Messages.showErrorMessage(this, "<html>Please supply a name and at least two taxes.</html>", "Error");
			return;
		}
		
		if(hasDuplicates(sbacs)){
			Messages.showErrorMessage(this, "<html>All selected taxes must be unique!</html>", "Error");
			return;
		}
		
		try {
			if (null != Tax.get(Common.connection.getConnection(), jTextFieldTaxName.getText()) && null == this.tax) {
				if (Messages.showQuestionMessage(this, "<html><center>A tax with this name already exists.<br>Would you like to add another one with the same name?</center></html>", "Warning") != JOptionPane.YES_OPTION) {
					return;
				}
			}
		} catch (Exception ex) {
			Messages.showErrorMessage(this, ex.getMessage(), "Error");
			ex.printStackTrace();
			return;
		}
		
		try {//to add a combo
	
			BigDecimal sum = BigDecimal.ZERO;
			for (SBACPanelTextField sbacptf : sbacs) {
				if (sbacptf.getSbTextField().getSelectedItem() != null) {
					TaxEntity taxEntity = (TaxEntity) sbacptf.getSbTextField().getSelectedItem().getObj();
					sum = sum.add(taxEntity.getTaxPercentage());
				}
			}
			Dao<TaxEntity, Integer> dao = DaoManager.createDao(Common.connection.getConnection(), TaxEntity.class);
			TaxEntity tax = new TaxEntity();
			tax.setTaxName(jTextFieldTaxName.getText());
			tax.setTaxPercentage(sum);
			tax.setType(Tax.TYPE_COMBINED);
			tax.setExplicitOrder(jCheckBox1.isSelected());
			if(this.tax != null){
				tax.setIsDefaultTax(this.tax.isDefaultTax());
			}
			dao.create(tax);
			lastTax = new Tax(tax.getId());

			for (SBACPanelTextField sbacptf : sbacs) {
				if (sbacptf.getSbTextField().getSelectedItem() != null) {
					TaxEntity taxEntity = (TaxEntity) sbacptf.getSbTextField().getSelectedItem().getObj();
					TaxCombo tc2 = new TaxCombo();
					tc2.setComponentTax(taxEntity);
					tc2.setMainTax(tax);
					tc2.create();
				}
			}

			if (this.tax != null) {
				this.tax.setDeleted("y");
				this.tax.update();
			}
			
		} catch (Exception ex) {
			Messages.showErrorMessage(this, ex.getMessage(), "Error");
			ex.printStackTrace();
			return;
		}
		dispose();
    }//GEN-LAST:event_jButtonSaveActionPerformed

	public static boolean hasDuplicates(List<SBACPanelTextField> sbac_list) {
		final List<Integer> usedIds = new ArrayList<Integer>();
		for (SBACPanelTextField sbac : sbac_list) {
			AutosuggesterItem selectedItem = sbac.getSbTextField().getSelectedItem();

			if (selectedItem != null) {
				int id = sbac.getSbTextField().getSelectedItem().getId();
				if (usedIds.contains(id)) {
					return true;
				}
				usedIds.add(id);
			}
		}

		return false;
	}
	
    private void jButtonSaveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonSaveMouseClicked
        int ct = 0;
		for(SBACPanelTextField sbacptf : sbacs){
			if(sbacptf.getSbTextField().getSelectedItem() != null){
				ct++;
			}
		}
		if(ct < 2 || jTextFieldTaxName.getText().isEmpty()){
			Messages.showErrorMessage(this, "<html>Please supply a name and at least two taxes.</html>", "Error");
		}
    }//GEN-LAST:event_jButtonSaveMouseClicked

    private void sBACPanelTax1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sBACPanelTax1FocusLost
        checkMandatory();
		refreshTaxName();
    }//GEN-LAST:event_sBACPanelTax1FocusLost

    private void sBACPanelTax2FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sBACPanelTax2FocusLost
        checkMandatory();
		refreshTaxName();
    }//GEN-LAST:event_sBACPanelTax2FocusLost

    private void jButtonAddCombinedMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonAddCombinedMousePressed
        
    }//GEN-LAST:event_jButtonAddCombinedMousePressed

    private void jButtonAddCombinedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddCombinedActionPerformed

		JLabel label = new JLabel();
		label.setText("Tax " + (sbacs.size()+1));
        java.awt.GridBagConstraints gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = sbacs.size()+1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanelFields.add(label, gridBagConstraints);

		sleekbill.swingutils.autosuggesters.SBACPanelTextField sBACPanel = new sleekbill.swingutils.autosuggesters.SBACPanelTextField(asData, false, false, false);
        sBACPanel.setMaximumSize(new java.awt.Dimension(200, 20));
        sBACPanel.setMinimumSize(new java.awt.Dimension(200, 20));
        sBACPanel.setName("tfTax"); // NOI18N
        sBACPanel.setPreferredSize(new java.awt.Dimension(200, 20));
        sBACPanel.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                checkMandatory();
				refreshTaxName();
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = sbacs.size()+1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanelFields.add(sBACPanel, gridBagConstraints);
		sBACPanel.getSbTextField().getDocument().addDocumentListener(this);
		sbacs.add(sBACPanel);
		pack();
		jCheckBox1.setEnabled(false);
		jCheckBox1.setSelected(false);
		jCheckBox1.setVisible(false);
		
    }//GEN-LAST:event_jButtonAddCombinedActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JDialogCombinedTax.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JDialogCombinedTax.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JDialogCombinedTax.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JDialogCombinedTax.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JDialogCombinedTax dialog = new JDialogCombinedTax(new javax.swing.JDialog(), true, "xxx");
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler2;
    private javax.swing.JButton jButtonAddCombined;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabelCombinedTaxName;
    private javax.swing.JPanel jPanelButtons;
    private javax.swing.JPanel jPanelContent;
    private javax.swing.JPanel jPanelFields;
    private javax.swing.JPanel jPanelFields2;
    private javax.swing.JPanel jPanelSuper;
    private javax.swing.JPanel jPanelSuperContent;
    private javax.swing.JPanel jPanelTitle;
    private javax.swing.JTextField jTextFieldTaxName;
    private sleekbill.swingutils.autosuggesters.SBACPanelTextField sBACPanelTax1;
    private sleekbill.swingutils.autosuggesters.SBACPanelTextField sBACPanelTax2;
    // End of variables declaration//GEN-END:variables

    private void setMandatory() {
       jTextFieldTaxName.getDocument().addDocumentListener(this);
	   sBACPanelTax1.getSbTextField().getDocument().addDocumentListener(this);
	   sBACPanelTax2.getSbTextField().getDocument().addDocumentListener(this);
    }

    private void checkMandatory() {
		int ct = 0;
		for(SBACPanelTextField sbacptf : sbacs){
			if(sbacptf.getSbTextField().getSelectedItem() != null){
				ct++;
			}
		}
		jButtonSave.setEnabled(ct > 1 && !jTextFieldTaxName.getText().isEmpty());
	}

    public boolean hasLettersOrNonNumbers(String s) {
        if (s == null) {
            return false;
        }
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            boolean bResult = false;
            if (Character.isLetter(c)) {
                bResult = true;
            }
            if (!Character.isDigit(c)) {
                bResult = true;
            }
            if (bResult && c != '.') {
                return true;
            }
        }
        return false;
	}

	@Override
	public void insertUpdate(DocumentEvent e) {
		checkMandatory();
	}

	@Override
	public void removeUpdate(DocumentEvent e) {
		checkMandatory();
	}

	@Override
	public void changedUpdate(DocumentEvent e) {
		checkMandatory();
	}
}
