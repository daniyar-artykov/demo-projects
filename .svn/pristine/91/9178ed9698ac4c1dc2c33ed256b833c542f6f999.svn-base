/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package sleekbill.swingutils;

import java.awt.Color;
import java.awt.Component;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.math.BigDecimal;

import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.UIManager;
import javax.swing.border.EmptyBorder;
import javax.swing.table.TableCellRenderer;
import sleekbill.swingutils.balloons.SBSpecialBalloonTip;

/**
 *
 * @author Andrei
 */
public class PaymentCellRenderer extends JLabel implements TableCellRenderer{
    
    private BigDecimal needsToBePaid = BigDecimal.ZERO;
    private BigDecimal isPaid = BigDecimal.ZERO;
    private boolean overdue = false;
    private String tooltip = "";

    public PaymentCellRenderer(BigDecimal needsToBePaid, BigDecimal isPaid, boolean overdue, String tooltip) {
        this.needsToBePaid = needsToBePaid;
        this.isPaid = isPaid;
        this.overdue = overdue;
        this.tooltip = tooltip;
    }


    public Component getTableCellRendererComponent(JTable table, Object value,boolean isSelected, boolean hasFocus, int row, int column){
        setBorder(new EmptyBorder(1, 2, 1, 2));
        if (isSelected) {
            setForeground(table.getSelectionForeground());
            setBackground(table.getSelectionBackground());
        } 
        else {
            if(UIManager.get("Table.evenRowColor") instanceof Color &&  UIManager.get("Table.evenRowColor") instanceof Color) {
                Color rc =  row%2==0? (Color)UIManager.get("Table.evenRowColor"):(Color)UIManager.get("Table.oddRowColor");            
                setForeground(rc);
                setBackground(rc);
            } 
            else {
                setForeground(table.getForeground());
                setBackground(table.getBackground());
            }
        }
        
        int compare = isPaid.compareTo(needsToBePaid);
        
        if (compare == 1) {
            if (needsToBePaid.compareTo(BigDecimal.ZERO) == -1) {
                setText("<html><center><p style=\"color:black;font-size:8px;\">unpaid</p>" + (overdue ? "<p style=\"margin-top:-5;color:red;font-size:8px;\">overdue</p></html>" : "</p></html>"));
            } else {
                setText("<html><center><center><p style=\"color:#079D46;font-size:8px;\">paid</p></html>");
                setForeground(new Color(7, 157, 70));
            }
            //setForeground(new Color(7, 157, 70));
        } else if (compare == 0) {
            setText("<html><center><center><p style=\"color:#079D46;font-size:8px;\">paid</p></html>");
            setForeground(new Color(7, 157, 70));
            //setToolTipText("Invoice is paid.");
        } else if (isPaid.compareTo(BigDecimal.ZERO) == 0) {
            setText("<html><center><p style=\"color:black;font-size:8px;\">unpaid</p>" + (overdue ? "<p style=\"margin-top:-5;color:red;font-size:8px;\">overdue</p></html>" : "</p></html>"));
            //setForeground(overdue ? Color.RED : Color.BLACK);
            //setToolTipText("Invoice is not paid.");
        } else if (compare == -1) {
            setText("<html><center><p style=\"color:#E67640;font-size:8px;\">partial</p>" + (overdue ? "<p style=\"margin-top:-5;color:red;font-size:8px;\">overdue</p></html>" : "</p></html>"));
            //setForeground(overdue ? Color.RED : new Color(230, 118, 64));
            //setToolTipText("Invoice is partially paid." + "(" + isPaid + "/" + needsToBePaid + ")");
        }
        
        
        setToolTipText(tooltip);
        
        setOpaque(true);
        
        //setSelected(value.equals("1")? true: false);
        setHorizontalAlignment(SwingConstants.CENTER);
        //setBorderPainted(true);        
        return this;         
    }  
}
