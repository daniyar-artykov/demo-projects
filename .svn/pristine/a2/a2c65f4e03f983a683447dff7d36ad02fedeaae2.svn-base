package sleekbill.beans;

import java.sql.SQLException;
import java.util.List;

import sleekbill.Common;
import sleekbill.entities.PageSizeEntity;

import com.j256.ormlite.dao.Dao;
import com.j256.ormlite.dao.DaoManager;
import com.j256.ormlite.jdbc.JdbcConnectionSource;
import com.j256.ormlite.stmt.PreparedQuery;
import com.j256.ormlite.support.ConnectionSource;

public class PageSize extends PageSizeEntity {
    
    public static int A4 = 1;
    public static int LETTER = 2;
    public static int A5 = 3;
    
    public static String a4 = "A4";
//    public static String a5 = "A5";
    public static String letter = "LETTER";

    private Dao<PageSizeEntity, Integer> mainDao;
    private JdbcConnectionSource mainConnection = Common.connection.getConnection();

     public PageSize(PageSizeEntity pageSizeEntity) {
        this(0);
        this.id = pageSizeEntity.getId();
        this.format = pageSizeEntity.getFormat();
    }
    
    public PageSize() {
        this(0);
    }

    public PageSize(Integer id) {
        super();

        if (mainConnection != null) {
            try {
                mainDao = DaoManager
                        .createDao(mainConnection, PageSizeEntity.class);

                if (id != null && id != 0) {
                    setId(id);
                    mainDao.refresh(this);
                }

            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
    
     public void refreshDao(){
            try {
                mainDao = DaoManager
                        .createDao(Common.connection.getConnection(), PageSizeEntity.class);

            } catch (Exception e) {
                e.printStackTrace();
            }
    }

    public void create() throws Exception {
        mainDao.create(this);
    }

    public PageSizeEntity read(Integer id) throws Exception {
        return mainDao.queryForId(id);
    }

    public void update() throws Exception {
        mainDao.update(this);
    }

    public void delete() throws Exception {
        mainDao.delete(this);
    }
     
     public static PageSize get(JdbcConnectionSource connectionSource, String format) throws SBDaoException, SQLException {

    	Dao<PageSizeEntity, Integer> psDao = DaoManager.createDao(connectionSource, PageSizeEntity.class);
        PreparedQuery<PageSizeEntity> pq = psDao.queryBuilder().where().like(PageSize.FORMAT, format).prepare();
        List<PageSizeEntity> list = psDao.query(pq);

        if (list.size() > 0) {
            return new PageSize(list.get(0));
        }
        return null;
    }
     
     public static List<PageSizeEntity> getAll(JdbcConnectionSource connectionSource) throws SBDaoException, SQLException {
    	Dao<PageSizeEntity, Integer> psDao = DaoManager.createDao(connectionSource, PageSizeEntity.class);
        return psDao.queryForAll();
    }
     
      public static void add(ConnectionSource connectionSource, PageSizeEntity pse) {
        try {
            Dao<PageSizeEntity, Integer> psDao = DaoManager.createDao(connectionSource, PageSizeEntity.class);
        psDao.create(pse);
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }
    
     public Dao<PageSizeEntity, Integer> getMainDao() {
        return mainDao;
    }

    public void setMainDao(Dao<PageSizeEntity, Integer> mainDao) {
        this.mainDao = mainDao;
    }
    
    @Override
    public int hashCode() {
        int hash = 5;
        hash = 71 * hash + this.id;
        hash = 71 * hash + (this.format != null ? this.format.hashCode() : 0);
        return hash;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final PageSize other = (PageSize) obj;
        if (this.id != other.id) {
            return false;
        }
        if ((this.format == null) ? (other.format != null) : !this.format.equals(other.format)) {
            return false;
        }
        return true;
    }
}
