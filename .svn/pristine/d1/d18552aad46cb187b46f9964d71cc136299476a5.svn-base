package sleekbill.swingutils.autosuggesters;

import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.Insets;
import java.awt.LayoutManager;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusListener;
import java.lang.reflect.Field;
import java.lang.reflect.Method;

import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.UIManager;
import javax.swing.text.Document;

import sleekbill.swingutils.autosuggesters.SBAutoSuggesterJTextField.SBLoadingListener;

/**
 *
 * @author marcu flaviu
 */
public class SBACPanelTextField extends javax.swing.JPanel {

    private static final long serialVersionUID = 1L;
    private SBAutoSuggesterJTextField sbTextField;
    private JButton dButton;
    private JLabel loadingIcon;

    {
        loadingIcon = new JLabel(new ImageIcon("./images/icons/busy2.gif"));
        loadingIcon.setSize(new Dimension(20, 16));
        loadingIcon.setBorder(null);
        loadingIcon.setBackground(Color.red);
        loadingIcon.setVisible(false);
        loadingIcon.setFocusable(false);
    }

    /**
     * Creates new form SBACPanel
     */
    public SBACPanelTextField() {
        setSbTextField(new SBAutoSuggesterJTextField());
        // initComponents();
        init();
    }

    public SBACPanelTextField(boolean showDeleteButton) {
        setSbTextField(new SBAutoSuggesterJTextField(showDeleteButton));
        // initComponents();
        init();
    }

    public SBACPanelTextField(AutosuggesterDataBuilder dataBuilder) {
        setSbTextField(new SBAutoSuggesterJTextField(dataBuilder));
        // initComponents();
        init();
    }

    public SBACPanelTextField(AutosuggesterDataBuilder dataBuilder, boolean showDeleteButton) {
        setSbTextField(new SBAutoSuggesterJTextField(dataBuilder, showDeleteButton));
        // initComponents();
        init();
    }

    public SBACPanelTextField(AutosuggesterDataBuilder dataBuilder, boolean showDeleteButton, boolean addNew) {
        setSbTextField(new SBAutoSuggesterJTextField(dataBuilder, showDeleteButton, addNew));
        // initComponents();
        init();
    }

    public SBACPanelTextField(AutosuggesterDataBuilder dataBuilder, boolean showDeleteButton, boolean addNew, boolean showEdit) {
        setSbTextField(new SBAutoSuggesterJTextField(dataBuilder, showDeleteButton, addNew, showEdit));
        // initComponents();
        init();
    }

    public void setDataBuilder(AutosuggesterDataBuilder dataBuilder) {
        getSbTextField().setDataBuilder(dataBuilder);
    }

    public void setAddNew(boolean enabled) {
        getSbTextField().setAddNew(enabled);
    }

    public void setAddNewActionListener(AddNewActionListener listener) {
        getSbTextField().setAddNewActionListener(listener);
    }

    public void removeAddNewActionListener(AddNewActionListener listener) {
        getSbTextField().removeAddNewActionListener();
    }

    public DeleteActionListener getDeleteActionListener() {
        return getSbTextField().getDeleteActionListener();
    }

    public void setDeleteActionListener(DeleteActionListener listener) {
        getSbTextField().setDeleteActionListener(listener);
    }

    public void removeDeleteActionListener(DeleteActionListener listener) {
        getSbTextField().removeDeleteActionListener();
    }

    public EditActionListener getEditActionListener() {
        return getSbTextField().getEditActionListener();
    }

    public void setEditActionListener(EditActionListener listener) {
        getSbTextField().setEditActionListener(listener);
    }

    public void removeEditActionListener(EditActionListener listener) {
        getSbTextField().removeEditActionListener();
    }

    public AddNewActionListener getAddNewActionListener() {
        return getSbTextField().getAddNewActionListener();
    }

    public void setSelectedItem(AutosuggesterItem item, String search) {
        getSbTextField().setSelectedItem(item, search);
    }

    public void setSelectedItem(String search) {
        getSbTextField().setSelectedItem(search);
    }

    public SBAutoSuggesterJTextField getSbTextField() {
        return sbTextField;
    }

    public void setSbTextField(SBAutoSuggesterJTextField sbTextField) {
        this.sbTextField = sbTextField;
    }

    public int getIdOfSelectedItem() {
        return sbTextField.getIdOfSelectedItem();
    }

    public boolean isDeleteButtonPressed() {
        return sbTextField.isDeleteButtonPressed();
    }

    public Dimension getMinimumPopupSize() {
        return sbTextField.getMinimumPopupSize();
    }

    public void setMinimumPopupSize(Dimension minimumPopupSize) {
        sbTextField.setMinimumPopupSize(minimumPopupSize);
    }

    public Dimension getMaximumPopupSize() {
        return sbTextField.getMaximumPopupSize();
    }

    public void setMaximumPopupSize(Dimension maximumPopupSize) {
        sbTextField.setMaximumPopupSize(maximumPopupSize);
    }

    public void addFocusListener(FocusListener l) {
        sbTextField.addFocusListener(l);
    }

    public void setText(String text) {
        sbTextField.setText(text);
        sbTextField.setCaretPosition(0);
    }

    public String getText() {
        return sbTextField.getText();
    }

    public void init() {
        setPreferredSize(new Dimension(120, 20));
//		GridBagConstraints gbc = new GridBagConstraints(0, 0, 1, 1, 0.1, 0.1, GridBagConstraints.NORTHWEST,
//				GridBagConstraints.BOTH, new Insets(0, 0, 0, 0), 0, 0);
//		gbc = new GridBagConstraints(1, 0, 1, 1, 0.1, 0.1, GridBagConstraints.NORTHWEST, GridBagConstraints.NONE, new Insets(0,
//				0, 0, 0), 0, 0);
        dButton = getArrowButton();
        dButton.setFocusable(false);

        sbTextField.setBorder(null);
        // sbTextField.setPreferredSize(new
        // Dimension((int)(getPreferredSize().width-dButton.getPreferredSize().width),getPreferredSize().height));

        dButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                sbTextField.requestFocus();
                sbTextField.showPopup("");
            }
        });

        add(getSbTextField());
        if (sbTextField.resultsCount() > 0) {
            setLayout(new SBACComboBoxLayoutManager(this, getSbTextField(), dButton));
            add(dButton);
            add(loadingIcon);
        } else {
            setLayout(new BoxLayout(this, BoxLayout.X_AXIS));
        }

        setBorder(UIManager.getBorder("TextField.border") != null ? UIManager.getBorder("TextField.border") : new JTextField()
                .getBorder());
        sbTextField.setBorder(null);
        setBackground(sbTextField.getBackground());
        sbTextField.setLoadingListener(new SBLoadingListener() {

            @Override
            public void starting() {
                loadingIcon.setVisible(true);
            }

            @Override
            public void stopped() {
                loadingIcon.setVisible(false);
            }
        });
        setFocusable(false);
        revalidate();
    }

    public Document getDocument() {
        return sbTextField.getDocument();
    }

    public void setDocument(Document document) {
        sbTextField.setDocument(document);
    }

    public static JButton getArrowButton() {
        if (!(System.getProperty("os.name").toLowerCase().indexOf("mac") >= 0 || System.getProperty("os.name").toLowerCase()
                .indexOf("linux") >= 0)) {
            try {
                String cbuiName = (String) UIManager.get("ComboBoxUI");
                Class<?> cBUIClass = Class.forName(cbuiName);

                @SuppressWarnings("rawtypes")
                Class[] paramTypes = {};
                Method createArrowButton = cBUIClass.getDeclaredMethod("createArrowButton", paramTypes);

                Field field = cBUIClass.getSuperclass().getDeclaredField("comboBox");

                Object cbui = cBUIClass.newInstance();

                field.setAccessible(true);
                field.set(cbui, new JComboBox());

                Object[] parameters = {};
                createArrowButton.setAccessible(true);

                return (JButton) createArrowButton.invoke(cbui, parameters);
            } catch (Exception ex) {
                System.out.println("no arrow button: " + ex.getMessage());
            }
        }
        // try nr 2
        // poate merge si pe mac
        /*
		 * try{
		 * if(UIManager.getLookAndFeel().getName().toLowerCase().contains("easynth"
		 * )){ JComboBox jcb = new JComboBox(); if(jcb.getComponent(0)
		 * instanceof JButton) { JButton ab = (JButton) jcb.getComponent(0);
		 * Class<?> cBUIClass = ab.getClass(); Constructor<?> createArrowButton
		 * = cBUIClass.getDeclaredConstructors()[0];
		 * createArrowButton.setAccessible(true); return (JButton)
		 * createArrowButton.newInstance(5); } } }catch(Exception e){
		 * e.printStackTrace(); }
         */

        // JButton defButton = new JButton();
        // defButton.setName("ArrowButtonSuggester");
        // return defButton;
        JButton but = new JButton();
        but.setIcon(new ImageIcon("./images/buttons/arrow-down.png"));
        but.setBorder(null);
        but.setOpaque(false);
        return but;
    }

    private class SBACComboBoxLayoutManager implements LayoutManager {

        JPanel c;
        JTextField tf;
        JButton ab;

        public SBACComboBoxLayoutManager(SBACPanelTextField container, JTextField tf, JButton ab) {
            this.c = container;
            this.tf = tf;
            this.ab = ab;
        }

        @Override
        public void addLayoutComponent(String name, Component comp) {
        }

        @Override
        public void removeLayoutComponent(Component comp) {
        }

        @Override
        public Dimension preferredLayoutSize(Container parent) {
            return SBACPanelTextField.this.getPreferredSize();
        }

        @Override
        public Dimension minimumLayoutSize(Container parent) {
            return new Dimension(10, 10);
        }

        @Override
        public void layoutContainer(Container parent) {
            int width = getWidth();
            int height = getHeight();

            Insets insets = getInsets();
            int buttonSize = height - (insets.top + insets.bottom);
            Rectangle cvb;

            if (ab != null) {
                if (c.getComponentOrientation().isLeftToRight()) {
                    ab.setBounds(width - (insets.right + buttonSize), insets.top, buttonSize, buttonSize);
                } else {
                    ab.setBounds(insets.left, insets.top, buttonSize, buttonSize);
                }
            }
            if (tf != null) {
                cvb = rectangleForCurrentValue();
                tf.setBounds(cvb);
            }
            if (loadingIcon.isVisible()) {
                Rectangle r = new Rectangle(width - (insets.left + insets.right + buttonSize + loadingIcon.getWidth()),
                        insets.top, loadingIcon.getWidth(), height - (insets.top + insets.bottom));

                loadingIcon.setBounds(r);
            }
        }

        protected Rectangle rectangleForCurrentValue() {
            int width = c.getWidth();
            int height = c.getHeight();
            Insets insets = getInsets();
            int buttonSize = height - (insets.top + insets.bottom);
            if (ab != null) {
                buttonSize = ab.getWidth();
            }
            if (c.getComponentOrientation().isLeftToRight()) {
                return new Rectangle(insets.left, insets.top, width
                        - (insets.left + insets.right + buttonSize + (loadingIcon.isVisible() ? loadingIcon.getWidth() : 0)),
                        height - (insets.top + insets.bottom));
            } else {
                return new Rectangle(insets.left + buttonSize, insets.top, width
                        - (insets.left + insets.right + buttonSize + (loadingIcon.isVisible() ? loadingIcon.getWidth() : 0)),
                        height - (insets.top + insets.bottom));
            }
        }
    }

    @Override
    public void setEnabled(boolean e) {
        sbTextField.setEnabled(e);
        dButton.setEnabled(e);
    }

    @Override
    public void requestFocus() {
        sbTextField.requestFocusInWindow();
    }

    @Override
    public boolean requestFocusInWindow() {
        return sbTextField.requestFocusInWindow();
    }

    public JButton getButton() {
        return dButton;
    }

    public void setAlertIfNoMatch(boolean alert) {
        sbTextField.setAlertIfNoMatch(alert);
    }

    @Override
    public void setName(String name) {
        super.setName(name);
        if (sbTextField != null) {
            sbTextField.setName("sbTf_" + this.getName());
        }
        if (dButton != null) {
            dButton.setName("button_" + this.getName());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed"
    // desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setPreferredSize(new java.awt.Dimension(120, 20));
        setLayout(new java.awt.GridBagLayout());
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
