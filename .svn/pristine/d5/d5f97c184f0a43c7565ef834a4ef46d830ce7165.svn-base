package sleekbill.swingutils.datepicker.calendar;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.beans.PropertyVetoException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JComponent;
import javax.swing.JFormattedTextField;
import javax.swing.JFrame;
import javax.swing.JTextField;
import javax.swing.UIManager;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.text.MaskFormatter;

public class JMaskedDateField extends JFormattedTextField implements IEditor,
        CaretListener, FocusListener, ActionListener {

    private static final long serialVersionUID = -8901842591101625304L;
    protected Date date;
    protected SimpleDateFormat dateFormatter;
    protected MaskFormatter maskFormatter;
    protected String datePattern;
    protected String maskPattern;
    protected char placeholder;
    protected Color darkGreen;
    protected Utilities dateUtil;
    private boolean isMaskVisible;
    private boolean ignoreDatePatternChange;
    protected DatePicker peer;

    public JMaskedDateField() {
        this(false, null, null, ' ', null);
    }

    public JMaskedDateField(String datePattern, String maskPattern, char placeholder, DatePicker peer) {
        this(true, datePattern, maskPattern, placeholder, peer);
    }

    public JMaskedDateField(boolean showMask, String datePattern, String maskPattern,
            char placeholder, DatePicker peer) {
        dateFormatter = (SimpleDateFormat) DateFormat.getDateInstance(DateFormat.MEDIUM);
        dateFormatter.setLenient(false);

        this.peer = peer;

        setDateFormatString(datePattern);
        if (datePattern != null) {
            ignoreDatePatternChange = true;
        }

        this.placeholder = placeholder;

        if (maskPattern == null) {
            this.maskPattern = createMaskFromDatePattern(this.datePattern);
        } else {
            this.maskPattern = maskPattern;
        }

        setToolTipText(this.datePattern);
        setMaskVisible(showMask);

        addCaretListener(this);
        addFocusListener(this);
        addActionListener(this);
        darkGreen = new Color(0, 150, 0);

        setDateFormatCalendar(Calendar.getInstance());

        dateUtil = new Utilities();
    }

    public Date getDate() {
        try {
            date = dateFormatter.parse(getText());
        } catch (ParseException e) {
            date = null;
        }
        return date;
    }

    public void setDate(Date date) {
        setDate(date, true);
    }

    protected void setDate(Date date, boolean firePropertyChange) {
        Date oldDate = this.date;
        this.date = date;
        if (date == null) {
            setText("");
        } else {
            String formattedDate = dateFormatter.format(date);
            try {
                peer.setDate(date);
                setText(formattedDate);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        if (date != null && dateUtil.checkDate(date)) {
            setForeground(new Color(0x23, 0x82, 0xa5));
        }

        if (firePropertyChange) {
            firePropertyChange("date", oldDate, date);

            if (date == null || !dateUtil.checkDate(date)) {
                try {
                    peer.setDate(date);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
    }

    public void setDateFormatString(String dateFormatString) {
        if (ignoreDatePatternChange) {
            return;
        }

        try {
            dateFormatter.applyPattern(dateFormatString);
        } catch (RuntimeException e) {
            dateFormatter = (SimpleDateFormat) DateFormat.getDateInstance(DateFormat.MEDIUM);
            dateFormatter.setLenient(false);
        }
        this.datePattern = dateFormatter.toPattern();
        setToolTipText(this.datePattern);
        setDate(date, false);
    }

    public String getDateFormatString() {
        return datePattern;
    }

    public void setDateFormatCalendar(Calendar calendar) {
        dateFormatter.setCalendar(calendar != null ? calendar : Calendar.getInstance());
        setDate(date, false);
    }

    public Calendar getDateFormatCalendar() {
        return dateFormatter.getCalendar();
    }

    public JComponent getUiComponent() {
        return this;
    }

    public void caretUpdate(CaretEvent event) {
        Color blue = new Color(0x23, 0x82, 0xa5);
        Color red = new Color(0xf5, 0x78, 0x78);
        String text = getText().replace(" ", "");
        String emptyMask = maskPattern.replace('#', placeholder);

        if (text.length() == 0 || text.equals(emptyMask)) {
            setForeground(blue);
            return;
        }

        try {
            Date date = dateFormatter.parse(getText());
            if (dateUtil.checkDate(date)) {
                setForeground(blue);
            } else {
                setForeground(blue);
            }
        } catch (Exception e) {
            setForeground(blue);
        }
    }

    public void focusLost(FocusEvent focusEvent) {
        checkText();
    }

    public void checkText() {
        try {
            Date date = dateFormatter.parse(getText());
            setDate(date, true);

        } catch (Exception e) {
        }
    }

    public void focusGained(FocusEvent e) {
        checkText();
    }

    public void setLocale(Locale locale) {
        if (locale == getLocale() || ignoreDatePatternChange) {
            return;
        }

        super.setLocale(locale);
        dateFormatter = (SimpleDateFormat) DateFormat.getDateInstance(DateFormat.MEDIUM, locale);
        setToolTipText(dateFormatter.toPattern());

        setDate(date, false);
        doLayout();
    }

    public String createMaskFromDatePattern(String datePattern) {
        String symbols = "GyMdkHmsSEDFwWahKzZ";
        String mask = "";
        for (int i = 0; i < datePattern.length(); i++) {
            char ch = datePattern.charAt(i);
            boolean symbolFound = false;
            for (int n = 0; n < symbols.length(); n++) {
                if (symbols.charAt(n) == ch) {
                    mask += "#";
                    symbolFound = true;
                    break;
                }
            }
            if (!symbolFound) {
                mask += ch;
            }
        }
        return mask;
    }

    public boolean isMaskVisible() {
        return isMaskVisible;
    }

    public void setMaskVisible(boolean isMaskVisible) {
        this.isMaskVisible = isMaskVisible;
        if (isMaskVisible) {
            if (maskFormatter == null) {
                try {
                    maskFormatter = new MaskFormatter(createMaskFromDatePattern(datePattern));
                    maskFormatter.setPlaceholderCharacter(this.placeholder);
                    maskFormatter.install(this);
                } catch (ParseException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    public Dimension getPreferredSize() {
        if (datePattern != null) {
            return new JTextField(datePattern).getPreferredSize();
        }
        return super.getPreferredSize();
    }

    public void actionPerformed(ActionEvent e) {
        checkText();
    }

    public void setEnabled(boolean b) {
        super.setEnabled(b);
        if (!b) {
            super.setBackground(UIManager.getColor("TextField.inactiveBackground"));
        }
    }

    public Date getMaxSelectableDate() {
        return dateUtil.getMaxSelectableDate();
    }

    public Date getMinSelectableDate() {
        return dateUtil.getMinSelectableDate();
    }

    public void setMaxSelectableDate(Date max) {
        dateUtil.setMaxSelectableDate(max);
        checkText();
    }

    public void setMinSelectableDate(Date min) {
        dateUtil.setMinSelectableDate(min);
        checkText();
    }

    public void setSelectableDateRange(Date min, Date max) {
        dateUtil.setSelectableDateRange(min, max);
        checkText();
    }

    public static void main(String[] s) {
        JFrame frame = new JFrame("JTextFieldDateEditor");
        JMaskedDateField jTextFieldDateEditor = new JMaskedDateField();
        jTextFieldDateEditor.setDate(new Date());
        frame.getContentPane().add(jTextFieldDateEditor);
        frame.pack();
        frame.setVisible(true);
    }
}