/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package sleekbill.beans;

import com.j256.ormlite.dao.Dao;
import com.j256.ormlite.dao.DaoManager;
import com.j256.ormlite.dao.GenericRawResults;
import com.j256.ormlite.jdbc.JdbcConnectionSource;
import com.j256.ormlite.stmt.UpdateBuilder;
import java.util.List;
import sleekbill.Common;
import sleekbill.entities.TipEntity;

/**
 *
 * @author Andrei
 */
public class Tip extends TipEntity{
    
    private Dao<TipEntity, Integer> mainDao;
    private JdbcConnectionSource mainConnection = Common.connection.getConnection();

    public Tip(TipEntity tipEntity) {
        this(0);
        this.id = tipEntity.getId();
        this.text = tipEntity.getText();
        this.priority = tipEntity.getPriority();
        this.version = tipEntity.getVersion();
        this.count = tipEntity.getCount();
    }

    public Tip() {
        this(0);
    }

    public Tip(Integer id) {
        super();

        if (mainConnection != null) {
            try {
                mainDao = DaoManager
                        .createDao(mainConnection, TipEntity.class);

                if (id != null && id != 0) {
                    setId(id);
                    mainDao.refresh(this);
                }

            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    public void refreshDao() {
        try {
            mainDao = DaoManager
                    .createDao(Common.connection.getConnection(), TipEntity.class);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void create() throws Exception {
        mainDao.create(this);
    }

    public TipEntity read(Integer id) throws Exception {
        return mainDao.queryForId(id);
    }

    public void update() throws Exception {
        mainDao.update(this);
    }

    public void delete() throws Exception {
        mainDao.delete(this);
    }
    
    public static String getTip(JdbcConnectionSource connection) {
        String ret = "";
        Dao<TipEntity, Integer> tipsDao;
        try {
            tipsDao = DaoManager.createDao(connection, TipEntity.class);
            GenericRawResults<String[]> queryRaw = tipsDao.queryRaw("select * from tips where count=(select min(count) from tips) order by priority desc");
            List<String[]> results = queryRaw.getResults();
            String[] row = results.get(0);
            
            UpdateBuilder<TipEntity, Integer> ub = tipsDao.updateBuilder();
            ub.updateColumnValue(Tip.COUNT, Integer.parseInt(row[4])+1);
            ub.where().eq("id", row[0]);
            ub.update(); 

            return row[1];

        } catch (Exception ex) {
            ex.printStackTrace();
        }

        return ret;
    }
    
    @Override
    public int hashCode() {
        int hash = 3;
        hash = 11 * hash + this.id;
        hash = 11 * hash + (this.text != null ? this.text.hashCode() : 0);
        hash = 11 * hash + (this.priority != null ? this.priority.hashCode() : 0);
        hash = 11 * hash + (this.version != null ? this.version.hashCode() : 0);
        hash = 11 * hash + (this.count != null ? this.count.hashCode() : 0);
        return hash;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final Tip other = (Tip) obj;
        if (this.id != other.id) {
            return false;
        }
        if ((this.text == null) ? (other.text != null) : !this.text.equals(other.text)) {
            return false;
        }
        if (this.priority != other.priority && (this.priority == null || !this.priority.equals(other.priority))) {
            return false;
        }
        if (this.version != other.version && (this.version == null || !this.version.equals(other.version))) {
            return false;
        }
        if (this.count != other.count && (this.count == null || !this.count.equals(other.count))) {
            return false;
        }
        return true;
    } 
}
