/*
 * JDialogImportExcel.java
 *
 */
package sleekbill.frames;

import java.io.File;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;

import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;

import sleekbill.Common;
import sleekbill.Config;
import sleekbill.Messages;
import sleekbill.excel.Export;
import sleekbill.excel.Import;
import sleekbill.excel.NameType;
import sleekbill.util.SBSwingUtils;

/**
 *
 * @author dani
 */
public class JDialogImportExcelEx extends javax.swing.JDialog {

    private static String TEXT_CLIENTS = "<div style='font-family:Verdana;font-size:10px;'><span style=\"color:#2382a5; font-weight:bold;\"> Importing Your Clients from Excel</span> (.xls) <br/> <br/>"
            + "<b>Follow these steps: </b> <br/>"
            + "1 Download the Excel template to your computer by clicking the <b>Download Sample</b> button. <br/>"
            + "2 Integrate your data into the template file, minding the column order. <br/>"
            + "3 Click <b>Upload File</b>. <br/>"
            + "<br/><br/>"
            + "<b>IMPORTANT : </b> <br/>"
            + "- Do not change the column order in the template file.<br/> "
            + "- If you do not have data for a particular column, leave it empty and do not move or delete the column.<br/>"
            + "- If the shipping address is the same as the billing address, leave the shipping address columns empty.<br/>"
            + "</div>";
    private static String TEXT_PRODUCTS = "<div style='font-family:Verdana;font-size:10px;'><span style=\"color:#2382a5; font-weight:bold;\"> Importing Your Products from Excel</span>(.xls) <br/> <br/>"
            + "<b>Follow these steps: </b> <br/>"
            + "1 Download the Excel template to your computer by clicking the <b>Download Sample</b> button. <br/>"
            + "2 Integrate your data into the template file, minding the column order. <br/>"
            + "3 Click <b>Upload File</b>. <br/>"
            + "<br/><br/>"
            + "<b>IMPORTANT : </b> <br/>"
            + "- Do not change the column order in the template file.<br/> "
            + "- If you do not have data for a particular column, leave it empty and do not move or delete the column.<br/>"
            + "</div>";
    public static final int FOR_CLIENTS = 1;
    public static final int FOR_PRODUCTS = 2;
    private File selectedFile;
    private JFileChooser fc = new JFileChooser();
    private boolean confirmed;
    int type = 1;

    /**
     * Creates new form JDialogImportExcel
     */
    public JDialogImportExcelEx(java.awt.Frame parent, int type) {
        super(parent, true);
        initComponents();
        this.type = type;
        switch (type) {
            case FOR_CLIENTS:
                jEPText.setText(TEXT_CLIENTS);
                setTitle("Import Clients");
                break;
            case FOR_PRODUCTS:
                jEPText.setText(TEXT_PRODUCTS);
                setTitle("Import Products/Services");
                break;
            default:
                jEPText.setText("");
                break;
        }
        setLocationRelativeTo(parent);
        fc.setFileFilter(new ExcelFileFilter());

        SBSwingUtils.addContextMenuToChildren(this);
//        SBSwingUtils.applyFocusBorder(this);
    }

    JDialogImportExcelEx(java.awt.Dialog parent, int type) {
        super(parent, true);
        initComponents();
        this.type = type;
        switch (type) {
            case FOR_CLIENTS:
                jEPText.setText(TEXT_CLIENTS);
                setTitle("Import Clients");
                break;
            case FOR_PRODUCTS:
                jEPText.setText(TEXT_PRODUCTS);
                setTitle("Import Products/Services");
                break;
            default:
                jEPText.setText("");
                break;
        }
        setLocationRelativeTo(parent);
        fc.setFileFilter(new ExcelFileFilter());

        SBSwingUtils.addContextMenuToChildren(this);
//        SBSwingUtils.applyFocusBorder(this);
    }

    public File getFile() {
        return fc.getSelectedFile();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed"
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jTA = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jBDemo = new javax.swing.JButton();
        jBImporta = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLIcon = new javax.swing.JLabel();
        jEPText = new javax.swing.JEditorPane();

        jTA.setEditable(false);
        jTA.setColumns(25);
        jTA.setForeground(new java.awt.Color(0, 0, 1));
        jTA.setLineWrap(true);
        jTA.setRows(12);
        jTA.setText("Cu ajutorul acestei sectiuni puteti importa produsele dumneavoastra in baza de date a programului Sleek Bill. Tot ceea ce aveti de facut este sa selectati fisierul in format Excel (.xls) sau orice alt tip de fisier in care datele sunt separate prin 'Tab' si apoi sa apasati butonul \"Importa\". Trebuie insa ca ordinea coloanelor din fisier sa fie urmatoarea: Denumire produs / Pret / UM / Cota TVA. Este important ca datele sa fie in aceasta ordine. Daca de exemplu nu completati datele referitoare la Pret dar completati campul Cota TVA, atunci trebuie sa lasati o coloana libera pentru campul respectiv. Este recomandat sa faceti un backup inainte de a merge mai departe. ");
        jTA.setWrapStyleWord(true);
        jTA.setOpaque(false);
        jTA.setPreferredSize(new java.awt.Dimension(300, 190));

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Import Products/Services");
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel3.setBackground(new java.awt.Color(229, 235, 242));
        jPanel3.setLayout(new java.awt.GridBagLayout());

        jPanel2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(195, 210, 219), 1, true));
        jPanel2.setPreferredSize(new java.awt.Dimension(600, 330));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 1, 1, 1, new java.awt.Color(203, 209, 213)));
        jPanel1.setPreferredSize(new java.awt.Dimension(357, 33));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jBDemo.setIcon(new ImageIcon("./images/buttons/Page_export.png"));
        jBDemo.setText("Download Sample");
        jBDemo.setName("bDownload"); // NOI18N
        jBDemo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBDemoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jBDemo, gridBagConstraints);

        jBImporta.setText("Upload File");
        jBImporta.setName("bUpload"); // NOI18N
        jBImporta.setIcon(new ImageIcon("./images/buttons/Page_import.png"));
        jBImporta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBImportaActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jBImporta, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.weightx = 0.1;
        jPanel2.add(jPanel1, gridBagConstraints);

        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(203, 209, 213)));
        jPanel4.setLayout(new java.awt.GridBagLayout());

        jLIcon.setPreferredSize(new java.awt.Dimension(90, 90));
        jLIcon.setIcon(new ImageIcon("./images/dialogs/icon_exclamare.png"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel4.add(jLIcon, gridBagConstraints);

        jEPText.setEditable(false);
        jEPText.setBorder(null);
        jEPText.setContentType("text/html"); // NOI18N
        jEPText.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        jEPText.setPreferredSize(new java.awt.Dimension(350, 200));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel4.add(jEPText, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        jPanel2.add(jPanel4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(15, 15, 15, 15);
        jPanel3.add(jPanel2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        getContentPane().add(jPanel3, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBDemoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBDemoActionPerformed
        String filename = "";
        Date data = new Date();
        DateFormat zi = new SimpleDateFormat("dd");
        DateFormat luna = new SimpleDateFormat("MM");
        DateFormat an = new SimpleDateFormat("yyyy");

        String sheetName = "";

        ArrayList<NameType> columns;
        Object[][] rowData = new Object[][]{};
        switch (type) {
            case FOR_CLIENTS:

                columns = NameType.CLIENT_COLUMNS;
                sheetName = "Clients";
                filename = "Clients " + (String) luna.format(data).toString() + "-" + (String) zi.format(data).toString() + "-" + (String) an.format(data).toString() + ".xls";
                break;
            case FOR_PRODUCTS:

                columns = !Common.keepStocks()?NameType.PRODUCT_COLUMNS:NameType.PRODUCT_COLUMNS_QUANTITY;
                sheetName = "Products";
                filename = "Products & Services " + (String) luna.format(data).toString() + "-" + (String) zi.format(data).toString() + "-" + (String) an.format(data).toString() + ".xls";
                break;
            default:
                columns = new ArrayList(Arrays.asList(new NameType[]{}));
                break;
        }

        File file = new File(filename);
        JFileChooser efc = new JFileChooser();
        efc.setSelectedFile(file);
        if (efc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            file = efc.getSelectedFile();
            if (file.exists()) {
                if (Messages.showQuestionMessage(this, "The file already exists. Would you like to overwrite?", "Save file") != JOptionPane.YES_OPTION) {
                    return;
                }
            }
            try {

                switch (type) {
                    case FOR_CLIENTS:
                        Export.DownloadTemplate(file, columns, sheetName);

                        break;
                    case FOR_PRODUCTS:
                        Export.DownloadProductsTemplate(file, columns);

                        break;
                    default:
                        break;
                }


                Messages.showOkMessage(this, "Download Complete!", "Download");
            } catch (Exception e) {
                Messages.showErrorMessage(this, "Operation could not complete! If it exists, see that the file is closed", "Error");
            }
        }

    }//GEN-LAST:event_jBDemoActionPerformed

    private void jBImportaActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jBImportaActionPerformed
        if (fc.showDialog(this, "Select") == JFileChooser.APPROVE_OPTION) {
            selectedFile = fc.getSelectedFile();

            try {

                switch (type) {
                    case FOR_CLIENTS:
                        Import.readClients(selectedFile);
                        break;
                    case FOR_PRODUCTS:
                        Import.readProducts(selectedFile);
                        break;
                    default:
                        break;
                }

                Messages.showOkMessage(this, "Upload complete!", "Upload");
            } catch (Exception ex) {
                Messages.showErrorMessage(this, ex.getMessage(), "Error");
                ex.printStackTrace();
            }
        }

    }

    private void jBIesireActionPerformed(java.awt.event.ActionEvent evt) {
        confirmed = false;
        dispose();
    }

    private class ExcelFileFilter extends FileFilter {

        public boolean accept(File f) {
            if (f.isDirectory()) {
                return true;
            }
            String extension = Common.getExtension(f);
            if (extension != null) {
                if (extension.equals("xls")) {
                    return true;
                }
            } else {
                return false;
            }
            return false;
        }

        // The description of this filter
        public String getDescription() {
            return "Excel files";
        }
    }

    public boolean isConfirmed() {
        return confirmed;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBDemo;
    private javax.swing.JButton jBImporta;
    private javax.swing.JEditorPane jEPText;
    private javax.swing.JLabel jLIcon;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JTextArea jTA;
    // End of variables declaration//GEN-END:variables
}
